!function(){var e={1343:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismDefaultParameterId=void 0,t.CubismDefaultParameterId=Object.freeze({HitAreaPrefix:"HitArea",HitAreaHead:"Head",HitAreaBody:"Body",PartsIdCore:"Parts01Core",PartsArmPrefix:"Parts01Arm_",PartsArmLPrefix:"Parts01ArmL_",PartsArmRPrefix:"Parts01ArmR_",ParamAngleX:"ParamAngleX",ParamAngleY:"ParamAngleY",ParamAngleZ:"ParamAngleZ",ParamEyeLOpen:"ParamEyeLOpen",ParamEyeLSmile:"ParamEyeLSmile",ParamEyeROpen:"ParamEyeROpen",ParamEyeRSmile:"ParamEyeRSmile",ParamEyeBallX:"ParamEyeBallX",ParamEyeBallY:"ParamEyeBallY",ParamEyeBallForm:"ParamEyeBallForm",ParamBrowLY:"ParamBrowLY",ParamBrowRY:"ParamBrowRY",ParamBrowLX:"ParamBrowLX",ParamBrowRX:"ParamBrowRX",ParamBrowLAngle:"ParamBrowLAngle",ParamBrowRAngle:"ParamBrowRAngle",ParamBrowLForm:"ParamBrowLForm",ParamBrowRForm:"ParamBrowRForm",ParamMouthForm:"ParamMouthForm",ParamMouthOpenY:"ParamMouthOpenY",ParamCheek:"ParamCheek",ParamBodyAngleX:"ParamBodyAngleX",ParamBodyAngleY:"ParamBodyAngleY",ParamBodyAngleZ:"ParamBodyAngleZ",ParamBreath:"ParamBreath",ParamArmLA:"ParamArmLA",ParamArmRA:"ParamArmRA",ParamArmLB:"ParamArmLB",ParamArmRB:"ParamArmRB",ParamHandL:"ParamHandL",ParamHandR:"ParamHandR",ParamHairFront:"ParamHairFront",ParamHairSide:"ParamHairSide",ParamHairBack:"ParamHairBack",ParamHairFluffy:"ParamHairFluffy",ParamShoulderY:"ParamShoulderY",ParamBustX:"ParamBustX",ParamBustY:"ParamBustY",ParamBaseX:"ParamBaseX",ParamBaseY:"ParamBaseY",ParamNONE:"NONE:"});var n,s=o(i(1343));(n=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).HitAreaBody=s.CubismDefaultParameterId.HitAreaBody,n.HitAreaHead=s.CubismDefaultParameterId.HitAreaHead,n.HitAreaPrefix=s.CubismDefaultParameterId.HitAreaPrefix,n.ParamAngleX=s.CubismDefaultParameterId.ParamAngleX,n.ParamAngleY=s.CubismDefaultParameterId.ParamAngleY,n.ParamAngleZ=s.CubismDefaultParameterId.ParamAngleZ,n.ParamArmLA=s.CubismDefaultParameterId.ParamArmLA,n.ParamArmLB=s.CubismDefaultParameterId.ParamArmLB,n.ParamArmRA=s.CubismDefaultParameterId.ParamArmRA,n.ParamArmRB=s.CubismDefaultParameterId.ParamArmRB,n.ParamBaseX=s.CubismDefaultParameterId.ParamBaseX,n.ParamBaseY=s.CubismDefaultParameterId.ParamBaseY,n.ParamBodyAngleX=s.CubismDefaultParameterId.ParamBodyAngleX,n.ParamBodyAngleY=s.CubismDefaultParameterId.ParamBodyAngleY,n.ParamBodyAngleZ=s.CubismDefaultParameterId.ParamBodyAngleZ,n.ParamBreath=s.CubismDefaultParameterId.ParamBreath,n.ParamBrowLAngle=s.CubismDefaultParameterId.ParamBrowLAngle,n.ParamBrowLForm=s.CubismDefaultParameterId.ParamBrowLForm,n.ParamBrowLX=s.CubismDefaultParameterId.ParamBrowLX,n.ParamBrowLY=s.CubismDefaultParameterId.ParamBrowLY,n.ParamBrowRAngle=s.CubismDefaultParameterId.ParamBrowRAngle,n.ParamBrowRForm=s.CubismDefaultParameterId.ParamBrowRForm,n.ParamBrowRX=s.CubismDefaultParameterId.ParamBrowRX,n.ParamBrowRY=s.CubismDefaultParameterId.ParamBrowRY,n.ParamBustX=s.CubismDefaultParameterId.ParamBustX,n.ParamBustY=s.CubismDefaultParameterId.ParamBustY,n.ParamCheek=s.CubismDefaultParameterId.ParamCheek,n.ParamEyeBallForm=s.CubismDefaultParameterId.ParamEyeBallForm,n.ParamEyeBallX=s.CubismDefaultParameterId.ParamEyeBallX,n.ParamEyeBallY=s.CubismDefaultParameterId.ParamEyeBallY,n.ParamEyeLOpen=s.CubismDefaultParameterId.ParamEyeLOpen,n.ParamEyeLSmile=s.CubismDefaultParameterId.ParamEyeLSmile,n.ParamEyeROpen=s.CubismDefaultParameterId.ParamEyeROpen,n.ParamEyeRSmile=s.CubismDefaultParameterId.ParamEyeRSmile,n.ParamHairBack=s.CubismDefaultParameterId.ParamHairBack,n.ParamHairFluffy=s.CubismDefaultParameterId.ParamHairFluffy,n.ParamHairFront=s.CubismDefaultParameterId.ParamHairFront,n.ParamHairSide=s.CubismDefaultParameterId.ParamHairSide,n.ParamHandL=s.CubismDefaultParameterId.ParamHandL,n.ParamHandR=s.CubismDefaultParameterId.ParamHandR,n.ParamMouthForm=s.CubismDefaultParameterId.ParamMouthForm,n.ParamMouthOpenY=s.CubismDefaultParameterId.ParamMouthOpenY,n.ParamNONE=s.CubismDefaultParameterId.ParamNONE,n.ParamShoulderY=s.CubismDefaultParameterId.ParamShoulderY,n.PartsArmLPrefix=s.CubismDefaultParameterId.PartsArmLPrefix,n.PartsArmPrefix=s.CubismDefaultParameterId.PartsArmPrefix,n.PartsArmRPrefix=s.CubismDefaultParameterId.PartsArmRPrefix,n.PartsIdCore=s.CubismDefaultParameterId.PartsIdCore},9090:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CSM_LOG_LEVEL=t.CSM_LOG_LEVEL_OFF=t.CSM_LOG_LEVEL_ERROR=t.CSM_LOG_LEVEL_WARNING=t.CSM_LOG_LEVEL_INFO=t.CSM_LOG_LEVEL_DEBUG=t.CSM_LOG_LEVEL_VERBOSE=void 0,t.CSM_LOG_LEVEL_VERBOSE=0,t.CSM_LOG_LEVEL_DEBUG=1,t.CSM_LOG_LEVEL_INFO=2,t.CSM_LOG_LEVEL_WARNING=3,t.CSM_LOG_LEVEL_ERROR=4,t.CSM_LOG_LEVEL_OFF=5,t.CSM_LOG_LEVEL=t.CSM_LOG_LEVEL_VERBOSE},9868:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelSettingJson=void 0;var u,l=i(1937),c=i(1076),h=i(5001),p=i(7695),d="FileReferences",g="UserData",_="Name",m="File",f="Ids",y="Sound",v="FadeInTime",b="FadeOutTime",M="LipSync",C="EyeBlink";!function(e){e[e.FrequestNode_Groups=0]="FrequestNode_Groups",e[e.FrequestNode_Moc=1]="FrequestNode_Moc",e[e.FrequestNode_Motions=2]="FrequestNode_Motions",e[e.FrequestNode_Expressions=3]="FrequestNode_Expressions",e[e.FrequestNode_Textures=4]="FrequestNode_Textures",e[e.FrequestNode_Physics=5]="FrequestNode_Physics",e[e.FrequestNode_Pose=6]="FrequestNode_Pose",e[e.FrequestNode_HitAreas=7]="FrequestNode_HitAreas"}(u||(u={}));var S=function(e){function t(t,i){var r=e.call(this)||this;return r._json=p.CubismJson.create(t,i),r._json&&(r._jsonValue=new h.csmVector,r._jsonValue.pushBack(r._json.getRoot().getValueByString("Groups")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Moc")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Motions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Expressions")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Textures")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Physics")),r._jsonValue.pushBack(r._json.getRoot().getValueByString(d).getValueByString("Pose")),r._jsonValue.pushBack(r._json.getRoot().getValueByString("HitAreas"))),r}return a(t,e),t.prototype.release=function(){p.CubismJson.delete(this._json),this._jsonValue=null},t.prototype.GetJson=function(){return this._json},t.prototype.getModelFileName=function(){return this.isExistModelFile()?this._jsonValue.at(u.FrequestNode_Moc).getRawString():""},t.prototype.getTextureCount=function(){return this.isExistTextureFiles()?this._jsonValue.at(u.FrequestNode_Textures).getSize():0},t.prototype.getTextureDirectory=function(){for(var e=this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(0).getRawString().split("/"),t=e.length-1,i="",r=0;r<t;r++)i+=e[r],r<t-1&&(i+="/");return i},t.prototype.getTextureFileName=function(e){return this._jsonValue.at(u.FrequestNode_Textures).getValueByIndex(e).getRawString()},t.prototype.getHitAreasCount=function(){return this.isExistHitAreas()?this._jsonValue.at(u.FrequestNode_HitAreas).getSize():0},t.prototype.getHitAreaId=function(e){return c.CubismFramework.getIdManager().getId(this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(e).getValueByString("Id").getRawString())},t.prototype.getHitAreaName=function(e){return this._jsonValue.at(u.FrequestNode_HitAreas).getValueByIndex(e).getValueByString(_).getRawString()},t.prototype.getPhysicsFileName=function(){return this.isExistPhysicsFile()?this._jsonValue.at(u.FrequestNode_Physics).getRawString():""},t.prototype.getPoseFileName=function(){return this.isExistPoseFile()?this._jsonValue.at(u.FrequestNode_Pose).getRawString():""},t.prototype.getExpressionCount=function(){return this.isExistExpressionFile()?this._jsonValue.at(u.FrequestNode_Expressions).getSize():0},t.prototype.getExpressionName=function(e){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(e).getValueByString(_).getRawString()},t.prototype.getExpressionFileName=function(e){return this._jsonValue.at(u.FrequestNode_Expressions).getValueByIndex(e).getValueByString(m).getRawString()},t.prototype.getMotionGroupCount=function(){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().getSize():0},t.prototype.getMotionGroupName=function(e){return this.isExistMotionGroups()?this._jsonValue.at(u.FrequestNode_Motions).getKeys().at(e):null},t.prototype.getMotionCount=function(e){return this.isExistMotionGroupName(e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getSize():0},t.prototype.getMotionFileName=function(e,t){return this.isExistMotionGroupName(e)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(m).getRawString():""},t.prototype.getMotionSoundFileName=function(e,t){return this.isExistMotionSoundFile(e,t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(y).getRawString():""},t.prototype.getMotionFadeInTimeValue=function(e,t){return this.isExistMotionFadeIn(e,t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(v).toFloat():-1},t.prototype.getMotionFadeOutTimeValue=function(e,t){return this.isExistMotionFadeOut(e,t)?this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(b).toFloat():-1},t.prototype.getUserDataFile=function(){return this.isExistUserDataFile()?this._json.getRoot().getValueByString(d).getValueByString(g).getRawString():""},t.prototype.getLayoutMap=function(e){var t=this._json.getRoot().getValueByString("Layout").getMap();if(null==t)return!1;for(var i=!1,r=t.begin();r.notEqual(t.end());r.preIncrement())e.setValue(r.ptr().first,r.ptr().second.toFloat()),i=!0;return i},t.prototype.getEyeBlinkParameterCount=function(){if(!this.isExistEyeBlinkParameters())return 0;for(var e=0,t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==C){e=i.getValueByString(f).getVector().getSize();break}}return e},t.prototype.getEyeBlinkParameterId=function(e){if(!this.isExistEyeBlinkParameters())return null;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==C)return c.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(e).getRawString())}return null},t.prototype.getLipSyncParameterCount=function(){if(!this.isExistLipSyncParameters())return 0;for(var e=0,t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==M){e=i.getValueByString(f).getVector().getSize();break}}return e},t.prototype.getLipSyncParameterId=function(e){if(!this.isExistLipSyncParameters())return null;for(var t=0;t<this._jsonValue.at(u.FrequestNode_Groups).getSize();t++){var i=this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(t);if(!i.isNull()&&!i.isError()&&i.getValueByString(_).getRawString()==M)return c.CubismFramework.getIdManager().getId(i.getValueByString(f).getValueByIndex(e).getRawString())}return null},t.prototype.isExistModelFile=function(){var e=this._jsonValue.at(u.FrequestNode_Moc);return!e.isNull()&&!e.isError()},t.prototype.isExistTextureFiles=function(){var e=this._jsonValue.at(u.FrequestNode_Textures);return!e.isNull()&&!e.isError()},t.prototype.isExistHitAreas=function(){var e=this._jsonValue.at(u.FrequestNode_HitAreas);return!e.isNull()&&!e.isError()},t.prototype.isExistPhysicsFile=function(){var e=this._jsonValue.at(u.FrequestNode_Physics);return!e.isNull()&&!e.isError()},t.prototype.isExistPoseFile=function(){var e=this._jsonValue.at(u.FrequestNode_Pose);return!e.isNull()&&!e.isError()},t.prototype.isExistExpressionFile=function(){var e=this._jsonValue.at(u.FrequestNode_Expressions);return!e.isNull()&&!e.isError()},t.prototype.isExistMotionGroups=function(){var e=this._jsonValue.at(u.FrequestNode_Motions);return!e.isNull()&&!e.isError()},t.prototype.isExistMotionGroupName=function(e){var t=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e);return!t.isNull()&&!t.isError()},t.prototype.isExistMotionSoundFile=function(e,t){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(y);return!i.isNull()&&!i.isError()},t.prototype.isExistMotionFadeIn=function(e,t){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(v);return!i.isNull()&&!i.isError()},t.prototype.isExistMotionFadeOut=function(e,t){var i=this._jsonValue.at(u.FrequestNode_Motions).getValueByString(e).getValueByIndex(t).getValueByString(b);return!i.isNull()&&!i.isError()},t.prototype.isExistUserDataFile=function(){var e=this._json.getRoot().getValueByString(d).getValueByString(g);return!e.isNull()&&!e.isError()},t.prototype.isExistEyeBlinkParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();++e)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e).getValueByString(_).getRawString()==C)return!0;return!1},t.prototype.isExistLipSyncParameters=function(){if(this._jsonValue.at(u.FrequestNode_Groups).isNull()||this._jsonValue.at(u.FrequestNode_Groups).isError())return!1;for(var e=0;e<this._jsonValue.at(u.FrequestNode_Groups).getSize();++e)if(this._jsonValue.at(u.FrequestNode_Groups).getValueByIndex(e).getValueByString(_).getRawString()==M)return!0;return!1},t}(l.ICubismModelSetting);t.CubismModelSettingJson=S;var P=s(i(9868));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelSettingJson=P.CubismModelSettingJson},6332:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.BreathParameterData=t.CubismBreath=void 0;var n=function(){function e(){this._currentTime=0}return e.create=function(){return new e},e.delete=function(e){null!=e&&(e=null)},e.prototype.setParameters=function(e){this._breathParameters=e},e.prototype.getParameters=function(){return this._breathParameters},e.prototype.updateParameters=function(e,t){this._currentTime+=t;for(var i=2*this._currentTime*3.14159,r=0;r<this._breathParameters.getSize();++r){var a=this._breathParameters.at(r);e.addParameterValueById(a.parameterId,a.offset+a.peak*Math.sin(i/a.cycle),a.weight)}},e}();t.CubismBreath=n;t.BreathParameterData=function(e,t,i,r,a){this.parameterId=null==e?null:e,this.offset=null==t?0:t,this.peak=null==i?0:i,this.cycle=null==r?0:r,this.weight=null==a?0:a};var s,u=o(i(6332));(s=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).BreathParameterData=u.BreathParameterData,s.CubismBreath=u.CubismBreath},4605:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.EyeState=t.CubismEyeBlink=void 0;var n,s=i(5001),u=function(){function e(e){if(this._blinkingState=n.EyeState_First,this._nextBlinkingTime=0,this._stateStartTimeSeconds=0,this._blinkingIntervalSeconds=4,this._closingSeconds=.1,this._closedSeconds=.05,this._openingSeconds=.15,this._userTimeSeconds=0,this._parameterIds=new s.csmVector,null!=e)for(var t=0;t<e.getEyeBlinkParameterCount();++t)this._parameterIds.pushBack(e.getEyeBlinkParameterId(t))}return e.create=function(t){return void 0===t&&(t=null),new e(t)},e.delete=function(e){null!=e&&(e=null)},e.prototype.setBlinkingInterval=function(e){this._blinkingIntervalSeconds=e},e.prototype.setBlinkingSetting=function(e,t,i){this._closingSeconds=e,this._closedSeconds=t,this._openingSeconds=i},e.prototype.setParameterIds=function(e){this._parameterIds=e},e.prototype.getParameterIds=function(){return this._parameterIds},e.prototype.updateParameters=function(t,i){var r;this._userTimeSeconds+=i;var a=0;switch(this._blinkingState){case n.EyeState_Closing:(a=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closingSeconds)>=1&&(a=1,this._blinkingState=n.EyeState_Closed,this._stateStartTimeSeconds=this._userTimeSeconds),r=1-a;break;case n.EyeState_Closed:(a=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._closedSeconds)>=1&&(this._blinkingState=n.EyeState_Opening,this._stateStartTimeSeconds=this._userTimeSeconds),r=0;break;case n.EyeState_Opening:(a=(this._userTimeSeconds-this._stateStartTimeSeconds)/this._openingSeconds)>=1&&(a=1,this._blinkingState=n.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming()),r=a;break;case n.EyeState_Interval:this._nextBlinkingTime<this._userTimeSeconds&&(this._blinkingState=n.EyeState_Closing,this._stateStartTimeSeconds=this._userTimeSeconds),r=1;break;case n.EyeState_First:default:this._blinkingState=n.EyeState_Interval,this._nextBlinkingTime=this.determinNextBlinkingTiming(),r=1}e.CloseIfZero||(r=-r);for(var o=0;o<this._parameterIds.getSize();++o)t.setParameterValueById(this._parameterIds.at(o),r)},e.prototype.determinNextBlinkingTiming=function(){var e=Math.random();return this._userTimeSeconds+e*(2*this._blinkingIntervalSeconds-1)},e.CloseIfZero=!0,e}();t.CubismEyeBlink=u,function(e){e[e.EyeState_First=0]="EyeState_First",e[e.EyeState_Interval=1]="EyeState_Interval",e[e.EyeState_Closing=2]="EyeState_Closing",e[e.EyeState_Closed=3]="EyeState_Closed",e[e.EyeState_Opening=4]="EyeState_Opening"}(n=t.EyeState||(t.EyeState={}));var l,c=o(i(4605));(l=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismEyeBlink=c.CubismEyeBlink,l.EyeState=c.EyeState},4311:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.PartData=t.CubismPose=void 0;var n=i(1076),s=i(5001),u=i(7695),l="FadeInTime",c="Link",h=function(){function e(){this._fadeTimeSeconds=.5,this._lastModel=null,this._partGroups=new s.csmVector,this._partGroupCounts=new s.csmVector}return e.create=function(t,i){var r=new e,a=u.CubismJson.create(t,i),o=a.getRoot();o.getValueByString(l).isNull()||(r._fadeTimeSeconds=o.getValueByString(l).toFloat(.5),r._fadeTimeSeconds<=0&&(r._fadeTimeSeconds=.5));for(var s=o.getValueByString("Groups"),h=s.getSize(),d=0;d<h;++d){for(var g=s.getValueByIndex(d),_=g.getSize(),m=0,f=0;f<_;++f){var y=g.getValueByIndex(f),v=new p,b=n.CubismFramework.getIdManager().getId(y.getValueByString("Id").getRawString());if(v.partId=b,!y.getValueByString(c).isNull())for(var M=y.getValueByString(c),C=M.getSize(),S=0;S<C;++S){var P=new p,I=n.CubismFramework.getIdManager().getId(M.getValueByIndex(S).getString());P.partId=I,v.link.pushBack(P)}r._partGroups.pushBack(v.clone()),++m}r._partGroupCounts.pushBack(m)}return u.CubismJson.delete(a),r},e.delete=function(e){null!=e&&(e=null)},e.prototype.updateParameters=function(e,t){e!=this._lastModel&&this.reset(e),this._lastModel=e,t<0&&(t=0);for(var i=0,r=0;r<this._partGroupCounts.getSize();r++){var a=this._partGroupCounts.at(r);this.doFade(e,t,i,a),i+=a}this.copyPartOpacities(e)},e.prototype.reset=function(e){for(var t=0,i=0;i<this._partGroupCounts.getSize();++i){for(var r=this._partGroupCounts.at(i),a=t;a<t+r;++a){this._partGroups.at(a).initialize(e);var o=this._partGroups.at(a).partIndex,n=this._partGroups.at(a).parameterIndex;if(!(o<0)){e.setPartOpacityByIndex(o,a==t?1:0),e.setParameterValueByIndex(n,a==t?1:0);for(var s=0;s<this._partGroups.at(a).link.getSize();++s)this._partGroups.at(a).link.at(s).initialize(e)}}t+=r}},e.prototype.copyPartOpacities=function(e){for(var t=0;t<this._partGroups.getSize();++t){var i=this._partGroups.at(t);if(0!=i.link.getSize())for(var r=this._partGroups.at(t).partIndex,a=e.getPartOpacityByIndex(r),o=0;o<i.link.getSize();++o){var n=i.link.at(o).partIndex;n<0||e.setPartOpacityByIndex(n,a)}}},e.prototype.doFade=function(e,t,i,r){for(var a=-1,o=1,n=i;n<i+r;++n){var s=this._partGroups.at(n).partIndex,u=this._partGroups.at(n).parameterIndex;if(e.getParameterValueByIndex(u)>.001){if(a>=0)break;a=n,o=e.getPartOpacityByIndex(s),(o+=t/this._fadeTimeSeconds)>1&&(o=1)}}for(a<0&&(a=0,o=1),n=i;n<i+r;++n){var l=this._partGroups.at(n).partIndex;if(a==n)e.setPartOpacityByIndex(l,o);else{var c=e.getPartOpacityByIndex(l),h=void 0;(1-(h=o<.5?-.5*o/.5+1:.5*(1-o)/.5))*(1-o)>.15&&(h=1-.15/(1-o)),c>h&&(c=h),e.setPartOpacityByIndex(l,c)}}},e}();t.CubismPose=h;var p=function(){function e(e){if(this.parameterIndex=0,this.partIndex=0,this.link=new s.csmVector,null!=e){this.partId=e.partId;for(var t=e.link.begin();t.notEqual(e.link.end());t.preIncrement())this.link.pushBack(t.ptr().clone())}}return e.prototype.assignment=function(e){this.partId=e.partId;for(var t=e.link.begin();t.notEqual(e.link.end());t.preIncrement())this.link.pushBack(t.ptr().clone());return this},e.prototype.initialize=function(e){this.parameterIndex=e.getParameterIndex(this.partId),this.partIndex=e.getPartIndex(this.partId),e.setParameterValueByIndex(this.parameterIndex,1)},e.prototype.clone=function(){var t=new e;t.partId=this.partId,t.parameterIndex=this.parameterIndex,t.partIndex=this.partIndex,t.link=new s.csmVector;for(var i=this.link.begin();i.notEqual(this.link.end());i.increment())t.link.pushBack(i.ptr().clone());return t},e}();t.PartData=p;var d,g=o(i(4311));(d=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPose=g.CubismPose,d.PartData=g.PartData},1937:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.ICubismModelSetting=void 0;t.ICubismModelSetting=function(){};var n=o(i(1937));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).ICubismModelSetting=n.ICubismModelSetting},7305:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismId=void 0;var n=i(180),s=function(){function e(e){this._id="string"!=typeof e?e:new n.csmString(e)}return e.prototype.getString=function(){return this._id},e.prototype.isEqual=function(t){return"string"==typeof t?this._id.isEqual(t):t instanceof n.csmString?this._id.isEqual(t.s):t instanceof e&&this._id.isEqual(t._id.s)},e.prototype.isNotEqual=function(t){return"string"==typeof t?!this._id.isEqual(t):t instanceof n.csmString?!this._id.isEqual(t.s):t instanceof e&&!this._id.isEqual(t._id.s)},e}();t.CubismId=s;var u=o(i(7305));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismId=u.CubismId},5802:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismIdManager=void 0;var n=i(5001),s=i(7305),u=function(){function e(){this._ids=new n.csmVector}return e.prototype.release=function(){for(var e=0;e<this._ids.getSize();++e)this._ids.set(e,void 0);this._ids=null},e.prototype.registerIds=function(e){for(var t=0;t<e.length;t++)this.registerId(e[t])},e.prototype.registerId=function(e){var t=null;return"string"!=typeof e?this.registerId(e.s):(null!=(t=this.findId(e))||(t=new s.CubismId(e),this._ids.pushBack(t)),t)},e.prototype.getId=function(e){return this.registerId(e)},e.prototype.isExist=function(e){return"string"==typeof e?null!=this.findId(e):this.isExist(e.s)},e.prototype.findId=function(e){for(var t=0;t<this._ids.getSize();++t)if(this._ids.at(t).getString().isEqual(e))return this._ids.at(t);return null},e}();t.CubismIdManager=u;var l=o(i(5802));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismIdManager=l.CubismIdManager},1076:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.LogLevel=t.Option=t.CubismFramework=t.csmDelete=t.Constant=t.strtod=void 0;var n=i(5802),s=i(5505),u=i(8945),l=i(7695);t.strtod=function(e,t){for(var i=0,r=1;;r++){var a=e.slice(r-1,r);if("e"!=a&&"-"!=a&&"E"!=a){var o=e.substring(0,r),n=Number(o);if(isNaN(n))break;i=r}}var s=parseFloat(e);return isNaN(s)&&(s=NaN),t[0]=e.slice(i),s};var c=!1,h=!1,p=null,d=null;t.Constant=Object.freeze({vertexOffset:0,vertexStep:2}),t.csmDelete=function(e){e&&(e=void 0)};var g=function(){function e(){}return e.startUp=function(e){if(void 0===e&&(e=null),c)return(0,u.CubismLogInfo)("CubismFramework.startUp() is already done."),c;if(null!=(p=e)&&Live2DCubismCore.Logging.csmSetLogFunction(p.logFunction),c=!0){var t=Live2DCubismCore.Version.csmGetVersion(),i=(4278190080&t)>>24,r=(16711680&t)>>16,a=65535&t,o=t;(0,u.CubismLogInfo)("Live2D Cubism Core version: {0}.{1}.{2} ({3})",("00"+i).slice(-2),("00"+r).slice(-2),("0000"+a).slice(-4),o)}return(0,u.CubismLogInfo)("CubismFramework.startUp() is complete."),c},e.cleanUp=function(){c=!1,h=!1,p=null,d=null},e.initialize=function(e){void 0===e&&(e=0),(0,u.CSM_ASSERT)(c),c?h?(0,u.CubismLogWarning)("CubismFramework.initialize() skipped, already initialized."):(l.Value.staticInitializeNotForClientCall(),d=new n.CubismIdManager,Live2DCubismCore.Memory.initializeAmountOfMemory(e),h=!0,(0,u.CubismLogInfo)("CubismFramework.initialize() is complete.")):(0,u.CubismLogWarning)("CubismFramework is not started.")},e.dispose=function(){(0,u.CSM_ASSERT)(c),c?h?(l.Value.staticReleaseNotForClientCall(),d.release(),d=null,s.CubismRenderer.staticRelease(),h=!1,(0,u.CubismLogInfo)("CubismFramework.dispose() is complete.")):(0,u.CubismLogWarning)("CubismFramework.dispose() skipped, not initialized."):(0,u.CubismLogWarning)("CubismFramework is not started.")},e.isStarted=function(){return c},e.isInitialized=function(){return h},e.coreLogFunction=function(e){Live2DCubismCore.Logging.csmGetLogFunction()&&Live2DCubismCore.Logging.csmGetLogFunction()(e)},e.getLoggingLevel=function(){return null!=p?p.loggingLevel:_.LogLevel_Off},e.getIdManager=function(){return d},e}();t.CubismFramework=g;var _;t.Option=function(){},function(e){e[e.LogLevel_Verbose=0]="LogLevel_Verbose",e[e.LogLevel_Debug=1]="LogLevel_Debug",e[e.LogLevel_Info=2]="LogLevel_Info",e[e.LogLevel_Warning=3]="LogLevel_Warning",e[e.LogLevel_Error=4]="LogLevel_Error",e[e.LogLevel_Off=5]="LogLevel_Off"}(_=t.LogLevel||(t.LogLevel={}));var m,f=o(i(1076));(m=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).Constant=f.Constant,m.csmDelete=f.csmDelete,m.CubismFramework=f.CubismFramework},4165:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMath=void 0;var n=i(9520),s=function(){function e(){}return e.range=function(e,t,i){return e<t?e=t:e>i&&(e=i),e},e.sin=function(e){return Math.sin(e)},e.cos=function(e){return Math.cos(e)},e.abs=function(e){return Math.abs(e)},e.sqrt=function(e){return Math.sqrt(e)},e.cbrt=function(e){if(0===e)return e;var t,i=e,r=i<0;return r&&(i=-i),t=i===1/0?1/0:(i/((t=Math.exp(Math.log(i)/3))*t)+2*t)/3,r?-t:t},e.getEasingSine=function(e){return e<0?0:e>1?1:.5-.5*this.cos(e*Math.PI)},e.max=function(e,t){return e>t?e:t},e.min=function(e,t){return e>t?t:e},e.degreesToRadian=function(e){return e/180*Math.PI},e.radianToDegrees=function(e){return 180*e/Math.PI},e.directionToRadian=function(e,t){for(var i=Math.atan2(t.y,t.x)-Math.atan2(e.y,e.x);i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i},e.directionToDegrees=function(e,t){var i=this.directionToRadian(e,t),r=this.radianToDegrees(i);return t.x-e.x>0&&(r=-r),r},e.radianToDirection=function(e){var t=new n.CubismVector2;return t.x=this.sin(e),t.y=this.cos(e),t},e.quadraticEquation=function(t,i,r){return this.abs(t)<e.Epsilon?this.abs(i)<e.Epsilon?-r:-r/i:-(i+this.sqrt(i*i-4*t*r))/(2*t)},e.cardanoAlgorithmForBezier=function(t,i,r,a){if(this.sqrt(t)<e.Epsilon)return this.range(this.quadraticEquation(i,r,a),0,1);var o=i/t,n=r/t,s=(3*n-o*o)/3,u=s/3,l=(2*o*o*o-9*o*n+a/t*27)/27,c=l/2,h=c*c+u*u*u,p=.51;if(h<0){var d=-s/3,g=d*d*d,_=this.sqrt(g),m=-l/(2*_),f=this.range(m,-1,1),y=Math.acos(f),v=2*this.cbrt(_),b=v*this.cos(y/3)-o/3;if(this.abs(b-.5)<p)return this.range(b,0,1);var M=v*this.cos((y+2*Math.PI)/3)-o/3;if(this.abs(M-.5)<p)return this.range(M,0,1);var C=v*this.cos((y+4*Math.PI)/3)-o/3;return this.range(C,0,1)}if(0==h){var S,P=2*(S=c<0?this.cbrt(-c):-this.cbrt(c))-o/3;return this.abs(P-.5)<p?this.range(P,0,1):(M=-S-o/3,this.range(M,0,1))}var I=this.sqrt(h),x=this.cbrt(I-c)-this.cbrt(I+c)-o/3;return this.range(x,0,1)},e.Epsilon=1e-5,e}();t.CubismMath=s;var u=o(i(4165));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMath=u.CubismMath},7633:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMatrix44=void 0;var n=function(){function e(){this._tr=new Float32Array(16),this.loadIdentity()}return e.multiply=function(e,t,i){for(var r=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),a=0;a<4;++a)for(var o=0;o<4;++o)for(var n=0;n<4;++n)r[o+4*a]+=e[n+4*a]*t[o+4*n];for(a=0;a<16;++a)i[a]=r[a]},e.prototype.loadIdentity=function(){var e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(e)},e.prototype.setMatrix=function(e){for(var t=0;t<16;++t)this._tr[t]=e[t]},e.prototype.getArray=function(){return this._tr},e.prototype.getScaleX=function(){return this._tr[0]},e.prototype.getScaleY=function(){return this._tr[5]},e.prototype.getTranslateX=function(){return this._tr[12]},e.prototype.getTranslateY=function(){return this._tr[13]},e.prototype.transformX=function(e){return this._tr[0]*e+this._tr[12]},e.prototype.transformY=function(e){return this._tr[5]*e+this._tr[13]},e.prototype.invertTransformX=function(e){return(e-this._tr[12])/this._tr[0]},e.prototype.invertTransformY=function(e){return(e-this._tr[13])/this._tr[5]},e.prototype.translateRelative=function(t,i){var r=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1]);e.multiply(r,this._tr,this._tr)},e.prototype.translate=function(e,t){this._tr[12]=e,this._tr[13]=t},e.prototype.translateX=function(e){this._tr[12]=e},e.prototype.translateY=function(e){this._tr[13]=e},e.prototype.scaleRelative=function(t,i){var r=new Float32Array([t,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]);e.multiply(r,this._tr,this._tr)},e.prototype.scale=function(e,t){this._tr[0]=e,this._tr[5]=t},e.prototype.multiplyByMatrix=function(t){e.multiply(t.getArray(),this._tr,this._tr)},e.prototype.clone=function(){for(var t=new e,i=0;i<this._tr.length;i++)t._tr[i]=this._tr[i];return t},e}();t.CubismMatrix44=n;var s=o(i(7633));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMatrix44=s.CubismMatrix44},4539:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelMatrix=void 0;var u=function(e){function t(t,i){var r=e.call(this)||this;return r._width=void 0!==t?t:0,r._height=void 0!==i?i:0,r.setHeight(2),r}return a(t,e),t.prototype.setWidth=function(e){var t=e/this._width,i=t;this.scale(t,i)},t.prototype.setHeight=function(e){var t=e/this._height,i=t;this.scale(t,i)},t.prototype.setPosition=function(e,t){this.translate(e,t)},t.prototype.setCenterPosition=function(e,t){this.centerX(e),this.centerY(t)},t.prototype.top=function(e){this.setY(e)},t.prototype.bottom=function(e){var t=this._height*this.getScaleY();this.translateY(e-t)},t.prototype.left=function(e){this.setX(e)},t.prototype.right=function(e){var t=this._width*this.getScaleX();this.translateX(e-t)},t.prototype.centerX=function(e){var t=this._width*this.getScaleX();this.translateX(e-t/2)},t.prototype.setX=function(e){this.translateX(e)},t.prototype.centerY=function(e){var t=this._height*this.getScaleY();this.translateY(e-t/2)},t.prototype.setY=function(e){this.translateY(e)},t.prototype.setupFromLayout=function(e){for(var t=e.begin();t.notEqual(e.end());t.preIncrement()){var i=t.ptr().first,r=t.ptr().second;"width"==i?this.setWidth(r):"height"==i&&this.setHeight(r)}for(t=e.begin();t.notEqual(e.end());t.preIncrement())i=t.ptr().first,r=t.ptr().second,"x"==i?this.setX(r):"y"==i?this.setY(r):"center_x"==i?this.centerX(r):"center_y"==i?this.centerY(r):"top"==i?this.top(r):"bottom"==i?this.bottom(r):"left"==i?this.left(r):"right"==i&&this.right(r)},t}(i(7633).CubismMatrix44);t.CubismModelMatrix=u;var l=s(i(4539));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelMatrix=l.CubismModelMatrix},8186:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismTargetPoint=void 0;var n=i(4165),s=function(){function e(){this._faceTargetX=0,this._faceTargetY=0,this._faceX=0,this._faceY=0,this._faceVX=0,this._faceVY=0,this._lastTimeSeconds=0,this._userTimeSeconds=0}return e.prototype.update=function(e){this._userTimeSeconds+=e;var t=4/30;if(0!=this._lastTimeSeconds){var i=30*(this._userTimeSeconds-this._lastTimeSeconds);this._lastTimeSeconds=this._userTimeSeconds;var r=i*t/4.5,a=this._faceTargetX-this._faceX,o=this._faceTargetY-this._faceY;if(!(n.CubismMath.abs(a)<=.01&&n.CubismMath.abs(o)<=.01)){var s=n.CubismMath.sqrt(a*a+o*o),u=t*o/s,l=t*a/s-this._faceVX,c=u-this._faceVY,h=n.CubismMath.sqrt(l*l+c*c);(h<-r||h>r)&&(l*=r/h,c*=r/h),this._faceVX+=l,this._faceVY+=c;var p=.5*(n.CubismMath.sqrt(r*r+16*r*s-8*r*s)-r),d=n.CubismMath.sqrt(this._faceVX*this._faceVX+this._faceVY*this._faceVY);d>p&&(this._faceVX*=p/d,this._faceVY*=p/d),this._faceX+=this._faceVX,this._faceY+=this._faceVY}}else this._lastTimeSeconds=this._userTimeSeconds},e.prototype.getX=function(){return this._faceX},e.prototype.getY=function(){return this._faceY},e.prototype.set=function(e,t){this._faceTargetX=e,this._faceTargetY=t},e}();t.CubismTargetPoint=s;var u=o(i(8186));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismTargetPoint=u.CubismTargetPoint},9520:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismVector2=void 0;var n=function(){function e(e,t){this.x=e,this.y=t,this.x=null==e?0:e,this.y=null==t?0:t}return e.prototype.add=function(t){var i=new e(0,0);return i.x=this.x+t.x,i.y=this.y+t.y,i},e.prototype.substract=function(t){var i=new e(0,0);return i.x=this.x-t.x,i.y=this.y-t.y,i},e.prototype.multiply=function(t){var i=new e(0,0);return i.x=this.x*t.x,i.y=this.y*t.y,i},e.prototype.multiplyByScaler=function(t){return this.multiply(new e(t,t))},e.prototype.division=function(t){var i=new e(0,0);return i.x=this.x/t.x,i.y=this.y/t.y,i},e.prototype.divisionByScalar=function(t){return this.division(new e(t,t))},e.prototype.getLength=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},e.prototype.getDistanceWith=function(e){return Math.sqrt((this.x-e.x)*(this.x-e.x)+(this.y-e.y)*(this.y-e.y))},e.prototype.dot=function(e){return this.x*e.x+this.y*e.y},e.prototype.normalize=function(){var e=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/e,this.y=this.y/e},e.prototype.isEqual=function(e){return this.x==e.x&&this.y==e.y},e.prototype.isNotEqual=function(e){return!this.isEqual(e)},e}();t.CubismVector2=n;var s=o(i(9520));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismVector2=s.CubismVector2},3391:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismViewMatrix=void 0;var u=i(7633),l=function(e){function t(){var t=e.call(this)||this;return t._screenLeft=0,t._screenRight=0,t._screenTop=0,t._screenBottom=0,t._maxLeft=0,t._maxRight=0,t._maxTop=0,t._maxBottom=0,t._maxScale=0,t._minScale=0,t}return a(t,e),t.prototype.adjustTranslate=function(e,t){this._tr[0]*this._maxLeft+(this._tr[12]+e)>this._screenLeft&&(e=this._screenLeft-this._tr[0]*this._maxLeft-this._tr[12]),this._tr[0]*this._maxRight+(this._tr[12]+e)<this._screenRight&&(e=this._screenRight-this._tr[0]*this._maxRight-this._tr[12]),this._tr[5]*this._maxTop+(this._tr[13]+t)<this._screenTop&&(t=this._screenTop-this._tr[5]*this._maxTop-this._tr[13]),this._tr[5]*this._maxBottom+(this._tr[13]+t)>this._screenBottom&&(t=this._screenBottom-this._tr[5]*this._maxBottom-this._tr[13]);var i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,t,0,1]);u.CubismMatrix44.multiply(i,this._tr,this._tr)},t.prototype.adjustScale=function(e,t,i){var r=this.getMaxScale(),a=this.getMinScale(),o=i*this._tr[0];o<a?this._tr[0]>0&&(i=a/this._tr[0]):o>r&&this._tr[0]>0&&(i=r/this._tr[0]);var n=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,e,t,0,1]),s=new Float32Array([i,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1]),l=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,-e,-t,0,1]);u.CubismMatrix44.multiply(l,this._tr,this._tr),u.CubismMatrix44.multiply(s,this._tr,this._tr),u.CubismMatrix44.multiply(n,this._tr,this._tr)},t.prototype.setScreenRect=function(e,t,i,r){this._screenLeft=e,this._screenRight=t,this._screenBottom=i,this._screenTop=r},t.prototype.setMaxScreenRect=function(e,t,i,r){this._maxLeft=e,this._maxRight=t,this._maxTop=r,this._maxBottom=i},t.prototype.setMaxScale=function(e){this._maxScale=e},t.prototype.setMinScale=function(e){this._minScale=e},t.prototype.getMaxScale=function(){return this._maxScale},t.prototype.getMinScale=function(){return this._minScale},t.prototype.isMaxScale=function(){return this.getScaleX()>=this._maxScale},t.prototype.isMinScale=function(){return this.getScaleX()<=this._minScale},t.prototype.getScreenLeft=function(){return this._screenLeft},t.prototype.getScreenRight=function(){return this._screenRight},t.prototype.getScreenBottom=function(){return this._screenBottom},t.prototype.getScreenTop=function(){return this._screenTop},t.prototype.getMaxLeft=function(){return this._maxLeft},t.prototype.getMaxRight=function(){return this._maxRight},t.prototype.getMaxBottom=function(){return this._maxBottom},t.prototype.getMaxTop=function(){return this._maxTop},t}(u.CubismMatrix44);t.CubismViewMatrix=l;var c=s(i(3391));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismViewMatrix=c.CubismViewMatrix},485:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMoc=void 0;var n=i(8945),s=i(1675),u=function(){function e(e){this._moc=e,this._modelCount=0,this._mocVersion=0}return e.create=function(t){var i=null,r=Live2DCubismCore.Moc.fromArrayBuffer(t);return r&&((i=new e(r))._mocVersion=Live2DCubismCore.Version.csmGetMocVersion(r,t)),i},e.delete=function(e){e._moc._release(),e._moc=null,e=null},e.prototype.createModel=function(){var e=null,t=Live2DCubismCore.Model.fromMoc(this._moc);return t&&((e=new s.CubismModel(t)).initialize(),++this._modelCount),e},e.prototype.deleteModel=function(e){null!=e&&(e.release(),e=null,--this._modelCount)},e.prototype.release=function(){(0,n.CSM_ASSERT)(0==this._modelCount),this._moc._release(),this._moc=null},e.prototype.getLatestMocVersion=function(){return Live2DCubismCore.Version.csmGetLatestMocVersion()},e.prototype.getMocVersion=function(){return this._mocVersion},e.hasMocConsistency=function(e){return 1===Live2DCubismCore.Moc.prototype.hasMocConsistency(e)},e}();t.CubismMoc=u;var l=o(i(485));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMoc=l.CubismMoc},1675:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModel=t.DrawableCullingData=t.DrawableColorData=void 0;var n=i(1076),s=i(5505),u=i(4313),l=i(5001),c=i(8945),h=function(){this.isOverwritten=!1,this.Color=new s.CubismTextureColor};t.DrawableColorData=h;var p=function(e,t){void 0===e&&(e=!1),void 0===t&&(t=!1),e=this.isOverwritten,t=this.isCulling};t.DrawableCullingData=p;var d=function(){function e(e){this._model=e,this._parameterValues=null,this._parameterMaximumValues=null,this._parameterMinimumValues=null,this._partOpacities=null,this._savedParameters=new l.csmVector,this._parameterIds=new l.csmVector,this._drawableIds=new l.csmVector,this._partIds=new l.csmVector,this._isOverwrittenModelMultiplyColors=!1,this._isOverwrittenModelScreenColors=!1,this._isOverwrittenCullings=!1,this._userMultiplyColors=null,this._userScreenColors=null,this._notExistPartId=new u.csmMap,this._notExistParameterId=new u.csmMap,this._notExistParameterValues=new u.csmMap,this._notExistPartOpacities=new u.csmMap}return e.prototype.update=function(){this._model.update(),this._model.drawables.resetDynamicFlags()},e.prototype.getPixelsPerUnit=function(){return null==this._model?0:this._model.canvasinfo.PixelsPerUnit},e.prototype.getCanvasWidth=function(){return null==this._model?0:this._model.canvasinfo.CanvasWidth/this._model.canvasinfo.PixelsPerUnit},e.prototype.getCanvasHeight=function(){return null==this._model?0:this._model.canvasinfo.CanvasHeight/this._model.canvasinfo.PixelsPerUnit},e.prototype.saveParameters=function(){for(var e=this._model.parameters.count,t=this._savedParameters.getSize(),i=0;i<e;++i)i<t?this._savedParameters.set(i,this._parameterValues[i]):this._savedParameters.pushBack(this._parameterValues[i])},e.prototype.getMultiplyColor=function(e){return this.getOverwriteFlagForModelMultiplyColors()||this.getOverwriteFlagForDrawableMultiplyColors(e)?this._userMultiplyColors.at(e).Color:this.getDrawableMultiplyColor(e)},e.prototype.getScreenColor=function(e){return this.getOverwriteFlagForModelScreenColors()||this.getOverwriteFlagForDrawableScreenColors(e)?this._userScreenColors.at(e).Color:this.getDrawableScreenColor(e)},e.prototype.setMultiplyColorByTextureColor=function(e,t){this.setMultiplyColorByRGBA(e,t.R,t.G,t.B,t.A)},e.prototype.setMultiplyColorByRGBA=function(e,t,i,r,a){void 0===a&&(a=1),this._userMultiplyColors.at(e).Color.R=t,this._userMultiplyColors.at(e).Color.G=i,this._userMultiplyColors.at(e).Color.B=r,this._userMultiplyColors.at(e).Color.A=a},e.prototype.setScreenColorByTextureColor=function(e,t){this.setScreenColorByRGBA(e,t.R,t.G,t.B,t.A)},e.prototype.setScreenColorByRGBA=function(e,t,i,r,a){void 0===a&&(a=1),this._userScreenColors.at(e).Color.R=t,this._userScreenColors.at(e).Color.G=i,this._userScreenColors.at(e).Color.B=r,this._userScreenColors.at(e).Color.A=a},e.prototype.getOverwriteFlagForModelMultiplyColors=function(){return this._isOverwrittenModelMultiplyColors},e.prototype.getOverwriteFlagForModelScreenColors=function(){return this._isOverwrittenModelScreenColors},e.prototype.setOverwriteFlagForModelMultiplyColors=function(e){this._isOverwrittenModelMultiplyColors=e},e.prototype.setOverwriteFlagForModelScreenColors=function(e){this._isOverwrittenModelScreenColors=e},e.prototype.getOverwriteFlagForDrawableMultiplyColors=function(e){return this._userMultiplyColors.at(e).isOverwritten},e.prototype.getOverwriteFlagForDrawableScreenColors=function(e){return this._userMultiplyColors.at(e).isOverwritten},e.prototype.setOverwriteFlagForDrawableMultiplyColors=function(e,t){this._userMultiplyColors.at(e).isOverwritten=t},e.prototype.setOverwriteFlagForDrawableScreenColors=function(e,t){this._userScreenColors.at(e).isOverwritten=t},e.prototype.getDrawableCulling=function(e){if(this.getOverwriteFlagForModelCullings()||this.getOverwriteFlagForDrawableCullings(e))return this._userCullings.at(e).isCulling;var t=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(t[e])},e.prototype.setDrawableCulling=function(e,t){this._userCullings.at(e).isCulling=t},e.prototype.getOverwriteFlagForModelCullings=function(){return this._isOverwrittenCullings},e.prototype.setOverwriteFlagForModelCullings=function(e){this._isOverwrittenCullings=e},e.prototype.getOverwriteFlagForDrawableCullings=function(e){return this._userCullings.at(e).isOverwritten},e.prototype.setOverwriteFlagForDrawableCullings=function(e,t){this._userCullings.at(e).isOverwritten=t},e.prototype.getModel=function(){return this._model},e.prototype.getPartIndex=function(e){var t,i=this._model.parts.count;for(t=0;t<i;++t)if(e==this._partIds.at(t))return t;return this._notExistPartId.isExist(e)?this._notExistPartId.getValue(e):(t=i+this._notExistPartId.getSize(),this._notExistPartId.setValue(e,t),this._notExistPartOpacities.appendKey(t),t)},e.prototype.getPartCount=function(){return this._model.parts.count},e.prototype.setPartOpacityByIndex=function(e,t){this._notExistPartOpacities.isExist(e)?this._notExistPartOpacities.setValue(e,t):((0,c.CSM_ASSERT)(0<=e&&e<this.getPartCount()),this._partOpacities[e]=t)},e.prototype.setPartOpacityById=function(e,t){var i=this.getPartIndex(e);i<0||this.setPartOpacityByIndex(i,t)},e.prototype.getPartOpacityByIndex=function(e){return this._notExistPartOpacities.isExist(e)?this._notExistPartOpacities.getValue(e):((0,c.CSM_ASSERT)(0<=e&&e<this.getPartCount()),this._partOpacities[e])},e.prototype.getPartOpacityById=function(e){var t=this.getPartIndex(e);return t<0?0:this.getPartOpacityByIndex(t)},e.prototype.getParameterIndex=function(e){var t,i=this._model.parameters.count;for(t=0;t<i;++t)if(e==this._parameterIds.at(t))return t;return this._notExistParameterId.isExist(e)?this._notExistParameterId.getValue(e):(t=this._model.parameters.count+this._notExistParameterId.getSize(),this._notExistParameterId.setValue(e,t),this._notExistParameterValues.appendKey(t),t)},e.prototype.getParameterCount=function(){return this._model.parameters.count},e.prototype.getParameterType=function(e){return this._model.parameters.types[e]},e.prototype.getParameterMaximumValue=function(e){return this._model.parameters.maximumValues[e]},e.prototype.getParameterMinimumValue=function(e){return this._model.parameters.minimumValues[e]},e.prototype.getParameterDefaultValue=function(e){return this._model.parameters.defaultValues[e]},e.prototype.getParameterValueByIndex=function(e){return this._notExistParameterValues.isExist(e)?this._notExistParameterValues.getValue(e):((0,c.CSM_ASSERT)(0<=e&&e<this.getParameterCount()),this._parameterValues[e])},e.prototype.getParameterValueById=function(e){var t=this.getParameterIndex(e);return this.getParameterValueByIndex(t)},e.prototype.setParameterValueByIndex=function(e,t,i){void 0===i&&(i=1),this._notExistParameterValues.isExist(e)?this._notExistParameterValues.setValue(e,1==i?t:this._notExistParameterValues.getValue(e)*(1-i)+t*i):((0,c.CSM_ASSERT)(0<=e&&e<this.getParameterCount()),this._model.parameters.maximumValues[e]<t&&(t=this._model.parameters.maximumValues[e]),this._model.parameters.minimumValues[e]>t&&(t=this._model.parameters.minimumValues[e]),this._parameterValues[e]=1==i?t:this._parameterValues[e]=this._parameterValues[e]*(1-i)+t*i)},e.prototype.setParameterValueById=function(e,t,i){void 0===i&&(i=1);var r=this.getParameterIndex(e);this.setParameterValueByIndex(r,t,i)},e.prototype.addParameterValueByIndex=function(e,t,i){void 0===i&&(i=1),this.setParameterValueByIndex(e,this.getParameterValueByIndex(e)+t*i)},e.prototype.addParameterValueById=function(e,t,i){void 0===i&&(i=1);var r=this.getParameterIndex(e);this.addParameterValueByIndex(r,t,i)},e.prototype.multiplyParameterValueById=function(e,t,i){void 0===i&&(i=1);var r=this.getParameterIndex(e);this.multiplyParameterValueByIndex(r,t,i)},e.prototype.multiplyParameterValueByIndex=function(e,t,i){void 0===i&&(i=1),this.setParameterValueByIndex(e,this.getParameterValueByIndex(e)*(1+(t-1)*i))},e.prototype.getDrawableIndex=function(e){for(var t=this._model.drawables.count,i=0;i<t;++i)if(this._drawableIds.at(i)==e)return i;return-1},e.prototype.getDrawableCount=function(){return this._model.drawables.count},e.prototype.getDrawableId=function(e){var t=this._model.drawables.ids;return n.CubismFramework.getIdManager().getId(t[e])},e.prototype.getDrawableRenderOrders=function(){return this._model.drawables.renderOrders},e.prototype.getDrawableTextureIndices=function(e){return this.getDrawableTextureIndex(e)},e.prototype.getDrawableTextureIndex=function(e){return this._model.drawables.textureIndices[e]},e.prototype.getDrawableDynamicFlagVertexPositionsDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(t[e])},e.prototype.getDrawableVertexIndexCount=function(e){return this._model.drawables.indexCounts[e]},e.prototype.getDrawableVertexCount=function(e){return this._model.drawables.vertexCounts[e]},e.prototype.getDrawableVertices=function(e){return this.getDrawableVertexPositions(e)},e.prototype.getDrawableVertexIndices=function(e){return this._model.drawables.indices[e]},e.prototype.getDrawableVertexPositions=function(e){return this._model.drawables.vertexPositions[e]},e.prototype.getDrawableVertexUvs=function(e){return this._model.drawables.vertexUvs[e]},e.prototype.getDrawableOpacity=function(e){return this._model.drawables.opacities[e]},e.prototype.getDrawableMultiplyColor=function(e){var t=this._model.drawables.multiplyColors,i=4*e,r=new s.CubismTextureColor;return r.R=t[i],r.G=t[i+1],r.B=t[i+2],r.A=t[i+3],r},e.prototype.getDrawableScreenColor=function(e){var t=this._model.drawables.screenColors,i=4*e,r=new s.CubismTextureColor;return r.R=t[i],r.G=t[i+1],r.B=t[i+2],r.A=t[i+3],r},e.prototype.getDrawableParentPartIndex=function(e){return this._model.drawables.parentPartIndices[e]},e.prototype.getDrawableBlendMode=function(e){var t=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(t[e])?s.CubismBlendMode.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(t[e])?s.CubismBlendMode.CubismBlendMode_Multiplicative:s.CubismBlendMode.CubismBlendMode_Normal},e.prototype.getDrawableInvertedMaskBit=function(e){var t=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(t[e])},e.prototype.getDrawableMasks=function(){return this._model.drawables.masks},e.prototype.getDrawableMaskCounts=function(){return this._model.drawables.maskCounts},e.prototype.isUsingMasking=function(){for(var e=0;e<this._model.drawables.count;++e)if(!(this._model.drawables.maskCounts[e]<=0))return!0;return!1},e.prototype.getDrawableDynamicFlagIsVisible=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(t[e])},e.prototype.getDrawableDynamicFlagVisibilityDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(t[e])},e.prototype.getDrawableDynamicFlagOpacityDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasOpacityDidChangeBit(t[e])},e.prototype.getDrawableDynamicFlagRenderOrderDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(t[e])},e.prototype.getDrawableDynamicFlagBlendColorDidChange=function(e){var t=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(t[e])},e.prototype.loadParameters=function(){var e=this._model.parameters.count,t=this._savedParameters.getSize();e>t&&(e=t);for(var i=0;i<e;++i)this._parameterValues[i]=this._savedParameters.at(i)},e.prototype.initialize=function(){(0,c.CSM_ASSERT)(this._model),this._parameterValues=this._model.parameters.values,this._partOpacities=this._model.parts.opacities,this._parameterMaximumValues=this._model.parameters.maximumValues,this._parameterMinimumValues=this._model.parameters.minimumValues;var e=this._model.parameters.ids,t=this._model.parameters.count;this._parameterIds.prepareCapacity(t);for(var i=0;i<t;++i)this._parameterIds.pushBack(n.CubismFramework.getIdManager().getId(e[i]));var r=this._model.parts.ids,a=this._model.parts.count;for(this._partIds.prepareCapacity(a),i=0;i<a;++i)this._partIds.pushBack(n.CubismFramework.getIdManager().getId(r[i]));var o=this._model.drawables.ids,s=this._model.drawables.count;this._userMultiplyColors=new l.csmVector,this._userMultiplyColors.updateSize(s,h,!0),this._userScreenColors=new l.csmVector,this._userScreenColors.updateSize(s,h,!0),this._userCullings=new l.csmVector,this._userCullings.updateSize(s,p,!0);var u=new p(!1,!1);for(this._drawableIds.prepareCapacity(s),i=0;i<s;++i)this._drawableIds.pushBack(n.CubismFramework.getIdManager().getId(o[i])),this.setMultiplyColorByRGBA(i,1,1,1,1),this.setScreenColorByRGBA(i,0,0,0,1),this._userCullings.pushBack(u)},e.prototype.release=function(){this._model.release(),this._model=null},e}();t.CubismModel=d;var g=o(i(1675));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModel=g.CubismModel},2492:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelUserData=t.CubismModelUserDataNode=void 0;var n=i(1076),s=i(180),u=i(5001),l=i(9518),c=function(){};t.CubismModelUserDataNode=c;var h=function(){function e(){this._userDataNodes=new u.csmVector,this._artMeshUserDataNode=new u.csmVector}return e.create=function(t,i){var r=new e;return r.parseUserData(t,i),r},e.delete=function(e){null!=e&&(e.release(),e=null)},e.prototype.getArtMeshUserDatas=function(){return this._artMeshUserDataNode},e.prototype.parseUserData=function(e,t){for(var i=new l.CubismModelUserDataJson(e,t),r=n.CubismFramework.getIdManager().getId("ArtMesh"),a=i.getUserDataCount(),o=0;o<a;o++){var u=new c;u.targetId=i.getUserDataId(o),u.targetType=n.CubismFramework.getIdManager().getId(i.getUserDataTargetType(o)),u.value=new s.csmString(i.getUserDataValue(o)),this._userDataNodes.pushBack(u),u.targetType==r&&this._artMeshUserDataNode.pushBack(u)}i.release(),i=void 0},e.prototype.release=function(){for(var e=0;e<this._userDataNodes.getSize();++e)this._userDataNodes.set(e,null);this._userDataNodes=null},e}();t.CubismModelUserData=h;var p,d=o(i(2492));(p=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelUserData=d.CubismModelUserData,p.CubismModelUserDataNode=d.CubismModelUserDataNode},9518:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismModelUserDataJson=void 0;var n=i(1076),s=i(7695),u="Meta",l="UserData",c=function(){function e(e,t){this._json=s.CubismJson.create(e,t)}return e.prototype.release=function(){s.CubismJson.delete(this._json)},e.prototype.getUserDataCount=function(){return this._json.getRoot().getValueByString(u).getValueByString("UserDataCount").toInt()},e.prototype.getTotalUserDataSize=function(){return this._json.getRoot().getValueByString(u).getValueByString("TotalUserDataSize").toInt()},e.prototype.getUserDataTargetType=function(e){return this._json.getRoot().getValueByString(l).getValueByIndex(e).getValueByString("Target").getRawString()},e.prototype.getUserDataId=function(e){return n.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(l).getValueByIndex(e).getValueByString("Id").getRawString())},e.prototype.getUserDataValue=function(e){return this._json.getRoot().getValueByString(l).getValueByIndex(e).getValueByString("Value").getRawString()},e}();t.CubismModelUserDataJson=c;var h=o(i(9518));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismModelUserDataJson=h.CubismModelUserDataJson},4693:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismUserModel=void 0;var n=i(6332),s=i(4605),u=i(4311),l=i(1076),c=i(4539),h=i(8186),p=i(1350),d=i(4192),g=i(649),_=i(4186),m=i(7607),f=i(8945),y=i(485),v=i(2492),b=function(){function e(){this.loadMotion=function(e,t,i,r){return d.CubismMotion.create(e,t,r)},this._moc=null,this._model=null,this._motionManager=null,this._expressionManager=null,this._eyeBlink=null,this._breath=null,this._modelMatrix=null,this._pose=null,this._dragManager=null,this._physics=null,this._modelUserData=null,this._initialized=!1,this._updating=!1,this._opacity=1,this._lipsync=!0,this._lastLipSyncValue=0,this._dragX=0,this._dragY=0,this._accelerationX=0,this._accelerationY=0,this._accelerationZ=0,this._debugMode=!1,this._renderer=null,this._motionManager=new g.CubismMotionManager,this._motionManager.setEventCallback(e.cubismDefaultMotionEventCallback,this),this._expressionManager=new g.CubismMotionManager,this._dragManager=new h.CubismTargetPoint}return e.prototype.isInitialized=function(){return this._initialized},e.prototype.setInitialized=function(e){this._initialized=e},e.prototype.isUpdating=function(){return this._updating},e.prototype.setUpdating=function(e){this._updating=e},e.prototype.setDragging=function(e,t){this._dragManager.set(e,t)},e.prototype.setAcceleration=function(e,t,i){this._accelerationX=e,this._accelerationY=t,this._accelerationZ=i},e.prototype.getModelMatrix=function(){return this._modelMatrix},e.prototype.setOpacity=function(e){this._opacity=e},e.prototype.getOpacity=function(){return this._opacity},e.prototype.loadModel=function(e){this._moc=y.CubismMoc.create(e),null!=this._moc?(this._model=this._moc.createModel(),null!=this._model?(this._model.saveParameters(),this._modelMatrix=new c.CubismModelMatrix(this._model.getCanvasWidth(),this._model.getCanvasHeight())):(0,f.CubismLogError)("Failed to CreateModel().")):(0,f.CubismLogError)("Failed to CubismMoc.create().")},e.prototype.loadExpression=function(e,t,i){return p.CubismExpressionMotion.create(e,t)},e.prototype.loadPose=function(e,t){this._pose=u.CubismPose.create(e,t)},e.prototype.loadUserData=function(e,t){this._modelUserData=v.CubismModelUserData.create(e,t)},e.prototype.loadPhysics=function(e,t){this._physics=_.CubismPhysics.create(e,t)},e.prototype.isHit=function(e,t,i){var r=this._model.getDrawableIndex(e);if(r<0)return!1;for(var a=this._model.getDrawableVertexCount(r),o=this._model.getDrawableVertices(r),n=o[0],s=o[0],u=o[1],c=o[1],h=1;h<a;++h){var p=o[l.Constant.vertexOffset+h*l.Constant.vertexStep],d=o[l.Constant.vertexOffset+h*l.Constant.vertexStep+1];p<n&&(n=p),p>s&&(s=p),d<u&&(u=d),d>c&&(c=d)}var g=this._modelMatrix.invertTransformX(t),_=this._modelMatrix.invertTransformY(i);return n<=g&&g<=s&&u<=_&&_<=c},e.prototype.getModel=function(){return this._model},e.prototype.getRenderer=function(){return this._renderer},e.prototype.createRenderer=function(e){void 0===e&&(e=1),this._renderer&&this.deleteRenderer(),this._renderer=new m.CubismRenderer_WebGL,this._renderer.initialize(this._model,e)},e.prototype.deleteRenderer=function(){null!=this._renderer&&(this._renderer.release(),this._renderer=null)},e.prototype.motionEventFired=function(e){(0,f.CubismLogInfo)("{0}",e.s)},e.cubismDefaultMotionEventCallback=function(e,t,i){null!=i&&i.motionEventFired(t)},e.prototype.release=function(){null!=this._motionManager&&(this._motionManager.release(),this._motionManager=null),null!=this._expressionManager&&(this._expressionManager.release(),this._expressionManager=null),null!=this._moc&&(this._moc.deleteModel(this._model),this._moc.release(),this._moc=null),this._modelMatrix=null,u.CubismPose.delete(this._pose),s.CubismEyeBlink.delete(this._eyeBlink),n.CubismBreath.delete(this._breath),this._dragManager=null,_.CubismPhysics.delete(this._physics),v.CubismModelUserData.delete(this._modelUserData),this.deleteRenderer()},e}();t.CubismUserModel=b;var M=o(i(4693));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismUserModel=M.CubismUserModel},193:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.ACubismMotion=void 0;var n=i(4165),s=i(5001),u=i(8945),l=function(){function e(){var e=this;this.setFinishedMotionHandler=function(t){return e._onFinishedMotion=t},this.getFinishedMotionHandler=function(){return e._onFinishedMotion},this._fadeInSeconds=-1,this._fadeOutSeconds=-1,this._weight=1,this._offsetSeconds=0,this._firedEventValues=new s.csmVector}return e.delete=function(e){e.release(),e=null},e.prototype.release=function(){this._weight=0},e.prototype.updateParameters=function(e,t,i){if(t.isAvailable()&&!t.isFinished()){if(!t.isStarted()){t.setIsStarted(!0),t.setStartTime(i-this._offsetSeconds),t.setFadeInStartTime(i);var r=this.getDuration();t.getEndTime()<0&&t.setEndTime(r<=0?-1:t.getStartTime()+r)}var a=this._weight;a=a*(0==this._fadeInSeconds?1:n.CubismMath.getEasingSine((i-t.getFadeInStartTime())/this._fadeInSeconds))*(0==this._fadeOutSeconds||t.getEndTime()<0?1:n.CubismMath.getEasingSine((t.getEndTime()-i)/this._fadeOutSeconds)),t.setState(i,a),(0,u.CSM_ASSERT)(0<=a&&a<=1),this.doUpdateParameters(e,i,a,t),t.getEndTime()>0&&t.getEndTime()<i&&t.setIsFinished(!0)}},e.prototype.setFadeInTime=function(e){this._fadeInSeconds=e},e.prototype.setFadeOutTime=function(e){this._fadeOutSeconds=e},e.prototype.getFadeOutTime=function(){return this._fadeOutSeconds},e.prototype.getFadeInTime=function(){return this._fadeInSeconds},e.prototype.setWeight=function(e){this._weight=e},e.prototype.getWeight=function(){return this._weight},e.prototype.getDuration=function(){return-1},e.prototype.getLoopDuration=function(){return-1},e.prototype.setOffsetTime=function(e){this._offsetSeconds=e},e.prototype.getFiredEvent=function(e,t){return this._firedEventValues},e}();t.ACubismMotion=l;var c=o(i(193));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).ACubismMotion=c.ACubismMotion},1350:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.ExpressionParameter=t.ExpressionBlendType=t.CubismExpressionMotion=void 0;var u,l=i(1076),c=i(5001),h=i(7695),p=i(193),d="Parameters",g="Blend",_=function(e){function t(){var t=e.call(this)||this;return t._parameters=new c.csmVector,t}return a(t,e),t.create=function(e,i){var r=new t,a=h.CubismJson.create(e,i),o=a.getRoot();r.setFadeInTime(o.getValueByString("FadeInTime").toFloat(1)),r.setFadeOutTime(o.getValueByString("FadeOutTime").toFloat(1));var n=o.getValueByString(d).getSize();r._parameters.prepareCapacity(n);for(var s=0;s<n;++s){var c,p=o.getValueByString(d).getValueByIndex(s),_=l.CubismFramework.getIdManager().getId(p.getValueByString("Id").getRawString()),f=p.getValueByString("Value").toFloat();c=p.getValueByString(g).isNull()||"Add"==p.getValueByString(g).getString()?u.ExpressionBlendType_Add:"Multiply"==p.getValueByString(g).getString()?u.ExpressionBlendType_Multiply:"Overwrite"==p.getValueByString(g).getString()?u.ExpressionBlendType_Overwrite:u.ExpressionBlendType_Add;var y=new m;y.parameterId=_,y.blendType=c,y.value=f,r._parameters.pushBack(y)}return h.CubismJson.delete(a),r},t.prototype.doUpdateParameters=function(e,t,i,r){for(var a=0;a<this._parameters.getSize();++a){var o=this._parameters.at(a);switch(o.blendType){case u.ExpressionBlendType_Add:e.addParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Multiply:e.multiplyParameterValueById(o.parameterId,o.value,i);break;case u.ExpressionBlendType_Overwrite:e.setParameterValueById(o.parameterId,o.value,i)}}},t}(p.ACubismMotion);t.CubismExpressionMotion=_,function(e){e[e.ExpressionBlendType_Add=0]="ExpressionBlendType_Add",e[e.ExpressionBlendType_Multiply=1]="ExpressionBlendType_Multiply",e[e.ExpressionBlendType_Overwrite=2]="ExpressionBlendType_Overwrite"}(u=t.ExpressionBlendType||(t.ExpressionBlendType={}));var m=function(){};t.ExpressionParameter=m;var f,y=s(i(1350));(f=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismExpressionMotion=y.CubismExpressionMotion,f.ExpressionBlendType=y.ExpressionBlendType,f.ExpressionParameter=y.ExpressionParameter},4192:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotion=void 0;var u=i(1076),l=i(4165),c=i(180),h=i(8945),p=i(193),d=i(8655),g=i(714);function _(e,t,i){var r=new d.CubismMotionPoint;return r.time=e.time+(t.time-e.time)*i,r.value=e.value+(t.value-e.value)*i,r}function m(e,t){var i=(t-e[0].time)/(e[1].time-e[0].time);return i<0&&(i=0),e[0].value+(e[1].value-e[0].value)*i}function f(e,t){var i=(t-e[0].time)/(e[3].time-e[0].time);i<0&&(i=0);var r=_(e[0],e[1],i),a=_(e[1],e[2],i),o=_(e[2],e[3],i),n=_(r,a,i),s=_(a,o,i);return _(n,s,i).value}function y(e,t){var i=t,r=e[0].time,a=e[3].time,o=e[1].time,n=e[2].time,s=a-3*n+3*o-r,u=3*n-6*o+3*r,c=3*o-3*r,h=r-i,p=l.CubismMath.cardanoAlgorithmForBezier(s,u,c,h),d=_(e[0],e[1],p),g=_(e[1],e[2],p),m=_(e[2],e[3],p),f=_(d,g,p),y=_(g,m,p);return _(f,y,p).value}function v(e,t){return e[0].value}function b(e,t){return e[1].value}function M(e,t,i){for(var r=e.curves.at(t),a=-1,o=r.baseSegmentIndex+r.segmentCount,n=0,s=r.baseSegmentIndex;s<o;++s)if(n=e.segments.at(s).basePointIndex+(e.segments.at(s).segmentType==d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier?3:1),e.points.at(n).time>i){a=s;break}if(-1==a)return e.points.at(n).value;var u=e.segments.at(a);return u.evaluate(e.points.get(u.basePointIndex),i)}var C=function(e){function t(){var t=e.call(this)||this;return t._sourceFrameRate=30,t._loopDurationSeconds=-1,t._isLoop=!1,t._isLoopFadeIn=!0,t._lastWeight=0,t._motionData=null,t._modelCurveIdEyeBlink=null,t._modelCurveIdLipSync=null,t._eyeBlinkParameterIds=null,t._lipSyncParameterIds=null,t}return a(t,e),t.create=function(e,i,r){var a=new t;return a.parse(e,i),a._sourceFrameRate=a._motionData.fps,a._loopDurationSeconds=a._motionData.duration,a._onFinishedMotion=r,a},t.prototype.doUpdateParameters=function(e,t,i,r){null==this._modelCurveIdEyeBlink&&(this._modelCurveIdEyeBlink=u.CubismFramework.getIdManager().getId("EyeBlink")),null==this._modelCurveIdLipSync&&(this._modelCurveIdLipSync=u.CubismFramework.getIdManager().getId("LipSync"));var a=t-r.getStartTime();a<0&&(a=0);var o=Number.MAX_VALUE,n=Number.MAX_VALUE,s=64,c=0,p=0;this._eyeBlinkParameterIds.getSize()>s&&(0,h.CubismLogDebug)("too many eye blink targets : {0}",this._eyeBlinkParameterIds.getSize()),this._lipSyncParameterIds.getSize()>s&&(0,h.CubismLogDebug)("too many lip sync targets : {0}",this._lipSyncParameterIds.getSize());var g,_,m,f=this._fadeInSeconds<=0?1:l.CubismMath.getEasingSine((t-r.getFadeInStartTime())/this._fadeInSeconds),y=this._fadeOutSeconds<=0||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-t)/this._fadeOutSeconds),v=a;if(this._isLoop)for(;v>this._motionData.duration;)v-=this._motionData.duration;var b=this._motionData.curves;for(_=0;_<this._motionData.curveCount&&b.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model;++_)g=M(this._motionData,_,v),b.at(_).id==this._modelCurveIdEyeBlink?n=g:b.at(_).id==this._modelCurveIdLipSync&&(o=g);for(;_<this._motionData.curveCount&&b.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;++_)if(-1!=(m=e.getParameterIndex(b.at(_).id))){var C=e.getParameterValueByIndex(m);if(g=M(this._motionData,_,v),n!=Number.MAX_VALUE)for(var S=0;S<this._eyeBlinkParameterIds.getSize()&&S<s;++S)if(this._eyeBlinkParameterIds.at(S)==b.at(_).id){g*=n,p|=1<<S;break}if(o!=Number.MAX_VALUE)for(S=0;S<this._lipSyncParameterIds.getSize()&&S<s;++S)if(this._lipSyncParameterIds.at(S)==b.at(_).id){g+=o,c|=1<<S;break}var P=void 0;if(b.at(_).fadeInTime<0&&b.at(_).fadeOutTime<0)P=C+(g-C)*i;else{var I,x;I=b.at(_).fadeInTime<0?f:0==b.at(_).fadeInTime?1:l.CubismMath.getEasingSine((t-r.getFadeInStartTime())/b.at(_).fadeInTime),x=b.at(_).fadeOutTime<0?y:0==b.at(_).fadeOutTime||r.getEndTime()<0?1:l.CubismMath.getEasingSine((r.getEndTime()-t)/b.at(_).fadeOutTime),P=C+(g-C)*(this._weight*I*x)}e.setParameterValueByIndex(m,P,1)}if(n!=Number.MAX_VALUE)for(S=0;S<this._eyeBlinkParameterIds.getSize()&&S<s;++S)C=e.getParameterValueById(this._eyeBlinkParameterIds.at(S)),p>>S&1||(P=C+(n-C)*i,e.setParameterValueById(this._eyeBlinkParameterIds.at(S),P));if(o!=Number.MAX_VALUE)for(S=0;S<this._lipSyncParameterIds.getSize()&&S<s;++S)C=e.getParameterValueById(this._lipSyncParameterIds.at(S)),c>>S&1||(P=C+(o-C)*i,e.setParameterValueById(this._lipSyncParameterIds.at(S),P));for(;_<this._motionData.curveCount&&b.at(_).type==d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;++_)-1!=(m=e.getParameterIndex(b.at(_).id))&&(g=M(this._motionData,_,v),e.setParameterValueByIndex(m,g));a>=this._motionData.duration&&(this._isLoop?(r.setStartTime(t),this._isLoopFadeIn&&r.setFadeInStartTime(t)):(this._onFinishedMotion&&this._onFinishedMotion(this),r.setIsFinished(!0))),this._lastWeight=i},t.prototype.setIsLoop=function(e){this._isLoop=e},t.prototype.isLoop=function(){return this._isLoop},t.prototype.setIsLoopFadeIn=function(e){this._isLoopFadeIn=e},t.prototype.isLoopFadeIn=function(){return this._isLoopFadeIn},t.prototype.getDuration=function(){return this._isLoop?-1:this._loopDurationSeconds},t.prototype.getLoopDuration=function(){return this._loopDurationSeconds},t.prototype.setParameterFadeInTime=function(e,t){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(e==i.at(r).id)return void(i.at(r).fadeInTime=t)},t.prototype.setParameterFadeOutTime=function(e,t){for(var i=this._motionData.curves,r=0;r<this._motionData.curveCount;++r)if(e==i.at(r).id)return void(i.at(r).fadeOutTime=t)},t.prototype.getParameterFadeInTime=function(e){for(var t=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(e==t.at(i).id)return t.at(i).fadeInTime;return-1},t.prototype.getParameterFadeOutTime=function(e){for(var t=this._motionData.curves,i=0;i<this._motionData.curveCount;++i)if(e==t.at(i).id)return t.at(i).fadeOutTime;return-1},t.prototype.setEffectIds=function(e,t){this._eyeBlinkParameterIds=e,this._lipSyncParameterIds=t},t.prototype.release=function(){this._motionData=void 0,this._motionData=null},t.prototype.parse=function(e,t){this._motionData=new d.CubismMotionData;var i=new g.CubismMotionJson(e,t);this._motionData.duration=i.getMotionDuration(),this._motionData.loop=i.isMotionLoop(),this._motionData.curveCount=i.getMotionCurveCount(),this._motionData.fps=i.getMotionFps(),this._motionData.eventCount=i.getEventCount();var r=i.getEvaluationOptionFlag(g.EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);i.isExistMotionFadeInTime()?this._fadeInSeconds=i.getMotionFadeInTime()<0?1:i.getMotionFadeInTime():this._fadeInSeconds=1,i.isExistMotionFadeOutTime()?this._fadeOutSeconds=i.getMotionFadeOutTime()<0?1:i.getMotionFadeOutTime():this._fadeOutSeconds=1,this._motionData.curves.updateSize(this._motionData.curveCount,d.CubismMotionCurve,!0),this._motionData.segments.updateSize(i.getMotionTotalSegmentCount(),d.CubismMotionSegment,!0),this._motionData.points.updateSize(i.getMotionTotalPointCount(),d.CubismMotionPoint,!0),this._motionData.events.updateSize(this._motionData.eventCount,d.CubismMotionEvent,!0);for(var a=0,o=0,n=0;n<this._motionData.curveCount;++n){"Model"==i.getMotionCurveTarget(n)?this._motionData.curves.at(n).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Model:"Parameter"==i.getMotionCurveTarget(n)?this._motionData.curves.at(n).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter:"PartOpacity"==i.getMotionCurveTarget(n)?this._motionData.curves.at(n).type=d.CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity:(0,h.CubismLogWarning)('Warning : Unable to get segment type from Curve! The number of "CurveCount" may be incorrect!'),this._motionData.curves.at(n).id=i.getMotionCurveId(n),this._motionData.curves.at(n).baseSegmentIndex=o,this._motionData.curves.at(n).fadeInTime=i.isExistMotionCurveFadeInTime(n)?i.getMotionCurveFadeInTime(n):-1,this._motionData.curves.at(n).fadeOutTime=i.isExistMotionCurveFadeOutTime(n)?i.getMotionCurveFadeOutTime(n):-1;for(var s=0;s<i.getMotionCurveSegmentCount(n);){switch(0==s?(this._motionData.segments.at(o).basePointIndex=a,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+1),a+=1,s+=2):this._motionData.segments.at(o).basePointIndex=a-1,i.getMotionCurveSegment(n,s)){case d.CubismMotionSegmentType.CubismMotionSegmentType_Linear:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Linear,this._motionData.segments.at(o).evaluate=m,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),a+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Bezier,this._motionData.segments.at(o).evaluate=r?f:y,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),this._motionData.points.at(a+1).time=i.getMotionCurveSegment(n,s+3),this._motionData.points.at(a+1).value=i.getMotionCurveSegment(n,s+4),this._motionData.points.at(a+2).time=i.getMotionCurveSegment(n,s+5),this._motionData.points.at(a+2).value=i.getMotionCurveSegment(n,s+6),a+=3,s+=7;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_Stepped,this._motionData.segments.at(o).evaluate=v,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),a+=1,s+=3;break;case d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped:this._motionData.segments.at(o).segmentType=d.CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped,this._motionData.segments.at(o).evaluate=b,this._motionData.points.at(a).time=i.getMotionCurveSegment(n,s+1),this._motionData.points.at(a).value=i.getMotionCurveSegment(n,s+2),a+=1,s+=3;break;default:(0,h.CSM_ASSERT)(0)}++this._motionData.curves.at(n).segmentCount,++o}}for(var u=0;u<i.getEventCount();++u)this._motionData.events.at(u).fireTime=i.getEventTime(u),this._motionData.events.at(u).value=i.getEventValue(u);i.release(),i=void 0,i=null},t.prototype.getFiredEvent=function(e,t){this._firedEventValues.updateSize(0);for(var i=0;i<this._motionData.eventCount;++i)this._motionData.events.at(i).fireTime>e&&this._motionData.events.at(i).fireTime<=t&&this._firedEventValues.pushBack(new c.csmString(this._motionData.events.at(i).value.s));return this._firedEventValues},t}(p.ACubismMotion);t.CubismMotion=C;var S=s(i(4192));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotion=S.CubismMotion},8655:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotionData=t.CubismMotionEvent=t.CubismMotionCurve=t.CubismMotionSegment=t.CubismMotionPoint=t.CubismMotionSegmentType=t.CubismMotionCurveTarget=void 0;var n,s,u=i(5001);!function(e){e[e.CubismMotionCurveTarget_Model=0]="CubismMotionCurveTarget_Model",e[e.CubismMotionCurveTarget_Parameter=1]="CubismMotionCurveTarget_Parameter",e[e.CubismMotionCurveTarget_PartOpacity=2]="CubismMotionCurveTarget_PartOpacity"}(n=t.CubismMotionCurveTarget||(t.CubismMotionCurveTarget={})),(s=t.CubismMotionSegmentType||(t.CubismMotionSegmentType={}))[s.CubismMotionSegmentType_Linear=0]="CubismMotionSegmentType_Linear",s[s.CubismMotionSegmentType_Bezier=1]="CubismMotionSegmentType_Bezier",s[s.CubismMotionSegmentType_Stepped=2]="CubismMotionSegmentType_Stepped",s[s.CubismMotionSegmentType_InverseStepped=3]="CubismMotionSegmentType_InverseStepped";t.CubismMotionPoint=function(){this.time=0,this.value=0};t.CubismMotionSegment=function(){this.evaluate=null,this.basePointIndex=0,this.segmentType=0};t.CubismMotionCurve=function(){this.type=n.CubismMotionCurveTarget_Model,this.segmentCount=0,this.baseSegmentIndex=0,this.fadeInTime=0,this.fadeOutTime=0};t.CubismMotionEvent=function(){this.fireTime=0};t.CubismMotionData=function(){this.duration=0,this.loop=!1,this.curveCount=0,this.eventCount=0,this.fps=0,this.curves=new u.csmVector,this.segments=new u.csmVector,this.points=new u.csmVector,this.events=new u.csmVector};var l,c=o(i(8655));(l=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionCurve=c.CubismMotionCurve,l.CubismMotionCurveTarget=c.CubismMotionCurveTarget,l.CubismMotionData=c.CubismMotionData,l.CubismMotionEvent=c.CubismMotionEvent,l.CubismMotionPoint=c.CubismMotionPoint,l.CubismMotionSegment=c.CubismMotionSegment,l.CubismMotionSegmentType=c.CubismMotionSegmentType},714:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.EvaluationOptionFlag=t.CubismMotionJson=void 0;var n,s=i(1076),u=i(180),l=i(7695),c="Meta",h="Curves",p="FadeInTime",d="FadeOutTime",g="Segments",_="UserData",m=function(){function e(e,t){this._json=l.CubismJson.create(e,t)}return e.prototype.release=function(){l.CubismJson.delete(this._json)},e.prototype.getMotionDuration=function(){return this._json.getRoot().getValueByString(c).getValueByString("Duration").toFloat()},e.prototype.isMotionLoop=function(){return this._json.getRoot().getValueByString(c).getValueByString("Loop").toBoolean()},e.prototype.getEvaluationOptionFlag=function(e){return n.EvaluationOptionFlag_AreBeziersRistricted==e&&this._json.getRoot().getValueByString(c).getValueByString("AreBeziersRestricted").toBoolean()},e.prototype.getMotionCurveCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("CurveCount").toInt()},e.prototype.getMotionFps=function(){return this._json.getRoot().getValueByString(c).getValueByString("Fps").toFloat()},e.prototype.getMotionTotalSegmentCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalSegmentCount").toInt()},e.prototype.getMotionTotalPointCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalPointCount").toInt()},e.prototype.isExistMotionFadeInTime=function(){return!this._json.getRoot().getValueByString(c).getValueByString(p).isNull()},e.prototype.isExistMotionFadeOutTime=function(){return!this._json.getRoot().getValueByString(c).getValueByString(d).isNull()},e.prototype.getMotionFadeInTime=function(){return this._json.getRoot().getValueByString(c).getValueByString(p).toFloat()},e.prototype.getMotionFadeOutTime=function(){return this._json.getRoot().getValueByString(c).getValueByString(d).toFloat()},e.prototype.getMotionCurveTarget=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString("Target").getRawString()},e.prototype.getMotionCurveId=function(e){return s.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString("Id").getRawString())},e.prototype.isExistMotionCurveFadeInTime=function(e){return!this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(p).isNull()},e.prototype.isExistMotionCurveFadeOutTime=function(e){return!this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(d).isNull()},e.prototype.getMotionCurveFadeInTime=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(p).toFloat()},e.prototype.getMotionCurveFadeOutTime=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(d).toFloat()},e.prototype.getMotionCurveSegmentCount=function(e){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(g).getVector().getSize()},e.prototype.getMotionCurveSegment=function(e,t){return this._json.getRoot().getValueByString(h).getValueByIndex(e).getValueByString(g).getValueByIndex(t).toFloat()},e.prototype.getEventCount=function(){return this._json.getRoot().getValueByString(c).getValueByString("UserDataCount").toInt()},e.prototype.getTotalEventValueSize=function(){return this._json.getRoot().getValueByString(c).getValueByString("TotalUserDataSize").toInt()},e.prototype.getEventTime=function(e){return this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString("Time").toFloat()},e.prototype.getEventValue=function(e){return new u.csmString(this._json.getRoot().getValueByString(_).getValueByIndex(e).getValueByString("Value").getRawString())},e}();t.CubismMotionJson=m,function(e){e[e.EvaluationOptionFlag_AreBeziersRistricted=0]="EvaluationOptionFlag_AreBeziersRistricted"}(n=t.EvaluationOptionFlag||(t.EvaluationOptionFlag={}));var f=o(i(714));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionJson=f.CubismMotionJson},649:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotionManager=void 0;var u=function(e){function t(){var t=e.call(this)||this;return t._currentPriority=0,t._reservePriority=0,t}return a(t,e),t.prototype.getCurrentPriority=function(){return this._currentPriority},t.prototype.getReservePriority=function(){return this._reservePriority},t.prototype.setReservePriority=function(e){this._reservePriority=e},t.prototype.startMotionPriority=function(t,i,r){return r==this._reservePriority&&(this._reservePriority=0),this._currentPriority=r,e.prototype.startMotion.call(this,t,i,this._userTimeSeconds)},t.prototype.updateMotion=function(t,i){this._userTimeSeconds+=i;var r=e.prototype.doUpdateMotion.call(this,t,this._userTimeSeconds);return this.isFinished()&&(this._currentPriority=0),r},t.prototype.reserveMotion=function(e){return!(e<=this._reservePriority||e<=this._currentPriority||(this._reservePriority=e,0))},t}(i(1267).CubismMotionQueueManager);t.CubismMotionManager=u;var l=s(i(649));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionManager=l.CubismMotionManager},5703:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismMotionQueueEntry=void 0;var n=i(193),s=function(){function e(){this._autoDelete=!1,this._motion=null,this._available=!0,this._finished=!1,this._started=!1,this._startTimeSeconds=-1,this._fadeInStartTimeSeconds=0,this._endTimeSeconds=-1,this._stateTimeSeconds=0,this._stateWeight=0,this._lastEventCheckSeconds=0,this._motionQueueEntryHandle=this,this._fadeOutSeconds=0,this._isTriggeredFadeOut=!1}return e.prototype.release=function(){this._autoDelete&&this._motion&&n.ACubismMotion.delete(this._motion)},e.prototype.setFadeOut=function(e){this._fadeOutSeconds=e,this._isTriggeredFadeOut=!0},e.prototype.startFadeOut=function(e,t){var i=t+e;this._isTriggeredFadeOut=!0,(this._endTimeSeconds<0||i<this._endTimeSeconds)&&(this._endTimeSeconds=i)},e.prototype.isFinished=function(){return this._finished},e.prototype.isStarted=function(){return this._started},e.prototype.getStartTime=function(){return this._startTimeSeconds},e.prototype.getFadeInStartTime=function(){return this._fadeInStartTimeSeconds},e.prototype.getEndTime=function(){return this._endTimeSeconds},e.prototype.setStartTime=function(e){this._startTimeSeconds=e},e.prototype.setFadeInStartTime=function(e){this._fadeInStartTimeSeconds=e},e.prototype.setEndTime=function(e){this._endTimeSeconds=e},e.prototype.setIsFinished=function(e){this._finished=e},e.prototype.setIsStarted=function(e){this._started=e},e.prototype.isAvailable=function(){return this._available},e.prototype.setIsAvailable=function(e){this._available=e},e.prototype.setState=function(e,t){this._stateTimeSeconds=e,this._stateWeight=t},e.prototype.getStateTime=function(){return this._stateTimeSeconds},e.prototype.getStateWeight=function(){return this._stateWeight},e.prototype.getLastCheckEventSeconds=function(){return this._lastEventCheckSeconds},e.prototype.setLastCheckEventSeconds=function(e){this._lastEventCheckSeconds=e},e.prototype.isTriggeredFadeOut=function(){return this._isTriggeredFadeOut},e.prototype.getFadeOutSeconds=function(){return this._fadeOutSeconds},e}();t.CubismMotionQueueEntry=s;var u=o(i(5703));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionQueueEntry=u.CubismMotionQueueEntry},1267:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.InvalidMotionQueueEntryHandleValue=t.CubismMotionQueueManager=void 0;var n=i(5703),s=i(5001),u=function(){function e(){this._userTimeSeconds=0,this._eventCallBack=null,this._eventCustomData=null,this._motions=new s.csmVector}return e.prototype.release=function(){for(var e=0;e<this._motions.getSize();++e)this._motions.at(e)&&(this._motions.at(e).release(),this._motions.set(e,null));this._motions=null},e.prototype.startMotion=function(e,i,r){if(null==e)return t.InvalidMotionQueueEntryHandleValue;for(var a=null,o=0;o<this._motions.getSize();++o)null!=(a=this._motions.at(o))&&a.setFadeOut(a._motion.getFadeOutTime());return(a=new n.CubismMotionQueueEntry)._autoDelete=i,a._motion=e,this._motions.pushBack(a),a._motionQueueEntryHandle},e.prototype.isFinished=function(){for(var e=this._motions.begin();e.notEqual(this._motions.end());){var t=e.ptr();if(null!=t)if(null!=t._motion){if(!t.isFinished())return!1;e.preIncrement()}else t.release(),t=null,e=this._motions.erase(e);else e=this._motions.erase(e)}return!0},e.prototype.isFinishedByHandle=function(e){for(var t=this._motions.begin();t.notEqual(this._motions.end());t.increment()){var i=t.ptr();if(null!=i&&i._motionQueueEntryHandle==e&&!i.isFinished())return!1}return!0},e.prototype.stopAllMotions=function(){for(var e=this._motions.begin();e.notEqual(this._motions.end());){var t=e.ptr();null!=t?(t.release(),t=null,e=this._motions.erase(e)):e=this._motions.erase(e)}},e.prototype.getCubismMotionQueueEntry=function(e){for(var t=this._motions.begin();t.notEqual(this._motions.end());t.preIncrement()){var i=t.ptr();if(null!=i&&i._motionQueueEntryHandle==e)return i}return null},e.prototype.setEventCallback=function(e,t){void 0===t&&(t=null),this._eventCallBack=e,this._eventCustomData=t},e.prototype.doUpdateMotion=function(e,t){for(var i=!1,r=this._motions.begin();r.notEqual(this._motions.end());){var a=r.ptr();if(null!=a){var o=a._motion;if(null!=o){o.updateParameters(e,a,t),i=!0;for(var n=o.getFiredEvent(a.getLastCheckEventSeconds()-a.getStartTime(),t-a.getStartTime()),s=0;s<n.getSize();++s)this._eventCallBack(this,n.at(s),this._eventCustomData);a.setLastCheckEventSeconds(t),a.isFinished()?(a.release(),a=null,r=this._motions.erase(r)):(a.isTriggeredFadeOut()&&a.startFadeOut(a.getFadeOutSeconds(),t),r.preIncrement())}else a.release(),a=null,r=this._motions.erase(r)}else r=this._motions.erase(r)}return i},e}();t.CubismMotionQueueManager=u,t.InvalidMotionQueueEntryHandleValue=-1;var l,c=o(i(1267));(l=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismMotionQueueManager=c.CubismMotionQueueManager,l.InvalidMotionQueueEntryHandleValue=c.InvalidMotionQueueEntryHandleValue},4186:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.PhysicsOutput=t.Options=t.CubismPhysics=void 0;var n=i(4165),s=i(9520),u=i(5001),l=i(2698),c=i(1119),h="Angle",p=function(){function e(){this._physicsRig=null,this._options=new d,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0,this._currentRigOutputs=new u.csmVector,this._previousRigOutputs=new u.csmVector,this._currentRemainTime=0,this._parameterCaches=null,this._parameterInputCaches=null}return e.create=function(t,i){var r=new e;return r.parse(t,i),r._physicsRig.gravity.y=0,r},e.delete=function(e){null!=e&&(e.release(),e=null)},e.prototype.parse=function(e,t){this._physicsRig=new l.CubismPhysicsRig;var i=new c.CubismPhysicsJson(e,t);this._physicsRig.gravity=i.getGravity(),this._physicsRig.wind=i.getWind(),this._physicsRig.subRigCount=i.getSubRigCount(),this._physicsRig.fps=i.getFps(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,l.CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(i.getTotalInputCount(),l.CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(i.getTotalOutputCount(),l.CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(i.getVertexCount(),l.CubismPhysicsParticle,!0),this._currentRigOutputs.clear(),this._previousRigOutputs.clear();for(var r=0,a=0,o=0,n=0;n<this._physicsRig.settings.getSize();++n){this._physicsRig.settings.at(n).normalizationPosition.minimum=i.getNormalizationPositionMinimumValue(n),this._physicsRig.settings.at(n).normalizationPosition.maximum=i.getNormalizationPositionMaximumValue(n),this._physicsRig.settings.at(n).normalizationPosition.defalut=i.getNormalizationPositionDefaultValue(n),this._physicsRig.settings.at(n).normalizationAngle.minimum=i.getNormalizationAngleMinimumValue(n),this._physicsRig.settings.at(n).normalizationAngle.maximum=i.getNormalizationAngleMaximumValue(n),this._physicsRig.settings.at(n).normalizationAngle.defalut=i.getNormalizationAngleDefaultValue(n),this._physicsRig.settings.at(n).inputCount=i.getInputCount(n),this._physicsRig.settings.at(n).baseInputIndex=r;for(var s=0;s<this._physicsRig.settings.at(n).inputCount;++s)this._physicsRig.inputs.at(r+s).sourceParameterIndex=-1,this._physicsRig.inputs.at(r+s).weight=i.getInputWeight(n,s),this._physicsRig.inputs.at(r+s).reflect=i.getInputReflect(n,s),"X"==i.getInputType(n,s)?(this._physicsRig.inputs.at(r+s).type=l.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=_):"Y"==i.getInputType(n,s)?(this._physicsRig.inputs.at(r+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=m):i.getInputType(n,s)==h&&(this._physicsRig.inputs.at(r+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(r+s).getNormalizedParameterValue=f),this._physicsRig.inputs.at(r+s).source.targetType=l.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(r+s).source.id=i.getInputSourceId(n,s);r+=this._physicsRig.settings.at(n).inputCount,this._physicsRig.settings.at(n).outputCount=i.getOutputCount(n),this._physicsRig.settings.at(n).baseOutputIndex=a;var u=new g;u.outputs.resize(this._physicsRig.settings.at(n).outputCount);var p=new g;for(p.outputs.resize(this._physicsRig.settings.at(n).outputCount),s=0;s<this._physicsRig.settings.at(n).outputCount;++s)u.outputs[s]=0,p.outputs[s]=0,this._physicsRig.outputs.at(a+s).destinationParameterIndex=-1,this._physicsRig.outputs.at(a+s).vertexIndex=i.getOutputVertexIndex(n,s),this._physicsRig.outputs.at(a+s).angleScale=i.getOutputAngleScale(n,s),this._physicsRig.outputs.at(a+s).weight=i.getOutputWeight(n,s),this._physicsRig.outputs.at(a+s).destination.targetType=l.CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(a+s).destination.id=i.getOutputDestinationId(n,s),"X"==i.getOutputType(n,s)?(this._physicsRig.outputs.at(a+s).type=l.CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(a+s).getValue=y,this._physicsRig.outputs.at(a+s).getScale=M):"Y"==i.getOutputType(n,s)?(this._physicsRig.outputs.at(a+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(a+s).getValue=v,this._physicsRig.outputs.at(a+s).getScale=C):i.getOutputType(n,s)==h&&(this._physicsRig.outputs.at(a+s).type=l.CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(a+s).getValue=b,this._physicsRig.outputs.at(a+s).getScale=S),this._physicsRig.outputs.at(a+s).reflect=i.getOutputReflect(n,s);for(this._currentRigOutputs.pushBack(u),this._previousRigOutputs.pushBack(p),a+=this._physicsRig.settings.at(n).outputCount,this._physicsRig.settings.at(n).particleCount=i.getParticleCount(n),this._physicsRig.settings.at(n).baseParticleIndex=o,s=0;s<this._physicsRig.settings.at(n).particleCount;++s)this._physicsRig.particles.at(o+s).mobility=i.getParticleMobility(n,s),this._physicsRig.particles.at(o+s).delay=i.getParticleDelay(n,s),this._physicsRig.particles.at(o+s).acceleration=i.getParticleAcceleration(n,s),this._physicsRig.particles.at(o+s).radius=i.getParticleRadius(n,s),this._physicsRig.particles.at(o+s).position=i.getParticlePosition(n,s);o+=this._physicsRig.settings.at(n).particleCount}this.initialize(),i.release(),i=void 0,i=null},e.prototype.stabilization=function(e){var t,i,r,a,o,u,l,c,h,p,d,g,_,m,f,y,v=new s.CubismVector2;_=e.getModel().parameters.values,m=e.getModel().parameters.maximumValues,f=e.getModel().parameters.minimumValues,y=e.getModel().parameters.defaultValues,(null!==(i=null===(t=this._parameterCaches)||void 0===t?void 0:t.length)&&void 0!==i?i:0)<e.getParameterCount()&&(this._parameterCaches=new Float32Array(e.getParameterCount())),(null!==(a=null===(r=this._parameterInputCaches)||void 0===r?void 0:r.length)&&void 0!==a?a:0)<e.getParameterCount()&&(this._parameterInputCaches=new Float32Array(e.getParameterCount()));for(var b=0;b<e.getParameterCount();++b)this._parameterCaches[b]=_[b],this._parameterInputCaches[b]=_[b];for(var M=0;M<this._physicsRig.subRigCount;++M){o={angle:0},v.x=0,v.y=0,h=this._physicsRig.settings.at(M),p=this._physicsRig.inputs.get(h.baseInputIndex),d=this._physicsRig.outputs.get(h.baseOutputIndex),g=this._physicsRig.particles.get(h.baseParticleIndex);for(var C=0;C<h.inputCount;++C)u=p[C].weight/100,-1==p[C].sourceParameterIndex&&(p[C].sourceParameterIndex=e.getParameterIndex(p[C].source.id)),p[C].getNormalizedParameterValue(v,o,_[p[C].sourceParameterIndex],f[p[C].sourceParameterIndex],m[p[C].sourceParameterIndex],y[p[C].sourceParameterIndex],h.normalizationPosition,h.normalizationAngle,p[C].reflect,u),this._parameterCaches[p[C].sourceParameterIndex]=_[p[C].sourceParameterIndex];for(l=n.CubismMath.degreesToRadian(-o.angle),v.x=v.x*n.CubismMath.cos(l)-v.y*n.CubismMath.sin(l),v.y=v.x*n.CubismMath.sin(l)+v.y*n.CubismMath.cos(l),I(g,h.particleCount,v,o.angle,this._options.wind,.001*h.normalizationPosition.maximum),C=0;C<h.outputCount;++C){var S=d[C].vertexIndex;if(-1==d[C].destinationParameterIndex&&(d[C].destinationParameterIndex=e.getParameterIndex(d[C].destination.id)),!(S<1||S>=h.particleCount)){var P=new s.CubismVector2;P=g[S].position.substract(g[S-1].position),c=d[C].getValue(P,g,S,d[C].reflect,this._options.gravity),this._currentRigOutputs.at(M).outputs[C]=c,this._previousRigOutputs.at(M).outputs[C]=c;var w=d[C].destinationParameterIndex,B=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(_.subarray(w))):_.slice(w);x(B,f[w],m[w],c,d[C]);for(var L=w,E=0;L<this._parameterCaches.length;L++,E++)_[L]=this._parameterCaches[L]=B[E]}}}},e.prototype.evaluate=function(e,t){var i,r,a,o,u,l,c,h,p,d,g,_,m=new s.CubismVector2;if(!(0>=t)){var f,y,v,b,M;if(this._currentRemainTime+=t,this._currentRemainTime>5&&(this._currentRemainTime=0),f=e.getModel().parameters.values,y=e.getModel().parameters.maximumValues,v=e.getModel().parameters.minimumValues,b=e.getModel().parameters.defaultValues,(null!==(r=null===(i=this._parameterCaches)||void 0===i?void 0:i.length)&&void 0!==r?r:0)<e.getParameterCount()&&(this._parameterCaches=new Float32Array(e.getParameterCount())),(null!==(o=null===(a=this._parameterInputCaches)||void 0===a?void 0:a.length)&&void 0!==o?o:0)<e.getParameterCount()){this._parameterInputCaches=new Float32Array(e.getParameterCount());for(var C=0;C<e.getParameterCount();++C)this._parameterInputCaches[C]=f[C]}for(M=this._physicsRig.fps>0?1/this._physicsRig.fps:t;this._currentRemainTime>=M;){for(var S=0;S<this._physicsRig.subRigCount;++S){p=this._physicsRig.settings.at(S),g=this._physicsRig.outputs.get(p.baseOutputIndex);for(var I=0;I<p.outputCount;++I)this._previousRigOutputs.at(S).outputs[I]=this._currentRigOutputs.at(S).outputs[I]}var w=M/this._currentRemainTime;for(C=0;C<e.getParameterCount();++C)this._parameterCaches[C]=this._parameterInputCaches[C]*(1-w)+f[C]*w,this._parameterInputCaches[C]=this._parameterCaches[C];for(S=0;S<this._physicsRig.subRigCount;++S){for(u={angle:0},m.x=0,m.y=0,p=this._physicsRig.settings.at(S),d=this._physicsRig.inputs.get(p.baseInputIndex),g=this._physicsRig.outputs.get(p.baseOutputIndex),_=this._physicsRig.particles.get(p.baseParticleIndex),I=0;I<p.inputCount;++I)l=d[I].weight/100,-1==d[I].sourceParameterIndex&&(d[I].sourceParameterIndex=e.getParameterIndex(d[I].source.id)),d[I].getNormalizedParameterValue(m,u,this._parameterCaches[d[I].sourceParameterIndex],v[d[I].sourceParameterIndex],y[d[I].sourceParameterIndex],b[d[I].sourceParameterIndex],p.normalizationPosition,p.normalizationAngle,d[I].reflect,l);for(c=n.CubismMath.degreesToRadian(-u.angle),m.x=m.x*n.CubismMath.cos(c)-m.y*n.CubismMath.sin(c),m.y=m.x*n.CubismMath.sin(c)+m.y*n.CubismMath.cos(c),P(_,p.particleCount,m,u.angle,this._options.wind,.001*p.normalizationPosition.maximum,M,5),I=0;I<p.outputCount;++I){var B=g[I].vertexIndex;if(-1==g[I].destinationParameterIndex&&(g[I].destinationParameterIndex=e.getParameterIndex(g[I].destination.id)),!(B<1||B>=p.particleCount)){var L=new s.CubismVector2;L.x=_[B].position.x-_[B-1].position.x,L.y=_[B].position.y-_[B-1].position.y,h=g[I].getValue(L,_,B,g[I].reflect,this._options.gravity),this._currentRigOutputs.at(S).outputs[I]=h;var E=g[I].destinationParameterIndex,N=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(this._parameterCaches.subarray(E))):this._parameterCaches.slice(E);x(N,v[E],y[E],h,g[I]);for(var T=E,D=0;T<this._parameterCaches.length;T++,D++)this._parameterCaches[T]=N[D]}}}this._currentRemainTime-=M}var V=this._currentRemainTime/M;this.interpolate(e,V)}},e.prototype.interpolate=function(e,t){var i,r,a,o,n;a=e.getModel().parameters.values,o=e.getModel().parameters.maximumValues,n=e.getModel().parameters.minimumValues;for(var s=0;s<this._physicsRig.subRigCount;++s){r=this._physicsRig.settings.at(s),i=this._physicsRig.outputs.get(r.baseOutputIndex);for(var u=0;u<r.outputCount;++u)if(-1!=i[u].destinationParameterIndex){var l=i[u].destinationParameterIndex,c=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(a.subarray(l))):a.slice(l);x(c,n[l],o[l],this._previousRigOutputs.at(s).outputs[u]*(1-t)+this._currentRigOutputs.at(s).outputs[u]*t,i[u]);for(var h=l,p=0;h<a.length;h++,p++)a[h]=c[p]}}},e.prototype.setOptions=function(e){this._options=e},e.prototype.getOption=function(){return this._options},e.prototype.release=function(){this._physicsRig=void 0,this._physicsRig=null},e.prototype.initialize=function(){for(var e,t,i,r=0;r<this._physicsRig.subRigCount;++r){t=this._physicsRig.settings.at(r),(e=this._physicsRig.particles.get(t.baseParticleIndex))[0].initialPosition=new s.CubismVector2(0,0),e[0].lastPosition=new s.CubismVector2(e[0].initialPosition.x,e[0].initialPosition.y),e[0].lastGravity=new s.CubismVector2(0,-1),e[0].lastGravity.y*=-1,e[0].velocity=new s.CubismVector2(0,0),e[0].force=new s.CubismVector2(0,0);for(var a=1;a<t.particleCount;++a)(i=new s.CubismVector2(0,0)).y=e[a].radius,e[a].initialPosition=new s.CubismVector2(e[a-1].initialPosition.x+i.x,e[a-1].initialPosition.y+i.y),e[a].position=new s.CubismVector2(e[a].initialPosition.x,e[a].initialPosition.y),e[a].lastPosition=new s.CubismVector2(e[a].initialPosition.x,e[a].initialPosition.y),e[a].lastGravity=new s.CubismVector2(0,-1),e[a].lastGravity.y*=-1,e[a].velocity=new s.CubismVector2(0,0),e[a].force=new s.CubismVector2(0,0)}},e}();t.CubismPhysics=p;var d=function(){this.gravity=new s.CubismVector2(0,0),this.wind=new s.CubismVector2(0,0)};t.Options=d;var g=function(){this.outputs=new u.csmVector(0)};function _(e,t,i,r,a,o,n,s,u,l){e.x+=w(i,r,a,0,n.minimum,n.maximum,n.defalut,u)*l}function m(e,t,i,r,a,o,n,s,u,l){e.y+=w(i,r,a,0,n.minimum,n.maximum,n.defalut,u)*l}function f(e,t,i,r,a,o,n,s,u,l){t.angle+=w(i,r,a,0,s.minimum,s.maximum,s.defalut,u)*l}function y(e,t,i,r,a){var o=e.x;return r&&(o*=-1),o}function v(e,t,i,r,a){var o=e.y;return r&&(o*=-1),o}function b(e,t,i,r,a){var o;return a=i>=2?t[i-1].position.substract(t[i-2].position):a.multiplyByScaler(-1),o=n.CubismMath.directionToRadian(a,e),r&&(o*=-1),o}function M(e,t){return JSON.parse(JSON.stringify(e.x))}function C(e,t){return JSON.parse(JSON.stringify(e.y))}function S(e,t){return JSON.parse(JSON.stringify(t))}function P(e,t,i,r,a,o,u,l){var c,h,p,d,g=new s.CubismVector2(0,0),_=new s.CubismVector2(0,0),m=new s.CubismVector2(0,0),f=new s.CubismVector2(0,0);e[0].position=new s.CubismVector2(i.x,i.y),c=n.CubismMath.degreesToRadian(r),(d=n.CubismMath.radianToDirection(c)).normalize();for(var y=1;y<t;++y)e[y].force=d.multiplyByScaler(e[y].acceleration).add(a),e[y].lastPosition=new s.CubismVector2(e[y].position.x,e[y].position.y),h=e[y].delay*u*30,g=e[y].position.substract(e[y-1].position),p=n.CubismMath.directionToRadian(e[y].lastGravity,d)/l,g.x=n.CubismMath.cos(p)*g.x-g.y*n.CubismMath.sin(p),g.y=n.CubismMath.sin(p)*g.x+g.y*n.CubismMath.cos(p),e[y].position=e[y-1].position.add(g),_=e[y].velocity.multiplyByScaler(h),m=e[y].force.multiplyByScaler(h).multiplyByScaler(h),e[y].position=e[y].position.add(_).add(m),(f=e[y].position.substract(e[y-1].position)).normalize(),e[y].position=e[y-1].position.add(f.multiplyByScaler(e[y].radius)),n.CubismMath.abs(e[y].position.x)<o&&(e[y].position.x=0),0!=h&&(e[y].velocity=e[y].position.substract(e[y].lastPosition),e[y].velocity=e[y].velocity.divisionByScalar(h),e[y].velocity=e[y].velocity.multiplyByScaler(e[y].mobility)),e[y].force=new s.CubismVector2(0,0),e[y].lastGravity=new s.CubismVector2(d.x,d.y)}function I(e,t,i,r,a,o){var u,l,c=new s.CubismVector2(0,0);e[0].position=new s.CubismVector2(i.x,i.y),u=n.CubismMath.degreesToRadian(r),(l=n.CubismMath.radianToDirection(u)).normalize();for(var h=1;h<t;++h)e[h].force=l.multiplyByScaler(e[h].acceleration).add(a),e[h].lastPosition=new s.CubismVector2(e[h].position.x,e[h].position.y),e[h].velocity=new s.CubismVector2(0,0),(c=e[h].force).normalize(),c=c.multiplyByScaler(e[h].radius),e[h].position=e[h-1].position.add(c),n.CubismMath.abs(e[h].position.x)<o&&(e[h].position.x=0),e[h].force=new s.CubismVector2(0,0),e[h].lastGravity=new s.CubismVector2(l.x,l.y)}function x(e,t,i,r,a){var o,n;(o=r*a.getScale(a.translationScale,a.angleScale))<t?(o<a.valueBelowMinimum&&(a.valueBelowMinimum=o),o=t):o>i&&(o>a.valueExceededMaximum&&(a.valueExceededMaximum=o),o=i),(n=a.weight/100)>=1||(o=e[0]*(1-n)+o*n),e[0]=o}function w(e,t,i,r,a,o,s,u){var l=0,c=n.CubismMath.max(i,t);c<e&&(e=c);var h=n.CubismMath.min(i,t);h>e&&(e=h);var p,d,g=n.CubismMath.min(a,o),_=n.CubismMath.max(a,o),m=s,f=(p=h,d=c,n.CubismMath.min(p,d)+function(e,t){var i=n.CubismMath.max(e,t),r=n.CubismMath.min(e,t);return n.CubismMath.abs(i-r)}(p,d)/2),y=e-f;switch(function(e){var t=0;return e>0?t=1:e<0&&(t=-1),t}(y)){case 1:var v=_-m;0!=(b=c-f)&&(l=y*(v/b),l+=m);break;case-1:var b;v=g-m,0!=(b=h-f)&&(l=y*(v/b),l+=m);break;case 0:l=m}return u?l:-1*l}t.PhysicsOutput=g;var B,L=o(i(4186));(B=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPhysics=L.CubismPhysics,B.Options=L.Options},2698:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismPhysicsRig=t.CubismPhysicsOutput=t.CubismPhysicsInput=t.CubismPhysicsSubRig=t.CubismPhysicsParticle=t.CubismPhysicsNormalization=t.CubismPhysicsParameter=t.PhysicsJsonEffectiveForces=t.CubismPhysicsSource=t.CubismPhysicsTargetType=void 0;var n,s,u=i(9520),l=i(5001);(s=t.CubismPhysicsTargetType||(t.CubismPhysicsTargetType={}))[s.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter",(n=t.CubismPhysicsSource||(t.CubismPhysicsSource={}))[n.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",n[n.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",n[n.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle";t.PhysicsJsonEffectiveForces=function(){this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0)};var c=function(){};t.CubismPhysicsParameter=c;var h=function(){};t.CubismPhysicsNormalization=h;t.CubismPhysicsParticle=function(){this.initialPosition=new u.CubismVector2(0,0),this.position=new u.CubismVector2(0,0),this.lastPosition=new u.CubismVector2(0,0),this.lastGravity=new u.CubismVector2(0,0),this.force=new u.CubismVector2(0,0),this.velocity=new u.CubismVector2(0,0)};t.CubismPhysicsSubRig=function(){this.normalizationPosition=new h,this.normalizationAngle=new h};t.CubismPhysicsInput=function(){this.source=new c};t.CubismPhysicsOutput=function(){this.destination=new c,this.translationScale=new u.CubismVector2(0,0)};t.CubismPhysicsRig=function(){this.settings=new l.csmVector,this.inputs=new l.csmVector,this.outputs=new l.csmVector,this.particles=new l.csmVector,this.gravity=new u.CubismVector2(0,0),this.wind=new u.CubismVector2(0,0),this.fps=0};var p,d=o(i(2698));(p=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPhysicsInput=d.CubismPhysicsInput,p.CubismPhysicsNormalization=d.CubismPhysicsNormalization,p.CubismPhysicsOutput=d.CubismPhysicsOutput,p.CubismPhysicsParameter=d.CubismPhysicsParameter,p.CubismPhysicsParticle=d.CubismPhysicsParticle,p.CubismPhysicsRig=d.CubismPhysicsRig,p.CubismPhysicsSource=d.CubismPhysicsSource,p.CubismPhysicsSubRig=d.CubismPhysicsSubRig,p.CubismPhysicsTargetType=d.CubismPhysicsTargetType,p.PhysicsJsonEffectiveForces=d.PhysicsJsonEffectiveForces},1119:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismPhysicsJson=void 0;var n=i(1076),s=i(9520),u=i(7695),l="Position",c="Angle",h="Type",p="Meta",d="EffectiveForces",g="Gravity",_="Wind",m="PhysicsSettings",f="Normalization",y="Minimum",v="Maximum",b="Default",M="Reflect",C="Weight",S="Input",P="Output",I="Vertices",x=function(){function e(e,t){this._json=u.CubismJson.create(e,t)}return e.prototype.release=function(){u.CubismJson.delete(this._json)},e.prototype.getGravity=function(){var e=new s.CubismVector2(0,0);return e.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("X").toFloat(),e.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(g).getValueByString("Y").toFloat(),e},e.prototype.getWind=function(){var e=new s.CubismVector2(0,0);return e.x=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(_).getValueByString("X").toFloat(),e.y=this._json.getRoot().getValueByString(p).getValueByString(d).getValueByString(_).getValueByString("Y").toFloat(),e},e.prototype.getFps=function(){return this._json.getRoot().getValueByString(p).getValueByString("Fps").toFloat(0)},e.prototype.getSubRigCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("PhysicsSettingCount").toInt()},e.prototype.getTotalInputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalInputCount").toInt()},e.prototype.getTotalOutputCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("TotalOutputCount").toInt()},e.prototype.getVertexCount=function(){return this._json.getRoot().getValueByString(p).getValueByString("VertexCount").toInt()},e.prototype.getNormalizationPositionMinimumValue=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(f).getValueByString(l).getValueByString(y).toFloat()},e.prototype.getNormalizationPositionMaximumValue=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(f).getValueByString(l).getValueByString(v).toFloat()},e.prototype.getNormalizationPositionDefaultValue=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(f).getValueByString(l).getValueByString(b).toFloat()},e.prototype.getNormalizationAngleMinimumValue=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(f).getValueByString(c).getValueByString(y).toFloat()},e.prototype.getNormalizationAngleMaximumValue=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(f).getValueByString(c).getValueByString(v).toFloat()},e.prototype.getNormalizationAngleDefaultValue=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(f).getValueByString(c).getValueByString(b).toFloat()},e.prototype.getInputCount=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(S).getVector().getSize()},e.prototype.getInputWeight=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString(C).toFloat()},e.prototype.getInputReflect=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString(M).toBoolean()},e.prototype.getInputType=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString(h).getRawString()},e.prototype.getInputSourceId=function(e,t){return n.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(S).getValueByIndex(t).getValueByString("Source").getValueByString("Id").getRawString())},e.prototype.getOutputCount=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getVector().getSize()},e.prototype.getOutputVertexIndex=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString("VertexIndex").toInt()},e.prototype.getOutputAngleScale=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString("Scale").toFloat()},e.prototype.getOutputWeight=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString(C).toFloat()},e.prototype.getOutputDestinationId=function(e,t){return n.CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString("Destination").getValueByString("Id").getRawString())},e.prototype.getOutputType=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString(h).getRawString()},e.prototype.getOutputReflect=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(P).getValueByIndex(t).getValueByString(M).toBoolean()},e.prototype.getParticleCount=function(e){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getVector().getSize()},e.prototype.getParticleMobility=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Mobility").toFloat()},e.prototype.getParticleDelay=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Delay").toFloat()},e.prototype.getParticleAcceleration=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Acceleration").toFloat()},e.prototype.getParticleRadius=function(e,t){return this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString("Radius").toFloat()},e.prototype.getParticlePosition=function(e,t){var i=new s.CubismVector2(0,0);return i.x=this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString(l).getValueByString("X").toFloat(),i.y=this._json.getRoot().getValueByString(m).getValueByIndex(e).getValueByString(I).getValueByIndex(t).getValueByString(l).getValueByString("Y").toFloat(),i},e}();t.CubismPhysicsJson=x;var w=o(i(1119));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismPhysicsJson=w.CubismPhysicsJson},5505:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismTextureColor=t.CubismBlendMode=t.CubismRenderer=void 0;var n,s=i(7633),u=function(){function e(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisotropy=0,this._model=null,this._modelColor=new l,this._useHighPrecisionMask=!1,this._mvpMatrix4x4=new s.CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}return e.create=function(){return null},e.delete=function(e){},e.prototype.initialize=function(e){this._model=e},e.prototype.drawModel=function(){null!=this.getModel()&&(this.saveProfile(),this.doDrawModel(),this.restoreProfile())},e.prototype.setMvpMatrix=function(e){this._mvpMatrix4x4.setMatrix(e.getArray())},e.prototype.getMvpMatrix=function(){return this._mvpMatrix4x4},e.prototype.setModelColor=function(e,t,i,r){e<0?e=0:e>1&&(e=1),t<0?t=0:t>1&&(t=1),i<0?i=0:i>1&&(i=1),r<0?r=0:r>1&&(r=1),this._modelColor.R=e,this._modelColor.G=t,this._modelColor.B=i,this._modelColor.A=r},e.prototype.getModelColor=function(){return JSON.parse(JSON.stringify(this._modelColor))},e.prototype.setIsPremultipliedAlpha=function(e){this._isPremultipliedAlpha=e},e.prototype.isPremultipliedAlpha=function(){return this._isPremultipliedAlpha},e.prototype.setIsCulling=function(e){this._isCulling=e},e.prototype.isCulling=function(){return this._isCulling},e.prototype.setAnisotropy=function(e){this._anisotropy=e},e.prototype.getAnisotropy=function(){return this._anisotropy},e.prototype.getModel=function(){return this._model},e.prototype.useHighPrecisionMask=function(e){this._useHighPrecisionMask=e},e.prototype.isUsingHighPrecisionMask=function(){return this._useHighPrecisionMask},e}();t.CubismRenderer=u,(n=t.CubismBlendMode||(t.CubismBlendMode={}))[n.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",n[n.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",n[n.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative";var l=function(){this.R=1,this.G=1,this.B=1,this.A=1};t.CubismTextureColor=l;var c,h=o(i(5505));(c=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismBlendMode=h.CubismBlendMode,c.CubismRenderer=h.CubismRenderer,c.CubismTextureColor=h.CubismTextureColor},7607:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismRenderer_WebGL=t.fragmentShaderSrcMaskInvertedPremultipliedAlpha=t.fragmentShaderSrcMaskPremultipliedAlpha=t.fragmentShaderSrcPremultipliedAlpha=t.vertexShaderSrcMasked=t.vertexShaderSrc=t.fragmentShaderSrcsetupMask=t.vertexShaderSrcSetupMask=t.ShaderNames=t.CubismShaderSet=t.CubismShader_WebGL=t.CubismRendererProfile_WebGL=t.CubismClippingContext=t.CubismRenderTextureResource=t.CubismClippingManager_WebGL=void 0;var u,l,c,h=i(1076),p=i(7633),d=i(4313),g=i(3369),_=i(5001),m=i(8945),f=i(5505),y=function(){function e(){this._currentMaskRenderTexture=null,this._maskColorBuffers=null,this._currentFrameNo=0,this._renderTextureCount=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new _.csmVector,this._clippingContextListForDraw=new _.csmVector,this._channelColors=new _.csmVector,this._tmpBoundsOnModel=new g.csmRect,this._tmpMatrix=new p.CubismMatrix44,this._tmpMatrixForMask=new p.CubismMatrix44,this._tmpMatrixForDraw=new p.CubismMatrix44,this._maskTexture=null;var e=new f.CubismTextureColor;e.R=1,e.G=0,e.B=0,e.A=0,this._channelColors.pushBack(e),(e=new f.CubismTextureColor).R=0,e.G=1,e.B=0,e.A=0,this._channelColors.pushBack(e),(e=new f.CubismTextureColor).R=0,e.G=0,e.B=1,e.A=0,this._channelColors.pushBack(e),(e=new f.CubismTextureColor).R=0,e.G=0,e.B=0,e.A=1,this._channelColors.pushBack(e)}return e.prototype.getChannelFlagAsColor=function(e){return this._channelColors.at(e)},e.prototype.getMaskRenderTexture=function(){if(this._maskTexture&&null!=this._maskTexture.textures)this._maskTexture.frameNo=this._currentFrameNo;else{null!=this._maskRenderTextures&&this._maskRenderTextures.clear(),this._maskRenderTextures=new _.csmVector,null!=this._maskColorBuffers&&this._maskColorBuffers.clear(),this._maskColorBuffers=new _.csmVector;for(var e=this._clippingMaskBufferSize,t=0;t<this._renderTextureCount;t++)this._maskColorBuffers.pushBack(this.gl.createTexture()),this.gl.bindTexture(this.gl.TEXTURE_2D,this._maskColorBuffers.at(t)),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this._maskRenderTextures.pushBack(this.gl.createFramebuffer()),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTextures.at(t)),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._maskColorBuffers.at(t),0);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),this._maskTexture=new v(this._currentFrameNo,this._maskRenderTextures)}return this._maskTexture.textures},e.prototype.setGL=function(e){this.gl=e},e.prototype.calcClippedDrawTotalBounds=function(e,t){for(var i=Number.MAX_VALUE,r=Number.MAX_VALUE,a=Number.MIN_VALUE,o=Number.MIN_VALUE,n=t._clippedDrawableIndexList.length,s=0;s<n;s++){for(var u=t._clippedDrawableIndexList[s],l=e.getDrawableVertexCount(u),c=e.getDrawableVertices(u),p=Number.MAX_VALUE,d=Number.MAX_VALUE,g=-Number.MAX_VALUE,_=-Number.MAX_VALUE,m=l*h.Constant.vertexStep,f=h.Constant.vertexOffset;f<m;f+=h.Constant.vertexStep){var y=c[f],v=c[f+1];y<p&&(p=y),y>g&&(g=y),v<d&&(d=v),v>_&&(_=v)}if(p!=Number.MAX_VALUE)if(p<i&&(i=p),d<r&&(r=d),g>a&&(a=g),_>o&&(o=_),i==Number.MAX_VALUE)t._allClippedDrawRect.x=0,t._allClippedDrawRect.y=0,t._allClippedDrawRect.width=0,t._allClippedDrawRect.height=0,t._isUsing=!1;else{t._isUsing=!0;var b=a-i,M=o-r;t._allClippedDrawRect.x=i,t._allClippedDrawRect.y=r,t._allClippedDrawRect.width=b,t._allClippedDrawRect.height=M}}},e.prototype.release=function(){for(var e=0;e<this._clippingContextListForMask.getSize();e++)this._clippingContextListForMask.at(e)&&(this._clippingContextListForMask.at(e).release(),this._clippingContextListForMask.set(e,void 0)),this._clippingContextListForMask.set(e,null);for(this._clippingContextListForMask=null,e=0;e<this._clippingContextListForDraw.getSize();e++)this._clippingContextListForDraw.set(e,null);if(this._clippingContextListForDraw=null,this._maskTexture){for(e=0;e<this._maskTexture.textures.getSize();e++)this.gl.deleteFramebuffer(this._maskTexture.textures.at(e));this._maskTexture.textures.clear(),this._maskTexture.textures=null,this._maskTexture=null}for(e=0;e<this._channelColors.getSize();e++)this._channelColors.set(e,null);if(this._channelColors=null,null!=this._maskColorBuffers){for(var t=0;t<this._maskColorBuffers.getSize();t++)this.gl.deleteTexture(this._maskColorBuffers.at(t));this._maskColorBuffers.clear()}this._maskColorBuffers=null,null!=this._maskRenderTextures&&this._maskRenderTextures.clear(),this._maskRenderTextures=null,null!=this._clearedFrameBufferflags&&this._clearedFrameBufferflags.clear(),this._clearedFrameBufferflags=null},e.prototype.initialize=function(e,t,i,r,a){a%1!=0&&((0,m.CubismLogWarning)("The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer."),a=~~a),a<1&&(0,m.CubismLogWarning)("The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1."),this._renderTextureCount=a<1?1:a,this._clearedFrameBufferflags=new _.csmVector(this._renderTextureCount);for(var o=0;o<t;o++)if(r[o]<=0)this._clippingContextListForDraw.pushBack(null);else{var n=this.findSameClip(i[o],r[o]);null==n&&(n=new b(this,i[o],r[o]),this._clippingContextListForMask.pushBack(n)),n.addClippedDrawable(o),this._clippingContextListForDraw.pushBack(n)}},e.prototype.setupClippingContext=function(e,t){this._currentFrameNo++;for(var i=0,r=0;r<this._clippingContextListForMask.getSize();r++){var a=this._clippingContextListForMask.at(r);this.calcClippedDrawTotalBounds(e,a),a._isUsing&&i++}if(i>0){this.setupLayoutBounds(t.isUsingHighPrecisionMask()?0:i),t.isUsingHighPrecisionMask()||(this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._currentMaskRenderTexture=this.getMaskRenderTexture().at(0),t.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture)),this._clearedFrameBufferflags.getSize()!=this._renderTextureCount&&(this._clearedFrameBufferflags.clear(),this._clearedFrameBufferflags=new _.csmVector(this._renderTextureCount));for(var o=0;o<this._clearedFrameBufferflags.getSize();o++)this._clearedFrameBufferflags[o]=!1;for(r=0;r<this._clippingContextListForMask.getSize();r++){var n=this._clippingContextListForMask.at(r),s=n._allClippedDrawRect,u=n._layoutBounds,h=.05,p=0,d=0,g=this.getMaskRenderTexture().at(n._bufferIndex);if(this._currentMaskRenderTexture==g||t.isUsingHighPrecisionMask()||(this._currentMaskRenderTexture=g,t.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture)),t.isUsingHighPrecisionMask()){var m=e.getPixelsPerUnit(),y=n.getClippingManager()._clippingMaskBufferSize,v=u.width*y,b=u.height*y;this._tmpBoundsOnModel.setRect(s),this._tmpBoundsOnModel.width*m>v?(this._tmpBoundsOnModel.expand(s.width*h,0),p=u.width/this._tmpBoundsOnModel.width):p=m/v,this._tmpBoundsOnModel.height*m>b?(this._tmpBoundsOnModel.expand(0,s.height*h),d=u.height/this._tmpBoundsOnModel.height):d=m/b}else this._tmpBoundsOnModel.setRect(s),this._tmpBoundsOnModel.expand(s.width*h,s.height*h),p=u.width/this._tmpBoundsOnModel.width,d=u.height/this._tmpBoundsOnModel.height;if(this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(u.x,u.y),this._tmpMatrix.scaleRelative(p,d),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(u.x,u.y),this._tmpMatrix.scaleRelative(p,d),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),n._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),n._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray()),!t.isUsingHighPrecisionMask())for(var M=n._clippingIdCount,C=0;C<M;C++){var S=n._clippingIdList[C];e.getDrawableDynamicFlagVertexPositionsDidChange(S)&&(t.setIsCulling(0!=e.getDrawableCulling(S)),this._clearedFrameBufferflags[n._bufferIndex]||(this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this._clearedFrameBufferflags[n._bufferIndex]=!0),t.setClippingContextBufferForMask(n),t.drawMesh(e.getDrawableTextureIndex(S),e.getDrawableVertexIndexCount(S),e.getDrawableVertexCount(S),e.getDrawableVertexIndices(S),e.getDrawableVertices(S),e.getDrawableVertexUvs(S),e.getMultiplyColor(S),e.getScreenColor(S),e.getDrawableOpacity(S),f.CubismBlendMode.CubismBlendMode_Normal,!1))}}t.isUsingHighPrecisionMask()||(this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),t.setClippingContextBufferForMask(null),this.gl.viewport(l[0],l[1],l[2],l[3]))}},e.prototype.findSameClip=function(e,t){for(var i=0;i<this._clippingContextListForMask.getSize();i++){var r=this._clippingContextListForMask.at(i),a=r._clippingIdCount;if(a==t){for(var o=0,n=0;n<a;n++)for(var s=r._clippingIdList[n],u=0;u<a;u++)if(e[u]==s){o++;break}if(o==a)return r}}return null},e.prototype.setupLayoutBounds=function(e){var t=this._renderTextureCount<=1?36:32*this._renderTextureCount;if(e<=0||e>t){e>t&&(0,m.CubismLogError)("not supported mask count : {0}\n[Details] render texture count : {1}, mask count : {2}",e-t,this._renderTextureCount,e);for(var i=0;i<this._clippingContextListForMask.getSize();i++)(p=this._clippingContextListForMask.at(i))._layoutChannelNo=0,p._layoutBounds.x=0,p._layoutBounds.y=0,p._layoutBounds.width=1,p._layoutBounds.height=1,p._bufferIndex=0}else{var r=this._renderTextureCount<=1?9:8,a=e/this._renderTextureCount,o=e%this._renderTextureCount;o=~~o;var n=(a=~~a)/4,s=a%4;n=~~n,s=~~s;for(var u=0,l=0;l<this._renderTextureCount;l++)for(var c=0;c<4;c++){var h=n+(c<s?1:0);if(h<r&&c==(s+1>=4?0:s+1)&&(h+=l<o?1:0),0==h);else if(1==h){var p;(p=this._clippingContextListForMask.at(u++))._layoutChannelNo=c,p._layoutBounds.x=0,p._layoutBounds.y=0,p._layoutBounds.width=1,p._layoutBounds.height=1,p._bufferIndex=l}else if(2==h)for(var d=0;d<h;d++)g=~~(g=d%2),(f=this._clippingContextListForMask.at(u++))._layoutChannelNo=c,f._layoutBounds.x=.5*g,f._layoutBounds.y=0,f._layoutBounds.width=.5,f._layoutBounds.height=1,f._bufferIndex=l;else if(h<=4)for(d=0;d<h;d++)g=~~(g=d%2),_=~~(_=d/2),(f=this._clippingContextListForMask.at(u++))._layoutChannelNo=c,f._layoutBounds.x=.5*g,f._layoutBounds.y=.5*_,f._layoutBounds.width=.5,f._layoutBounds.height=.5,f._bufferIndex=l;else if(h<=r)for(d=0;d<h;d++){var g,_;g=~~(g=d%3),_=~~(_=d/3),(f=this._clippingContextListForMask.at(u++))._layoutChannelNo=c,f._layoutBounds.x=g/3,f._layoutBounds.y=_/3,f._layoutBounds.width=1/3,f._layoutBounds.height=1/3,f._bufferIndex=l}else for((0,m.CubismLogError)("not supported mask count : {0}\n[Details] render texture count : {1}, mask count : {2}",e-t,this._renderTextureCount,e),i=0;i<h;i++){var f;(f=this._clippingContextListForMask.at(u++))._layoutChannelNo=0,f._layoutBounds.x=0,f._layoutBounds.y=0,f._layoutBounds.width=1,f._layoutBounds.height=1,f._bufferIndex=0}}}},e.prototype.getColorBuffer=function(){return this._maskColorBuffers},e.prototype.getClippingContextListForDraw=function(){return this._clippingContextListForDraw},e.prototype.getClippingMaskCount=function(){return this._clippingContextListForMask.getSize()},e.prototype.setClippingMaskBufferSize=function(e){this._clippingMaskBufferSize=e},e.prototype.getClippingMaskBufferSize=function(){return this._clippingMaskBufferSize},e.prototype.getRenderTextureCount=function(){return this._renderTextureCount},e}();t.CubismClippingManager_WebGL=y;var v=function(e,t){this.frameNo=e,this.textures=t};t.CubismRenderTextureResource=v;var b=function(){function e(e,t,i){this._owner=e,this._clippingIdList=t,this._clippingIdCount=i,this._allClippedDrawRect=new g.csmRect,this._layoutBounds=new g.csmRect,this._clippedDrawableIndexList=[],this._matrixForMask=new p.CubismMatrix44,this._matrixForDraw=new p.CubismMatrix44,this._bufferIndex=0}return e.prototype.release=function(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)},e.prototype.addClippedDrawable=function(e){this._clippedDrawableIndexList.push(e)},e.prototype.getClippingManager=function(){return this._owner},e.prototype.setGl=function(e){this._owner.setGL(e)},e}();t.CubismClippingContext=b;var M=function(){function e(){this._lastVertexAttribArrayEnabled=new Array(4),this._lastColorMask=new Array(4),this._lastBlending=new Array(4),this._lastViewport=new Array(4)}return e.prototype.setGlEnable=function(e,t){t?this.gl.enable(e):this.gl.disable(e)},e.prototype.setGlEnableVertexAttribArray=function(e,t){t?this.gl.enableVertexAttribArray(e):this.gl.disableVertexAttribArray(e)},e.prototype.save=function(){null!=this.gl?(this._lastArrayBufferBinding=this.gl.getParameter(this.gl.ARRAY_BUFFER_BINDING),this._lastArrayBufferBinding=this.gl.getParameter(this.gl.ELEMENT_ARRAY_BUFFER_BINDING),this._lastProgram=this.gl.getParameter(this.gl.CURRENT_PROGRAM),this._lastActiveTexture=this.gl.getParameter(this.gl.ACTIVE_TEXTURE),this.gl.activeTexture(this.gl.TEXTURE1),this._lastTexture1Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this.gl.activeTexture(this.gl.TEXTURE0),this._lastTexture0Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this._lastVertexAttribArrayEnabled[0]=this.gl.getVertexAttrib(0,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[1]=this.gl.getVertexAttrib(1,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[2]=this.gl.getVertexAttrib(2,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[3]=this.gl.getVertexAttrib(3,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastScissorTest=this.gl.isEnabled(this.gl.SCISSOR_TEST),this._lastStencilTest=this.gl.isEnabled(this.gl.STENCIL_TEST),this._lastDepthTest=this.gl.isEnabled(this.gl.DEPTH_TEST),this._lastCullFace=this.gl.isEnabled(this.gl.CULL_FACE),this._lastBlend=this.gl.isEnabled(this.gl.BLEND),this._lastFrontFace=this.gl.getParameter(this.gl.FRONT_FACE),this._lastColorMask=this.gl.getParameter(this.gl.COLOR_WRITEMASK),this._lastBlending[0]=this.gl.getParameter(this.gl.BLEND_SRC_RGB),this._lastBlending[1]=this.gl.getParameter(this.gl.BLEND_DST_RGB),this._lastBlending[2]=this.gl.getParameter(this.gl.BLEND_SRC_ALPHA),this._lastBlending[3]=this.gl.getParameter(this.gl.BLEND_DST_ALPHA),this._lastFBO=this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING),this._lastViewport=this.gl.getParameter(this.gl.VIEWPORT)):(0,m.CubismLogError)("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.")},e.prototype.restore=function(){null!=this.gl?(this.gl.useProgram(this._lastProgram),this.setGlEnableVertexAttribArray(0,this._lastVertexAttribArrayEnabled[0]),this.setGlEnableVertexAttribArray(1,this._lastVertexAttribArrayEnabled[1]),this.setGlEnableVertexAttribArray(2,this._lastVertexAttribArrayEnabled[2]),this.setGlEnableVertexAttribArray(3,this._lastVertexAttribArrayEnabled[3]),this.setGlEnable(this.gl.SCISSOR_TEST,this._lastScissorTest),this.setGlEnable(this.gl.STENCIL_TEST,this._lastStencilTest),this.setGlEnable(this.gl.DEPTH_TEST,this._lastDepthTest),this.setGlEnable(this.gl.CULL_FACE,this._lastCullFace),this.setGlEnable(this.gl.BLEND,this._lastBlend),this.gl.frontFace(this._lastFrontFace),this.gl.colorMask(this._lastColorMask[0],this._lastColorMask[1],this._lastColorMask[2],this._lastColorMask[3]),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this._lastArrayBufferBinding),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this._lastElementArrayBufferBinding),this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture1Binding2D),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture0Binding2D),this.gl.activeTexture(this._lastActiveTexture),this.gl.blendFuncSeparate(this._lastBlending[0],this._lastBlending[1],this._lastBlending[2],this._lastBlending[3])):(0,m.CubismLogError)("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.")},e.prototype.setGl=function(e){this.gl=e},e}();t.CubismRendererProfile_WebGL=M;var C=function(){function e(){this._shaderSets=new _.csmVector}return e.getInstance=function(){return null==u?u=new e:u},e.deleteInstance=function(){u&&(u.release(),u=null)},e.prototype.release=function(){this.releaseShaderProgram()},e.prototype.setupShaderProgram=function(e,t,i,r,a,o,n,s,u,l,c,h,p,d,g){var _,y,v,b;if(p||(0,m.CubismLogError)("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=e.getClippingContextBufferForMask()){var M=this._shaderSets.at(S.ShaderNames_SetupMask);this.gl.useProgram(M.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,t),this.gl.uniform1i(M.samplerTexture0Location,0),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributePositionLocation),this.gl.vertexAttribPointer(M.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributeTexCoordLocation),this.gl.vertexAttribPointer(M.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);var C=e.getClippingContextBufferForMask()._layoutChannelNo,I=e.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(C);this.gl.uniform4f(M.uniformChannelFlagLocation,I.R,I.G,I.B,I.A),this.gl.uniformMatrix4fv(M.uniformClipMatrixLocation,!1,e.getClippingContextBufferForMask()._matrixForMask.getArray());var x=e.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(M.uniformBaseColorLocation,2*x.x-1,2*x.y-1,2*x.getRight()-1,2*x.getBottom()-1),this.gl.uniform4f(M.uniformMultiplyColorLocation,c.R,c.G,c.B,c.A),this.gl.uniform4f(M.uniformScreenColorLocation,h.R,h.G,h.B,h.A),_=this.gl.ZERO,y=this.gl.ONE_MINUS_SRC_COLOR,v=this.gl.ZERO,b=this.gl.ONE_MINUS_SRC_ALPHA}else{var w=null!=e.getClippingContextBufferForDraw(),B=w?g?2:1:0;switch(M=new P,u){case f.CubismBlendMode.CubismBlendMode_Normal:default:M=this._shaderSets.at(S.ShaderNames_NormalPremultipliedAlpha+B),_=this.gl.ONE,y=this.gl.ONE_MINUS_SRC_ALPHA,v=this.gl.ONE,b=this.gl.ONE_MINUS_SRC_ALPHA;break;case f.CubismBlendMode.CubismBlendMode_Additive:M=this._shaderSets.at(S.ShaderNames_AddPremultipliedAlpha+B),_=this.gl.ONE,y=this.gl.ONE,v=this.gl.ZERO,b=this.gl.ONE;break;case f.CubismBlendMode.CubismBlendMode_Multiplicative:M=this._shaderSets.at(S.ShaderNames_MultPremultipliedAlpha+B),_=this.gl.DST_COLOR,y=this.gl.ONE_MINUS_SRC_ALPHA,v=this.gl.ZERO,b=this.gl.ONE}if(this.gl.useProgram(M.shaderProgram),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributePositionLocation),this.gl.vertexAttribPointer(M.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(M.attributeTexCoordLocation),this.gl.vertexAttribPointer(M.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),w){this.gl.activeTexture(this.gl.TEXTURE1);var L=e.getClippingContextBufferForDraw().getClippingManager().getColorBuffer().at(e.getClippingContextBufferForDraw()._bufferIndex);this.gl.bindTexture(this.gl.TEXTURE_2D,L),this.gl.uniform1i(M.samplerTexture1Location,1),this.gl.uniformMatrix4fv(M.uniformClipMatrixLocation,!1,e.getClippingContextBufferForDraw()._matrixForDraw.getArray()),C=e.getClippingContextBufferForDraw()._layoutChannelNo,I=e.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(C),this.gl.uniform4f(M.uniformChannelFlagLocation,I.R,I.G,I.B,I.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,t),this.gl.uniform1i(M.samplerTexture0Location,0),this.gl.uniformMatrix4fv(M.uniformMatrixLocation,!1,d.getArray()),this.gl.uniform4f(M.uniformBaseColorLocation,l.R,l.G,l.B,l.A),this.gl.uniform4f(M.uniformMultiplyColorLocation,c.R,c.G,c.B,c.A),this.gl.uniform4f(M.uniformScreenColorLocation,h.R,h.G,h.B,h.A)}null==n.index&&(n.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,n.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(_,y,v,b)},e.prototype.releaseShaderProgram=function(){for(var e=0;e<this._shaderSets.getSize();e++)this.gl.deleteProgram(this._shaderSets.at(e).shaderProgram),this._shaderSets.at(e).shaderProgram=0,this._shaderSets.set(e,void 0),this._shaderSets.set(e,null)},e.prototype.generateShaders=function(){for(var e=0;e<10;e++)this._shaderSets.pushBack(new P);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcSetupMask,t.fragmentShaderSrcsetupMask),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(t.vertexShaderSrc,t.fragmentShaderSrcPremultipliedAlpha),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcMasked,t.fragmentShaderSrcMaskPremultipliedAlpha),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(t.vertexShaderSrcMasked,t.fragmentShaderSrcMaskInvertedPremultipliedAlpha),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(0).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_multiplyColor"),this._shaderSets.at(0).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_screenColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(1).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_multiplyColor"),this._shaderSets.at(1).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_screenColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(2).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_multiplyColor"),this._shaderSets.at(2).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_screenColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(3).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_multiplyColor"),this._shaderSets.at(3).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_screenColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(4).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_multiplyColor"),this._shaderSets.at(4).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_screenColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(5).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_multiplyColor"),this._shaderSets.at(5).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_screenColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(6).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_multiplyColor"),this._shaderSets.at(6).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_screenColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(7).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_multiplyColor"),this._shaderSets.at(7).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_screenColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(8).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_multiplyColor"),this._shaderSets.at(8).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_screenColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor"),this._shaderSets.at(9).uniformMultiplyColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_multiplyColor"),this._shaderSets.at(9).uniformScreenColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_screenColor")},e.prototype.loadShaderProgram=function(e,t){var i=this.gl.createProgram(),r=this.compileShaderSource(this.gl.VERTEX_SHADER,e);if(!r)return(0,m.CubismLogError)("Vertex shader compile error!"),0;var a=this.compileShaderSource(this.gl.FRAGMENT_SHADER,t);return a?(this.gl.attachShader(i,r),this.gl.attachShader(i,a),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(r),this.gl.deleteShader(a),i):((0,m.CubismLogError)("Failed to link program: {0}",i),this.gl.deleteShader(r),r=0,this.gl.deleteShader(a),a=0,i&&(this.gl.deleteProgram(i),i=0),0)):((0,m.CubismLogError)("Vertex shader compile error!"),0)},e.prototype.compileShaderSource=function(e,t){var i=t,r=this.gl.createShader(e);if(this.gl.shaderSource(r,i),this.gl.compileShader(r),!r){var a=this.gl.getShaderInfoLog(r);(0,m.CubismLogError)("Shader compile log: {0} ",a)}return this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(this.gl.deleteShader(r),null)},e.prototype.setGl=function(e){this.gl=e},e}();t.CubismShader_WebGL=C;var S,P=function(){};t.CubismShaderSet=P,function(e){e[e.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",e[e.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",e[e.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",e[e.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",e[e.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",e[e.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",e[e.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",e[e.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",e[e.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",e[e.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(S=t.ShaderNames||(t.ShaderNames={})),t.vertexShaderSrcSetupMask="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.fragmentShaderSrcsetupMask="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",t.vertexShaderSrc="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.vertexShaderSrcMasked="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}",t.fragmentShaderSrcPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 color = texColor * u_baseColor;   gl_FragColor = vec4(color.rgb, color.a);}",t.fragmentShaderSrcMaskPremultipliedAlpha="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",t.fragmentShaderSrcMaskInvertedPremultipliedAlpha="precision mediump float;varying vec2      v_texCoord;varying vec4      v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4      u_channelFlag;uniform vec4      u_baseColor;uniform vec4      u_multiplyColor;uniform vec4      u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * (1.0 - maskVal);   gl_FragColor = col_formask;}";var I=function(e){function t(){var t=e.call(this)||this;return t._clippingContextBufferForMask=null,t._clippingContextBufferForDraw=null,t._rendererProfile=new M,t.firstDraw=!0,t._textures=new d.csmMap,t._sortedDrawableIndexList=new _.csmVector,t._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},t._textures.prepareCapacity(32,!0),t}return a(t,e),t.prototype.initialize=function(t,i){void 0===i&&(i=1),t.isUsingMasking()&&(this._clippingManager=new y,this._clippingManager.initialize(t,t.getDrawableCount(),t.getDrawableMasks(),t.getDrawableMaskCounts(),i)),this._sortedDrawableIndexList.resize(t.getDrawableCount(),0),e.prototype.initialize.call(this,t)},t.prototype.bindTexture=function(e,t){this._textures.setValue(e,t)},t.prototype.getBindedTextures=function(){return this._textures},t.prototype.setClippingMaskBufferSize=function(e){if(this._model.isUsingMasking()){var t=this._clippingManager.getRenderTextureCount();this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new y,this._clippingManager.setClippingMaskBufferSize(e),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts(),t)}},t.prototype.getClippingMaskBufferSize=function(){return this._model.isUsingMasking()?this._clippingManager.getClippingMaskBufferSize():-1},t.prototype.getRenderTextureCount=function(){return this._model.isUsingMasking()?this._clippingManager.getRenderTextureCount():-1},t.prototype.release=function(){this._clippingManager&&(this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null),null!=this.gl&&(this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null)},t.prototype.doDrawModel=function(){if(null!=this.gl){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();for(var e=this.getModel().getDrawableCount(),t=this.getModel().getDrawableRenderOrders(),i=0;i<e;++i){var r=t[i];this._sortedDrawableIndexList.set(r,i)}for(i=0;i<e;++i){var a=this._sortedDrawableIndexList.at(i);if(this.getModel().getDrawableDynamicFlagIsVisible(a)){var o=null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(a):null;if(null!=o&&this.isUsingHighPrecisionMask()){o._isUsing&&(this.gl.viewport(0,0,this._clippingManager.getClippingMaskBufferSize(),this._clippingManager.getClippingMaskBufferSize()),this.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,o.getClippingManager().getMaskRenderTexture().at(o._bufferIndex)),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT));for(var n=o._clippingIdCount,s=0;s<n;s++){var u=o._clippingIdList[s];this._model.getDrawableDynamicFlagVertexPositionsDidChange(u)&&(this.setIsCulling(0!=this._model.getDrawableCulling(u)),this.setClippingContextBufferForMask(o),this.drawMesh(this.getModel().getDrawableTextureIndex(u),this.getModel().getDrawableVertexIndexCount(u),this.getModel().getDrawableVertexCount(u),this.getModel().getDrawableVertexIndices(u),this.getModel().getDrawableVertices(u),this.getModel().getDrawableVertexUvs(u),this.getModel().getMultiplyColor(u),this.getModel().getScreenColor(u),this.getModel().getDrawableOpacity(u),f.CubismBlendMode.CubismBlendMode_Normal,!1))}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,c),this.setClippingContextBufferForMask(null),this.gl.viewport(l[0],l[1],l[2],l[3]),this.preDraw()}this.setClippingContextBufferForDraw(o),this.setIsCulling(this.getModel().getDrawableCulling(a)),this.drawMesh(this.getModel().getDrawableTextureIndex(a),this.getModel().getDrawableVertexIndexCount(a),this.getModel().getDrawableVertexCount(a),this.getModel().getDrawableVertexIndices(a),this.getModel().getDrawableVertices(a),this.getModel().getDrawableVertexUvs(a),this.getModel().getMultiplyColor(a),this.getModel().getScreenColor(a),this.getModel().getDrawableOpacity(a),this.getModel().getDrawableBlendMode(a),this.getModel().getDrawableInvertedMaskBit(a))}}}else(0,m.CubismLogError)("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.")},t.prototype.drawMesh=function(e,t,i,r,a,o,n,s,u,l,c){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);var h,p=this.getModelColor();null==this.getClippingContextBufferForMask()&&(p.A*=u,this.isPremultipliedAlpha()&&(p.R*=p.A,p.G*=p.A,p.B*=p.A)),h=null!=this._textures.getValue(e)?this._textures.getValue(e):null,C.getInstance().setupShaderProgram(this,h,i,a,r,o,this._bufferData,u,l,p,n,s,this.isPremultipliedAlpha(),this.getMvpMatrix(),c),this.gl.drawElements(this.gl.TRIANGLES,t,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)},t.prototype.saveProfile=function(){this._rendererProfile.save()},t.prototype.restoreProfile=function(){this._rendererProfile.restore()},t.doStaticRelease=function(){C.deleteInstance()},t.prototype.setRenderState=function(e,t){c=e,l=t},t.prototype.preDraw=function(){if(this.firstDraw&&(this.firstDraw=!1),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null),this.getAnisotropy()>0&&this._extension)for(var e=0;e<this._textures.getSize();++e)this.gl.bindTexture(this.gl.TEXTURE_2D,this._textures.getValue(e)),this.gl.texParameterf(this.gl.TEXTURE_2D,this._extension.TEXTURE_MAX_ANISOTROPY_EXT,this.getAnisotropy())},t.prototype.setClippingContextBufferForMask=function(e){this._clippingContextBufferForMask=e},t.prototype.getClippingContextBufferForMask=function(){return this._clippingContextBufferForMask},t.prototype.setClippingContextBufferForDraw=function(e){this._clippingContextBufferForDraw=e},t.prototype.getClippingContextBufferForDraw=function(){return this._clippingContextBufferForDraw},t.prototype.startUp=function(e){this.gl=e,this._clippingManager&&this._clippingManager.setGL(e),C.getInstance().setGl(e),this._rendererProfile.setGl(e),this._extension=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")},t}(f.CubismRenderer);t.CubismRenderer_WebGL=I,f.CubismRenderer.staticRelease=function(){I.doStaticRelease()};var x,w=s(i(7607));(x=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismClippingContext=w.CubismClippingContext,x.CubismClippingManager_WebGL=w.CubismClippingManager_WebGL,x.CubismRenderTextureResource=w.CubismRenderTextureResource,x.CubismRenderer_WebGL=w.CubismRenderer_WebGL,x.CubismShaderSet=w.CubismShaderSet,x.CubismShader_WebGL=w.CubismShader_WebGL,x.ShaderNames=w.ShaderNames},4313:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.iterator=t.csmMap=t.csmPair=void 0;var n=i(8945),s=function(e,t){this.first=null==e?null:e,this.second=null==t?null:t};t.csmPair=s;var u=function(){function e(e){null!=e?e<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(e),this._size=e):(this._keyValues=[],this._dummyValue=null,this._size=0)}return e.prototype.release=function(){this.clear()},e.prototype.appendKey=function(e){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new s(e),this._size+=1},e.prototype.getValue=function(e){for(var t=-1,i=0;i<this._size;i++)if(this._keyValues[i].first==e){t=i;break}return t>=0?this._keyValues[t].second:(this.appendKey(e),this._keyValues[this._size-1].second)},e.prototype.setValue=function(e,t){for(var i=-1,r=0;r<this._size;r++)if(this._keyValues[r].first==e){i=r;break}i>=0?this._keyValues[i].second=t:(this.appendKey(e),this._keyValues[this._size-1].second=t)},e.prototype.isExist=function(e){for(var t=0;t<this._size;t++)if(this._keyValues[t].first==e)return!0;return!1},e.prototype.clear=function(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0},e.prototype.getSize=function(){return this._size},e.prototype.prepareCapacity=function(t,i){t>this._keyValues.length&&(0==this._keyValues.length?(!i&&t<e.DefaultSize&&(t=e.DefaultSize),this._keyValues.length=t):(!i&&t<2*this._keyValues.length&&(t=2*this._keyValues.length),this._keyValues.length=t))},e.prototype.begin=function(){return new l(this,0)},e.prototype.end=function(){return new l(this,this._size)},e.prototype.erase=function(e){var t=e._index;return t<0||this._size<=t?e:(this._keyValues.splice(t,1),--this._size,new l(this,t))},e.prototype.dumpAsInt=function(){for(var e=0;e<this._size;e++)(0,n.CubismLogDebug)("{0} ,",this._keyValues[e]),(0,n.CubismLogDebug)("\n")},e.DefaultSize=10,e}();t.csmMap=u;var l=function(){function e(e,t){this._map=null!=e?e:new u,this._index=null!=t?t:0}return e.prototype.set=function(e){return this._index=e._index,this._map=e._map,this},e.prototype.preIncrement=function(){return++this._index,this},e.prototype.preDecrement=function(){return--this._index,this},e.prototype.increment=function(){return new e(this._map,this._index++)},e.prototype.decrement=function(){var t=new e(this._map,this._index);return this._map=t._map,this._index=t._index,this},e.prototype.ptr=function(){return this._map._keyValues[this._index]},e.prototype.notEqual=function(e){return this._index!=e._index||this._map!=e._map},e}();t.iterator=l;var c,h=o(i(4313));(c=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmMap=h.csmMap,c.csmPair=h.csmPair,c.iterator=h.iterator},3369:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.csmRect=void 0;var n=function(){function e(e,t,i,r){this.x=e,this.y=t,this.width=i,this.height=r}return e.prototype.getCenterX=function(){return this.x+.5*this.width},e.prototype.getCenterY=function(){return this.y+.5*this.height},e.prototype.getRight=function(){return this.x+this.width},e.prototype.getBottom=function(){return this.y+this.height},e.prototype.setRect=function(e){this.x=e.x,this.y=e.y,this.width=e.width,this.height=e.height},e.prototype.expand=function(e,t){this.x-=e,this.y-=t,this.width+=2*e,this.height+=2*t},e}();t.csmRect=n;var s=o(i(3369));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmRect=s.csmRect},180:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.csmString=void 0;var n=function(){function e(e){this.s=e}return e.prototype.append=function(e,t){return this.s+=void 0!==t?e.substr(0,t):e,this},e.prototype.expansion=function(e,t){for(var i=0;i<e;i++)this.append(t);return this},e.prototype.getBytes=function(){return encodeURIComponent(this.s).replace(/%../g,"x").length},e.prototype.getLength=function(){return this.s.length},e.prototype.isLess=function(e){return this.s<e.s},e.prototype.isGreat=function(e){return this.s>e.s},e.prototype.isEqual=function(e){return this.s==e},e.prototype.isEmpty=function(){return 0==this.s.length},e}();t.csmString=n;var s=o(i(180));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmString=s.csmString},5001:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.iterator=t.csmVector=void 0;var n=function(){function e(e){void 0===e&&(e=0),e<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(e),this._capacity=e,this._size=0)}return e.prototype.at=function(e){return this._ptr[e]},e.prototype.set=function(e,t){this._ptr[e]=t},e.prototype.get=function(e){void 0===e&&(e=0);for(var t=new Array,i=e;i<this._size;i++)t.push(this._ptr[i]);return t},e.prototype.pushBack=function(t){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?e.s_defaultSize:2*this._capacity),this._ptr[this._size++]=t},e.prototype.clear=function(){this._ptr.length=0,this._size=0},e.prototype.getSize=function(){return this._size},e.prototype.assign=function(e,t){this._size<e&&this.prepareCapacity(e);for(var i=0;i<e;i++)this._ptr[i]=t;this._size=e},e.prototype.resize=function(e,t){void 0===t&&(t=null),this.updateSize(e,t,!0)},e.prototype.updateSize=function(e,t,i){if(void 0===t&&(t=null),void 0===i&&(i=!0),this._size<e)if(this.prepareCapacity(e),i)for(var r=this._size;r<e;r++)this._ptr[r]="function"==typeof t?JSON.parse(JSON.stringify(new t)):t;else for(r=this._size;r<e;r++)this._ptr[r]=t;else{var a=this._size-e;this._ptr.splice(this._size-a,a)}this._size=e},e.prototype.insert=function(e,t,i){var r=e._index,a=t._index,o=i._index,n=o-a;this.prepareCapacity(this._size+n);var s=this._size-r;if(s>0)for(var u=0;u<s;u++)this._ptr.splice(r+u,0,null);for(u=a;u<o;u++,r++)this._ptr[r]=t._vector._ptr[u];this._size=this._size+n},e.prototype.remove=function(e){return!(e<0||this._size<=e||(this._ptr.splice(e,1),--this._size,0))},e.prototype.erase=function(e){var t=e._index;return t<0||this._size<=t?e:(this._ptr.splice(t,1),--this._size,new s(this,t))},e.prototype.prepareCapacity=function(e){e>this._capacity&&(0==this._capacity?(this._ptr=new Array(e),this._capacity=e):(this._ptr.length=e,this._capacity=e))},e.prototype.begin=function(){return 0==this._size?this.end():new s(this,0)},e.prototype.end=function(){return new s(this,this._size)},e.prototype.getOffset=function(t){var i=new e;return i._ptr=this.get(t),i._size=this.get(t).length,i._capacity=this.get(t).length,i},e.s_defaultSize=10,e}();t.csmVector=n;var s=function(){function e(e,t){this._vector=null!=e?e:null,this._index=null!=t?t:0}return e.prototype.set=function(e){return this._index=e._index,this._vector=e._vector,this},e.prototype.preIncrement=function(){return++this._index,this},e.prototype.preDecrement=function(){return--this._index,this},e.prototype.increment=function(){return new e(this._vector,this._index++)},e.prototype.decrement=function(){return new e(this._vector,this._index--)},e.prototype.ptr=function(){return this._vector._ptr[this._index]},e.prototype.substitution=function(e){return this._index=e._index,this._vector=e._vector,this},e.prototype.notEqual=function(e){return this._index!=e._index||this._vector!=e._vector},e}();t.iterator=s;var u,l=o(i(5001));(u=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).csmVector=l.csmVector,u.iterator=l.iterator},8945:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.CubismDebug=t.CubismLogError=t.CubismLogWarning=t.CubismLogInfo=t.CubismLogDebug=t.CubismLogVerbose=t.CSM_ASSERT=t.CubismLogPrintIn=t.CubismLogPrint=void 0;var n=i(9090),s=i(1076);t.CubismLogPrint=function(e,t,i){u.print(e,"[CSM]"+t,i)},t.CubismLogPrintIn=function(e,i,r){(0,t.CubismLogPrint)(e,i+"\n",r)},t.CSM_ASSERT=function(e){console.assert(e)},n.CSM_LOG_LEVEL<=n.CSM_LOG_LEVEL_VERBOSE?(t.CubismLogVerbose=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Verbose,"[V]"+e,i)},t.CubismLogDebug=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+e,i)},t.CubismLogInfo=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+e,i)},t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_DEBUG?(t.CubismLogDebug=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Debug,"[D]"+e,i)},t.CubismLogInfo=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+e,i)},t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_INFO?(t.CubismLogInfo=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Info,"[I]"+e,i)},t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_WARNING?(t.CubismLogWarning=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Warning,"[W]"+e,i)},t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)}):n.CSM_LOG_LEVEL==n.CSM_LOG_LEVEL_ERROR&&(t.CubismLogError=function(e){for(var i=[],r=1;r<arguments.length;r++)i[r-1]=arguments[r];(0,t.CubismLogPrintIn)(s.LogLevel.LogLevel_Error,"[E]"+e,i)});var u=function(){function e(){}return e.print=function(e,t,i){if(!(e<s.CubismFramework.getLoggingLevel())){var r=s.CubismFramework.coreLogFunction;r&&r(t.replace(/\{(\d+)\}/g,(function(e,t){return i[t]})))}},e.dumpBytes=function(e,t,i){for(var r=0;r<i;r++)r%16==0&&r>0?this.print(e,"\n"):r%8==0&&r>0&&this.print(e,"  "),this.print(e,"{0} ",[255&t[r]]);this.print(e,"\n")},e}();t.CubismDebug=u;var l=o(i(8945));(t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismDebug=l.CubismDebug},7695:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Live2DCubismFramework=t.JsonMap=t.JsonArray=t.JsonNullvalue=t.JsonError=t.JsonString=t.JsonBoolean=t.JsonFloat=t.CubismJson=t.Value=void 0;var u=i(1076),l=i(4313),c=i(180),h=i(5001),p=i(8945),d="Error: type mismatch",g=function(){function e(){}return e.prototype.getRawString=function(e,t){return this.getString(e,t)},e.prototype.toInt=function(e){return void 0===e&&(e=0),e},e.prototype.toFloat=function(e){return void 0===e&&(e=0),e},e.prototype.toBoolean=function(e){return void 0===e&&(e=!1),e},e.prototype.getSize=function(){return 0},e.prototype.getArray=function(e){return void 0===e&&(e=null),e},e.prototype.getVector=function(e){return void 0===e&&(e=new h.csmVector),e},e.prototype.getMap=function(e){return e},e.prototype.getValueByIndex=function(t){return e.errorValue.setErrorNotForClientCall(d)},e.prototype.getValueByString=function(t){return e.nullValue.setErrorNotForClientCall(d)},e.prototype.getKeys=function(){return e.s_dummyKeys},e.prototype.isError=function(){return!1},e.prototype.isNull=function(){return!1},e.prototype.isBool=function(){return!1},e.prototype.isFloat=function(){return!1},e.prototype.isString=function(){return!1},e.prototype.isArray=function(){return!1},e.prototype.isMap=function(){return!1},e.prototype.equals=function(e){return!1},e.prototype.isStatic=function(){return!1},e.prototype.setErrorNotForClientCall=function(e){return v.errorValue},e.staticInitializeNotForClientCall=function(){f.trueValue=new f(!0),f.falseValue=new f(!1),e.errorValue=new v("ERROR",!0),e.nullValue=new b,e.s_dummyKeys=new h.csmVector},e.staticReleaseNotForClientCall=function(){f.trueValue=null,f.falseValue=null,e.errorValue=null,e.nullValue=null,e.s_dummyKeys=null},e}();t.Value=g;var _=function(){function e(e,t){this._parseCallback=I.CubismJsonExtension.parseJsonObject,this._error=null,this._lineCount=0,this._root=null,null!=e&&this.parseBytes(e,t,this._parseCallback)}return e.create=function(t,i){var r=new e;return r.parseBytes(t,i,r._parseCallback)?r:(e.delete(r),null)},e.delete=function(e){},e.prototype.getRoot=function(){return this._root},e.arrayBufferToString=function(e){for(var t=new Uint8Array(e),i="",r=0,a=t.length;r<a;++r)i+="%"+this.pad(t[r].toString(16));return decodeURIComponent(i)},e.pad=function(e){return e.length<2?"0"+e:e},e.prototype.parseBytes=function(t,i,r){var a,o=new Array(1),n=e.arrayBufferToString(t);return this._root=null==r?this.parseValue(n,i,0,o):r(JSON.parse(n),new C),this._error?(a="Json parse error : @line "+(this._lineCount+1)+"\n",this._root=new y(a),(0,p.CubismLogInfo)("{0}",this._root.getRawString()),!1):null!=this._root||(this._root=new v(new c.csmString(this._error),!1),!1)},e.prototype.getParseError=function(){return this._error},e.prototype.checkEndOfFile=function(){return this._root.getArray()[1].equals("EOF")},e.prototype.parseValue=function(e,t,i,r){if(this._error)return null;for(var a,o=null,n=i;n<t;n++)switch(e[n]){case"-":case".":case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":var s=new Array(1);return a=(0,u.strtod)(e.slice(n),s),r[0]=e.indexOf(s[0]),new m(a);case'"':return new y(this.parseString(e,t,n+1,r));case"[":return this.parseArray(e,t,n+1,r);case"{":return this.parseObject(e,t,n+1,r);case"n":return n+3<t?(o=new b,r[0]=n+4):this._error="parse null",o;case"t":return n+3<t?(o=f.trueValue,r[0]=n+4):this._error="parse true",o;case"f":return n+4<t?(o=f.falseValue,r[0]=n+5):this._error="illegal ',' position",o;case",":return this._error="illegal ',' position",null;case"]":return r[0]=n,null;case"\n":this._lineCount++}return this._error="illegal end of value",null},e.prototype.parseString=function(e,t,i,r){if(this._error)return null;for(var a=i,o=new c.csmString(""),n=i;a<t;a++)switch(e[a]){case'"':return r[0]=a+1,o.append(e.slice(n),a-n),o.s;case"//":if(++a-1>n&&o.append(e.slice(n),a-n),n=a+1,a<t)switch(e[a]){case"\\":o.expansion(1,"\\");break;case'"':o.expansion(1,'"');break;case"/":o.expansion(1,"/");break;case"b":o.expansion(1,"\b");break;case"f":o.expansion(1,"\f");break;case"n":o.expansion(1,"\n");break;case"r":o.expansion(1,"\r");break;case"t":o.expansion(1,"\t");break;case"u":this._error="parse string/unicord escape not supported"}else this._error="parse string/escape error"}return this._error="parse string/illegal end",null},e.prototype.parseObject=function(e,t,i,r){if(this._error)return null;for(var a=new C,o="",n=i,s=Array(1),u=!1;n<t;n++){e:for(;n<t;n++)switch(e[n]){case'"':if(o=this.parseString(e,t,n+1,s),this._error)return null;n=s[0],u=!0;break e;case"}":return r[0]=n+1,a;case":":this._error="illegal ':' position";break;case"\n":this._lineCount++}if(!u)return this._error="key not found",null;u=!1;e:for(;n<t;n++)switch(e[n]){case":":u=!0,n++;break e;case"}":this._error="illegal '}' position";break;case"\n":this._lineCount++}if(!u)return this._error="':' not found",null;var l=this.parseValue(e,t,n,s);if(this._error)return null;n=s[0],a.put(o,l);e:for(;n<t;n++)switch(e[n]){case",":break e;case"}":return r[0]=n+1,a;case"\n":this._lineCount++}}return this._error="illegal end of perseObject",null},e.prototype.parseArray=function(e,t,i,r){if(this._error)return null;for(var a=new M,o=i,n=new Array(1);o<t;o++){var s=this.parseValue(e,t,o,n);if(this._error)return null;o=n[0],s&&a.add(s);e:for(;o<t;o++)switch(e[o]){case",":break e;case"]":return r[0]=o+1,a;case"\n":++this._lineCount}}return a=void 0,this._error="illegal end of parseObject",null},e}();t.CubismJson=_;var m=function(e){function t(t){var i=e.call(this)||this;return i._value=t,i}return a(t,e),t.prototype.isFloat=function(){return!0},t.prototype.getString=function(e,t){return this._value=parseFloat("\0"),this._stringBuffer="\0",this._stringBuffer},t.prototype.toInt=function(e){return void 0===e&&(e=0),parseInt(this._value.toString())},t.prototype.toFloat=function(e){return void 0===e&&(e=0),this._value},t.prototype.equals=function(e){return"number"==typeof e&&!Math.round(e)&&e==this._value},t}(g);t.JsonFloat=m;var f=function(e){function t(t){var i=e.call(this)||this;return i._boolValue=t,i}return a(t,e),t.prototype.isBool=function(){return!0},t.prototype.toBoolean=function(e){return void 0===e&&(e=!1),this._boolValue},t.prototype.getString=function(e,t){return this._stringBuffer=this._boolValue?"true":"false",this._stringBuffer},t.prototype.equals=function(e){return"boolean"==typeof e&&e==this._boolValue},t.prototype.isStatic=function(){return!0},t}(g);t.JsonBoolean=f;var y=function(e){function t(t){var i=e.call(this)||this;return"string"==typeof t&&(i._stringBuffer=t),t instanceof c.csmString&&(i._stringBuffer=t.s),i}return a(t,e),t.prototype.isString=function(){return!0},t.prototype.getString=function(e,t){return this._stringBuffer},t.prototype.equals=function(e){return"string"==typeof e?this._stringBuffer==e:e instanceof c.csmString&&this._stringBuffer==e.s},t}(g);t.JsonString=y;var v=function(e){function t(t,i){var r=this;return(r=e.call(this,t)||this)._isStatic=i,r}return a(t,e),t.prototype.isStatic=function(){return this._isStatic},t.prototype.setErrorNotForClientCall=function(e){return this._stringBuffer=e,this},t.prototype.isError=function(){return!0},t}(y);t.JsonError=v;var b=function(e){function t(){var t=e.call(this)||this;return t._stringBuffer="NullValue",t}return a(t,e),t.prototype.isNull=function(){return!0},t.prototype.getString=function(e,t){return this._stringBuffer},t.prototype.isStatic=function(){return!0},t.prototype.setErrorNotForClientCall=function(e){return this._stringBuffer=e,v.nullValue},t}(g);t.JsonNullvalue=b;var M=function(e){function t(){var t=e.call(this)||this;return t._array=new h.csmVector,t}return a(t,e),t.prototype.release=function(){for(var e=this._array.begin();e.notEqual(this._array.end());e.preIncrement()){var t=e.ptr();t&&!t.isStatic()&&(t=void 0,t=null)}},t.prototype.isArray=function(){return!0},t.prototype.getValueByIndex=function(e){if(e<0||this._array.getSize()<=e)return g.errorValue.setErrorNotForClientCall("Error: index out of bounds");var t=this._array.at(e);return null==t?g.nullValue:t},t.prototype.getValueByString=function(e){return g.errorValue.setErrorNotForClientCall(d)},t.prototype.getString=function(e,t){for(var i=t+"[\n",r=this._array.begin();r.notEqual(this._array.end());r.increment()){var a=r.ptr();this._stringBuffer+=t+""+a.getString(t+" ")+"\n"}return this._stringBuffer=i+t+"]\n",this._stringBuffer},t.prototype.add=function(e){this._array.pushBack(e)},t.prototype.getVector=function(e){return void 0===e&&(e=null),this._array},t.prototype.getSize=function(){return this._array.getSize()},t}(g);t.JsonArray=M;var C=function(e){function t(){var t=e.call(this)||this;return t._map=new l.csmMap,t}return a(t,e),t.prototype.release=function(){for(var e=this._map.begin();e.notEqual(this._map.end());){var t=e.ptr().second;t&&!t.isStatic()&&(t=void 0,t=null),e.preIncrement()}},t.prototype.isMap=function(){return!0},t.prototype.getValueByString=function(e){if(e instanceof c.csmString){var t=this._map.getValue(e.s);return null==t?g.nullValue:t}for(var i=this._map.begin();i.notEqual(this._map.end());i.preIncrement())if(i.ptr().first==e)return null==i.ptr().second?g.nullValue:i.ptr().second;return g.nullValue},t.prototype.getValueByIndex=function(e){return g.errorValue.setErrorNotForClientCall(d)},t.prototype.getString=function(e,t){this._stringBuffer=t+"{\n";for(var i=this._map.begin();i.notEqual(this._map.end());){var r=i.ptr().first,a=i.ptr().second;this._stringBuffer+=t+" "+r+" : "+a.getString(t+"   ")+" \n",i.preIncrement()}return this._stringBuffer+=t+"}\n",this._stringBuffer},t.prototype.getMap=function(e){return this._map},t.prototype.put=function(e,t){this._map.setValue(e,t)},t.prototype.getKeys=function(){if(!this._keys){this._keys=new h.csmVector;for(var e=this._map.begin();e.notEqual(this._map.end());){var t=e.ptr().first;this._keys.pushBack(t),e.preIncrement()}}return this._keys},t.prototype.getSize=function(){return this._keys.getSize()},t}(g);t.JsonMap=C;var S,P=s(i(7695)),I=i(7833);(S=t.Live2DCubismFramework||(t.Live2DCubismFramework={})).CubismJson=P.CubismJson,S.JsonArray=P.JsonArray,S.JsonBoolean=P.JsonBoolean,S.JsonError=P.JsonError,S.JsonFloat=P.JsonFloat,S.JsonMap=P.JsonMap,S.JsonNullvalue=P.JsonNullvalue,S.JsonString=P.JsonString,S.Value=P.Value},7833:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CubismJsonExtension=void 0;var r=i(7695),a=function(){function e(){}return e.parseJsonObject=function(t,i){return Object.keys(t).forEach((function(a){"boolean"==typeof t[a]?i.put(a,new r.JsonBoolean(t[a])):"string"==typeof t[a]?i.put(a,new r.JsonString(t[a])):"number"==typeof t[a]?i.put(a,new r.JsonFloat(t[a])):t[a]instanceof Array?i.put(a,e.parseJsonArray(t[a])):t[a]instanceof Object?i.put(a,e.parseJsonObject(t[a],new r.JsonMap)):null==t[a]?i.put(a,new r.JsonNullvalue):i.put(a,t[a])})),i},e.parseJsonArray=function(e){var t=this,i=new r.JsonArray;return Object.keys(e).forEach((function(a){var o=Number(a);if("number"==typeof o)"boolean"==typeof e[o]?i.add(new r.JsonBoolean(e[o])):"string"==typeof e[o]?i.add(new r.JsonString(e[o])):"number"==typeof e[o]?i.add(new r.JsonFloat(e[o])):e[a]instanceof Array?i.add(t.parseJsonArray(e[a])):e[a]instanceof Object?i.add(t.parseJsonObject(e[a],new r.JsonMap)):null==e[a]?i.add(new r.JsonNullvalue):i.add(e[a]);else if(e[a]instanceof Array)i.add(t.parseJsonArray(e[a]));else if(e[a]instanceof Object)i.add(t.parseJsonObject(e[a],new r.JsonMap));else if(null==e[a])i.add(new r.JsonNullvalue);else for(var n=0;n<e[a].length;n++)i.add(e[a][n])})),i},e}();t.CubismJsonExtension=a},8046:function(e,t,i){"use strict";var r=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(a,o){function n(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,s)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var i,r,a,o,n={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(u){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(n=0)),n;)try{if(i=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return n.label++,{value:s[1],done:!1};case 5:n.label++,r=s[1],s=[0];continue;case 7:s=n.ops.pop(),n.trys.pop();continue;default:if(!((a=(a=n.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){n=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){n.label=s[1];break}if(6===s[0]&&n.label<a[1]){n.label=a[1],a=s;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(s);break}a[2]&&n.ops.pop(),n.trys.pop();continue}s=t.call(e,n)}catch(e){s=[6,e],r=0}finally{i=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.AzureAi=void 0;var o=i(1986),n=i(4952),s=i(1780),u=function(){function e(){var e=document.getElementById("config").value;if(""!==e){var t=JSON.parse(e);this._openaiurl=t.openaiurl,this._openaipikey=t.openaipikey,this._ttsregion=t.ttsregion,this._ttsapikey=t.ttsapikey}else this._openaiurl="api/chatgpt",this._openaipikey="",this._ttsUrl="api/text-to-speech",this._sttUrl="api/speech-to-text",this._ttsapikey="";this._inProgress=!1}return e.prototype.getOpenAiAnswer=function(e){return r(this,void 0,void 0,(function(){var t,i,r,n,s,u,l;return a(this,(function(a){switch(a.label){case 0:return void 0===this._openaiurl||this._inProgress||""===e?[2,""]:(this._inProgress=!0,t=document.getElementById("conversations").value,i=t?JSON.parse(t):[],o.LAppPal.printMessage(e),r=function(e,t){return 1===t.length&&t.unshift(e),t},n={role:"system",content:"You are a helpful assistant."},i.push({role:"user",content:e}),s={taskId:$("#taskId").val(),model:$("#model").val(),prompt:r(n,i),max_tokens:+$("#max_tokens").val(),temperature:+$("#temperature").val(),frequency_penalty:+$("#frequency_penalty").val(),presence_penalty:+$("#presence_penalty").val(),top_p:+$("#top_p").val(),best_of:+$("#best_of").val(),stop:["<|im_end|>"]},[4,fetch(this._openaiurl,{method:"POST",headers:{"Content-Type":"application/json","api-key":this._openaipikey},body:JSON.stringify(s)})]);case 1:return[4,a.sent().json()];case 2:return u=a.sent(),l=u.choices[0].message.content,i.push({role:"assistant",content:l}),o.LAppPal.printMessage(l),$("#reply").val(l).trigger("change"),$("#cost").text("(Left: $"+u.left.toFixed(5)+" Just Used: $"+u.cost.toFixed(6)+")"),document.getElementById("conversations").value=JSON.stringify(i),[2,l]}}))}))},e.prototype.getSpeechUrl=function(e,t){return r(this,void 0,void 0,(function(){var i,r,n,u,l,c,h;return a(this,(function(a){switch(a.label){case 0:return i=new Headers,""!==this._ttsapikey?(i.set("Content-Type","application/ssml+xml"),i.set("X-Microsoft-OutputFormat","riff-8khz-16bit-mono-pcm"),i.set("Ocp-Apim-Subscription-Key",this._ttsapikey)):i.set("Content-Type","application/json"),r=s.LANGUAGE_TO_VOICE_MAPPING_LIST.find((function(t){return t.voice.startsWith(e)&&!1===t.IsMale})).voice,n="\n<speak version='1.0' xml:lang='".concat(e,"'>\n  <voice xml:lang='").concat(e,"' xml:gender='Female' name='").concat(r,"'>\n    ").concat(t,"\n  </voice>\n</speak>"),u=this._ttsregion?"https://".concat(this._ttsregion,".tts.speech.microsoft.com/cognitiveservices/v1"):this._ttsUrl,[4,fetch(u,{method:"POST",headers:i,body:n})];case 1:return l=a.sent(),console.log(l),[4,l.blob()];case 2:return c=a.sent(),h=window.URL.createObjectURL(c),document.getElementById("voice").src=h,o.LAppPal.printMessage("Load Text to Speech url"),this._inProgress=!1,[2,h]}}))}))},e.prototype.getTextFromSpeech=function(e,t){return r(this,void 0,void 0,(function(){var i,r,s,u;return a(this,(function(a){switch(a.label){case 0:return o.LAppPal.printMessage(e),(i=new Headers).set("Accept","application/json;text/xml"),i.set("Content-Type","audio/wav; codecs=audio/pcm; samplerate=16000"),i.set("Ocp-Apim-Subscription-Key",this._ttsapikey),[4,(0,n.getWaveBlob)(t,!1,{sampleRate:16e3})];case 1:return r=a.sent(),s=this._ttsregion?"https://".concat(this._ttsregion,".stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1"):this._sttUrl,[4,fetch(s+"?language=".concat(e),{method:"POST",headers:i,body:r})];case 2:return[4,a.sent().json()];case 3:return u=a.sent(),$("#query").val(u.DisplayText).trigger("change"),[2,u.DisplayText]}}))}))},e}();t.AzureAi=u},1780:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LANGUAGE_TO_VOICE_MAPPING_LIST=void 0,t.LANGUAGE_TO_VOICE_MAPPING_LIST=[{voice:"af-ZA-AdriNeural",IsMale:!1},{voice:"af-ZA-WillemNeural",IsMale:!0},{voice:"am-ET-AmehaNeural",IsMale:!0},{voice:"am-ET-MekdesNeural",IsMale:!1},{voice:"ar-AE-FatimaNeural",IsMale:!1},{voice:"ar-AE-HamdanNeural",IsMale:!0},{voice:"ar-BH-AliNeural",IsMale:!0},{voice:"ar-BH-LailaNeural",IsMale:!1},{voice:"ar-DZ-AminaNeural",IsMale:!1},{voice:"ar-DZ-IsmaelNeural",IsMale:!0},{voice:"ar-EG-SalmaNeural",IsMale:!1},{voice:"ar-EG-ShakirNeural",IsMale:!0},{voice:"ar-IQ-BasselNeural",IsMale:!0},{voice:"ar-IQ-RanaNeural",IsMale:!1},{voice:"ar-JO-SanaNeural",IsMale:!1},{voice:"ar-JO-TaimNeural",IsMale:!0},{voice:"ar-KW-FahedNeural",IsMale:!0},{voice:"ar-KW-NouraNeural",IsMale:!1},{voice:"ar-LB-LaylaNeural",IsMale:!1},{voice:"ar-LB-RamiNeural",IsMale:!0},{voice:"ar-LY-ImanNeural",IsMale:!1},{voice:"ar-LY-OmarNeural",IsMale:!0},{voice:"ar-MA-JamalNeural",IsMale:!0},{voice:"ar-MA-MounaNeural",IsMale:!1},{voice:"ar-OM-AbdullahNeural",IsMale:!0},{voice:"ar-OM-AyshaNeural",IsMale:!1},{voice:"ar-QA-AmalNeural",IsMale:!1},{voice:"ar-QA-MoazNeural",IsMale:!0},{voice:"ar-SA-HamedNeural",IsMale:!0},{voice:"ar-SA-ZariyahNeural",IsMale:!1},{voice:"ar-SY-AmanyNeural",IsMale:!1},{voice:"ar-SY-LaithNeural",IsMale:!0},{voice:"ar-TN-HediNeural",IsMale:!0},{voice:"ar-TN-ReemNeural",IsMale:!1},{voice:"ar-YE-MaryamNeural",IsMale:!1},{voice:"ar-YE-SalehNeural",IsMale:!0},{voice:"az-AZ-BabekNeural",IsMale:!0},{voice:"az-AZ-BanuNeural",IsMale:!1},{voice:"bg-BG-BorislavNeural",IsMale:!0},{voice:"bg-BG-KalinaNeural",IsMale:!1},{voice:"bn-BD-NabanitaNeural",IsMale:!1},{voice:"bn-BD-PradeepNeural",IsMale:!0},{voice:"bn-IN-BashkarNeural",IsMale:!0},{voice:"bn-IN-TanishaaNeural",IsMale:!1},{voice:"bs-BA-GoranNeural",IsMale:!0},{voice:"bs-BA-VesnaNeural",IsMale:!1},{voice:"ca-ES-AlbaNeural",IsMale:!1},{voice:"ca-ES-EnricNeural",IsMale:!0},{voice:"ca-ES-JoanaNeural",IsMale:!1},{voice:"cs-CZ-AntoninNeural",IsMale:!0},{voice:"cs-CZ-VlastaNeural",IsMale:!1},{voice:"cy-GB-AledNeural",IsMale:!0},{voice:"cy-GB-NiaNeural",IsMale:!1},{voice:"da-DK-ChristelNeural",IsMale:!1},{voice:"da-DK-JeppeNeural",IsMale:!0},{voice:"de-AT-IngridNeural",IsMale:!1},{voice:"de-AT-JonasNeural",IsMale:!0},{voice:"de-CH-JanNeural",IsMale:!0},{voice:"de-CH-LeniNeural",IsMale:!1},{voice:"de-DE-AmalaNeural",IsMale:!1},{voice:"de-DE-BerndNeural",IsMale:!0},{voice:"de-DE-ChristophNeural",IsMale:!0},{voice:"de-DE-ConradNeural",IsMale:!0},{voice:"de-DE-ElkeNeural",IsMale:!1},{voice:"de-DE-GiselaNeural",IsMale:!1},{voice:"de-DE-KasperNeural",IsMale:!0},{voice:"de-DE-KatjaNeural",IsMale:!1},{voice:"de-DE-KillianNeural",IsMale:!0},{voice:"de-DE-KlarissaNeural",IsMale:!1},{voice:"de-DE-KlausNeural",IsMale:!0},{voice:"de-DE-LouisaNeural",IsMale:!1},{voice:"de-DE-MajaNeural",IsMale:!1},{voice:"de-DE-RalfNeural",IsMale:!0},{voice:"de-DE-TanjaNeural",IsMale:!1},{voice:"el-GR-AthinaNeural",IsMale:!1},{voice:"el-GR-NestorasNeural",IsMale:!0},{voice:"en-AU-AnnetteNeural",IsMale:!1},{voice:"en-AU-CarlyNeural",IsMale:!1},{voice:"en-AU-DarrenNeural",IsMale:!0},{voice:"en-AU-DuncanNeural",IsMale:!0},{voice:"en-AU-ElsieNeural",IsMale:!1},{voice:"en-AU-FreyaNeural",IsMale:!1},{voice:"en-AU-JoanneNeural",IsMale:!1},{voice:"en-AU-KenNeural",IsMale:!0},{voice:"en-AU-KimNeural",IsMale:!1},{voice:"en-AU-NatashaNeural",IsMale:!1},{voice:"en-AU-NeilNeural",IsMale:!0},{voice:"en-AU-TimNeural",IsMale:!0},{voice:"en-AU-TinaNeural",IsMale:!1},{voice:"en-AU-WilliamNeural",IsMale:!0},{voice:"en-CA-ClaraNeural",IsMale:!1},{voice:"en-CA-LiamNeural",IsMale:!0},{voice:"en-GB-AbbiNeural",IsMale:!1},{voice:"en-GB-AlfieNeural",IsMale:!0},{voice:"en-GB-BellaNeural",IsMale:!1},{voice:"en-GB-ElliotNeural",IsMale:!0},{voice:"en-GB-EthanNeural",IsMale:!0},{voice:"en-GB-HollieNeural",IsMale:!1},{voice:"en-GB-LibbyNeural",IsMale:!1},{voice:"en-GB-MaisieNeural",IsMale:!1},{voice:"en-GB-NoahNeural",IsMale:!0},{voice:"en-GB-OliverNeural",IsMale:!0},{voice:"en-GB-OliviaNeural",IsMale:!1},{voice:"en-GB-RyanNeural",IsMale:!0},{voice:"en-GB-SoniaNeural",IsMale:!1},{voice:"en-GB-ThomasNeural",IsMale:!0},{voice:"en-HK-SamNeural",IsMale:!0},{voice:"en-HK-YanNeural",IsMale:!1},{voice:"en-IE-ConnorNeural",IsMale:!0},{voice:"en-IE-EmilyNeural",IsMale:!1},{voice:"en-IN-NeerjaNeural",IsMale:!1},{voice:"en-IN-PrabhatNeural",IsMale:!0},{voice:"en-KE-AsiliaNeural",IsMale:!1},{voice:"en-KE-ChilembaNeural",IsMale:!0},{voice:"en-NG-AbeoNeural",IsMale:!0},{voice:"en-NG-EzinneNeural",IsMale:!1},{voice:"en-NZ-MitchellNeural",IsMale:!0},{voice:"en-NZ-MollyNeural",IsMale:!1},{voice:"en-PH-JamesNeural",IsMale:!0},{voice:"en-PH-RosaNeural",IsMale:!1},{voice:"en-SG-LunaNeural",IsMale:!1},{voice:"en-SG-WayneNeural",IsMale:!0},{voice:"en-TZ-ElimuNeural",IsMale:!0},{voice:"en-TZ-ImaniNeural",IsMale:!1},{voice:"en-US-AmberNeural",IsMale:!1},{voice:"en-US-AnaNeural",IsMale:!1},{voice:"en-US-AriaNeural",IsMale:!1},{voice:"en-US-AshleyNeural",IsMale:!1},{voice:"en-US-BrandonNeural",IsMale:!0},{voice:"en-US-ChristopherNeural",IsMale:!0},{voice:"en-US-CoraNeural",IsMale:!1},{voice:"en-US-DavisNeural",IsMale:!0},{voice:"en-US-ElizabethNeural",IsMale:!1},{voice:"en-US-EricNeural",IsMale:!0},{voice:"en-US-GuyNeural",IsMale:!0},{voice:"en-US-JacobNeural",IsMale:!0},{voice:"en-US-JaneNeural",IsMale:!1},{voice:"en-US-JasonNeural",IsMale:!0},{voice:"en-US-JennyMultilingualNeural",IsMale:!1},{voice:"en-US-JennyNeural",IsMale:!1},{voice:"en-US-MichelleNeural",IsMale:!1},{voice:"en-US-MonicaNeural",IsMale:!1},{voice:"en-US-NancyNeural",IsMale:!1},{voice:"en-US-RogerNeural",IsMale:!0},{voice:"en-US-SaraNeural",IsMale:!1},{voice:"en-US-SteffanNeural",IsMale:!0},{voice:"en-US-TonyNeural",IsMale:!0},{voice:"en-ZA-LeahNeural",IsMale:!1},{voice:"en-ZA-LukeNeural",IsMale:!0},{voice:"es-AR-ElenaNeural",IsMale:!1},{voice:"es-AR-TomasNeural",IsMale:!0},{voice:"es-BO-MarceloNeural",IsMale:!0},{voice:"es-BO-SofiaNeural",IsMale:!1},{voice:"es-CL-CatalinaNeural",IsMale:!1},{voice:"es-CL-LorenzoNeural",IsMale:!0},{voice:"es-CO-GonzaloNeural",IsMale:!0},{voice:"es-CO-SalomeNeural",IsMale:!1},{voice:"es-CR-JuanNeural",IsMale:!0},{voice:"es-CR-MariaNeural",IsMale:!1},{voice:"es-CU-BelkysNeural",IsMale:!1},{voice:"es-CU-ManuelNeural",IsMale:!0},{voice:"es-DO-EmilioNeural",IsMale:!0},{voice:"es-DO-RamonaNeural",IsMale:!1},{voice:"es-EC-AndreaNeural",IsMale:!1},{voice:"es-EC-LuisNeural",IsMale:!0},{voice:"es-ES-AbrilNeural",IsMale:!1},{voice:"es-ES-AlvaroNeural",IsMale:!0},{voice:"es-ES-ArnauNeural",IsMale:!0},{voice:"es-ES-DarioNeural",IsMale:!0},{voice:"es-ES-EliasNeural",IsMale:!0},{voice:"es-ES-ElviraNeural",IsMale:!1},{voice:"es-ES-EstrellaNeural",IsMale:!1},{voice:"es-ES-IreneNeural",IsMale:!1},{voice:"es-ES-LaiaNeural",IsMale:!1},{voice:"es-ES-LiaNeural",IsMale:!1},{voice:"es-ES-NilNeural",IsMale:!0},{voice:"es-ES-SaulNeural",IsMale:!0},{voice:"es-ES-TeoNeural",IsMale:!0},{voice:"es-ES-TrianaNeural",IsMale:!1},{voice:"es-ES-VeraNeural",IsMale:!1},{voice:"es-GQ-JavierNeural",IsMale:!0},{voice:"es-GQ-TeresaNeural",IsMale:!1},{voice:"es-GT-AndresNeural",IsMale:!0},{voice:"es-GT-MartaNeural",IsMale:!1},{voice:"es-HN-CarlosNeural",IsMale:!0},{voice:"es-HN-KarlaNeural",IsMale:!1},{voice:"es-MX-BeatrizNeural",IsMale:!1},{voice:"es-MX-CandelaNeural",IsMale:!1},{voice:"es-MX-CarlotaNeural",IsMale:!1},{voice:"es-MX-CecilioNeural",IsMale:!0},{voice:"es-MX-DaliaNeural",IsMale:!1},{voice:"es-MX-GerardoNeural",IsMale:!0},{voice:"es-MX-JorgeNeural",IsMale:!0},{voice:"es-MX-LarissaNeural",IsMale:!1},{voice:"es-MX-LibertoNeural",IsMale:!0},{voice:"es-MX-LucianoNeural",IsMale:!0},{voice:"es-MX-MarinaNeural",IsMale:!1},{voice:"es-MX-NuriaNeural",IsMale:!1},{voice:"es-MX-PelayoNeural",IsMale:!0},{voice:"es-MX-RenataNeural",IsMale:!1},{voice:"es-MX-YagoNeural",IsMale:!0},{voice:"es-NI-FedericoNeural",IsMale:!0},{voice:"es-NI-YolandaNeural",IsMale:!1},{voice:"es-PA-MargaritaNeural",IsMale:!1},{voice:"es-PA-RobertoNeural",IsMale:!0},{voice:"es-PE-AlexNeural",IsMale:!0},{voice:"es-PE-CamilaNeural",IsMale:!1},{voice:"es-PR-KarinaNeural",IsMale:!1},{voice:"es-PR-VictorNeural",IsMale:!0},{voice:"es-PY-MarioNeural",IsMale:!0},{voice:"es-PY-TaniaNeural",IsMale:!1},{voice:"es-SV-LorenaNeural",IsMale:!1},{voice:"es-SV-RodrigoNeural",IsMale:!0},{voice:"es-US-AlonsoNeural",IsMale:!0},{voice:"es-US-PalomaNeural",IsMale:!1},{voice:"es-UY-MateoNeural",IsMale:!0},{voice:"es-UY-ValentinaNeural",IsMale:!1},{voice:"es-VE-PaolaNeural",IsMale:!1},{voice:"es-VE-SebastianNeural",IsMale:!0},{voice:"et-EE-AnuNeural",IsMale:!1},{voice:"et-EE-KertNeural",IsMale:!0},{voice:"eu-ES-AinhoaNeural",IsMale:!1},{voice:"eu-ES-AnderNeural",IsMale:!0},{voice:"fa-IR-DilaraNeural",IsMale:!1},{voice:"fa-IR-FaridNeural",IsMale:!0},{voice:"fi-FI-HarriNeural",IsMale:!0},{voice:"fi-FI-NooraNeural",IsMale:!1},{voice:"fi-FI-SelmaNeural",IsMale:!1},{voice:"fil-PH-AngeloNeural",IsMale:!0},{voice:"fil-PH-BlessicaNeural",IsMale:!1},{voice:"fr-BE-CharlineNeural",IsMale:!1},{voice:"fr-BE-GerardNeural",IsMale:!0},{voice:"fr-CA-AntoineNeural",IsMale:!0},{voice:"fr-CA-JeanNeural",IsMale:!0},{voice:"fr-CA-SylvieNeural",IsMale:!1},{voice:"fr-CH-ArianeNeural",IsMale:!1},{voice:"fr-CH-FabriceNeural",IsMale:!0},{voice:"fr-FR-AlainNeural",IsMale:!0},{voice:"fr-FR-BrigitteNeural",IsMale:!1},{voice:"fr-FR-CelesteNeural",IsMale:!1},{voice:"fr-FR-ClaudeNeural",IsMale:!0},{voice:"fr-FR-CoralieNeural",IsMale:!1},{voice:"fr-FR-DeniseNeural",IsMale:!1},{voice:"fr-FR-EloiseNeural",IsMale:!1},{voice:"fr-FR-HenriNeural",IsMale:!0},{voice:"fr-FR-JacquelineNeural",IsMale:!1},{voice:"fr-FR-JeromeNeural",IsMale:!0},{voice:"fr-FR-JosephineNeural",IsMale:!1},{voice:"fr-FR-MauriceNeural",IsMale:!0},{voice:"fr-FR-YvesNeural",IsMale:!0},{voice:"fr-FR-YvetteNeural",IsMale:!1},{voice:"ga-IE-ColmNeural",IsMale:!0},{voice:"ga-IE-OrlaNeural",IsMale:!1},{voice:"gl-ES-RoiNeural",IsMale:!0},{voice:"gl-ES-SabelaNeural",IsMale:!1},{voice:"gu-IN-DhwaniNeural",IsMale:!1},{voice:"gu-IN-NiranjanNeural",IsMale:!0},{voice:"he-IL-AvriNeural",IsMale:!0},{voice:"he-IL-HilaNeural",IsMale:!1},{voice:"hi-IN-MadhurNeural",IsMale:!0},{voice:"hi-IN-SwaraNeural",IsMale:!1},{voice:"hr-HR-GabrijelaNeural",IsMale:!1},{voice:"hr-HR-SreckoNeural",IsMale:!0},{voice:"hu-HU-NoemiNeural",IsMale:!1},{voice:"hu-HU-TamasNeural",IsMale:!0},{voice:"hy-AM-AnahitNeural",IsMale:!1},{voice:"hy-AM-HaykNeural",IsMale:!0},{voice:"id-ID-ArdiNeural",IsMale:!0},{voice:"id-ID-GadisNeural",IsMale:!1},{voice:"is-IS-GudrunNeural",IsMale:!1},{voice:"is-IS-GunnarNeural",IsMale:!0},{voice:"it-IT-BenignoNeural",IsMale:!0},{voice:"it-IT-CalimeroNeural",IsMale:!0},{voice:"it-IT-CataldoNeural",IsMale:!0},{voice:"it-IT-DiegoNeural",IsMale:!0},{voice:"it-IT-ElsaNeural",IsMale:!1},{voice:"it-IT-FabiolaNeural",IsMale:!1},{voice:"it-IT-FiammaNeural",IsMale:!1},{voice:"it-IT-GianniNeural",IsMale:!0},{voice:"it-IT-ImeldaNeural",IsMale:!1},{voice:"it-IT-IrmaNeural",IsMale:!1},{voice:"it-IT-IsabellaNeural",IsMale:!1},{voice:"it-IT-LisandroNeural",IsMale:!0},{voice:"it-IT-PalmiraNeural",IsMale:!1},{voice:"it-IT-PierinaNeural",IsMale:!1},{voice:"it-IT-RinaldoNeural",IsMale:!0},{voice:"ja-JP-AoiNeural",IsMale:!1},{voice:"ja-JP-DaichiNeural",IsMale:!0},{voice:"ja-JP-KeitaNeural",IsMale:!0},{voice:"ja-JP-MayuNeural",IsMale:!1},{voice:"ja-JP-NanamiNeural",IsMale:!1},{voice:"ja-JP-NaokiNeural",IsMale:!0},{voice:"ja-JP-ShioriNeural",IsMale:!1},{voice:"jv-ID-DimasNeural",IsMale:!0},{voice:"jv-ID-SitiNeural",IsMale:!1},{voice:"ka-GE-EkaNeural",IsMale:!1},{voice:"ka-GE-GiorgiNeural",IsMale:!0},{voice:"kk-KZ-AigulNeural",IsMale:!1},{voice:"kk-KZ-DauletNeural",IsMale:!0},{voice:"km-KH-PisethNeural",IsMale:!0},{voice:"km-KH-SreymomNeural",IsMale:!1},{voice:"kn-IN-GaganNeural",IsMale:!0},{voice:"kn-IN-SapnaNeural",IsMale:!1},{voice:"ko-KR-BongJinNeural",IsMale:!0},{voice:"ko-KR-GookMinNeural",IsMale:!0},{voice:"ko-KR-InJoonNeural",IsMale:!0},{voice:"ko-KR-JiMinNeural",IsMale:!1},{voice:"ko-KR-SeoHyeonNeural",IsMale:!1},{voice:"ko-KR-SoonBokNeural",IsMale:!1},{voice:"ko-KR-SunHiNeural",IsMale:!1},{voice:"ko-KR-YuJinNeural",IsMale:!1},{voice:"lo-LA-ChanthavongNeural",IsMale:!0},{voice:"lo-LA-KeomanyNeural",IsMale:!1},{voice:"lt-LT-LeonasNeural",IsMale:!0},{voice:"lt-LT-OnaNeural",IsMale:!1},{voice:"lv-LV-EveritaNeural",IsMale:!1},{voice:"lv-LV-NilsNeural",IsMale:!0},{voice:"mk-MK-AleksandarNeural",IsMale:!0},{voice:"mk-MK-MarijaNeural",IsMale:!1},{voice:"ml-IN-MidhunNeural",IsMale:!0},{voice:"ml-IN-SobhanaNeural",IsMale:!1},{voice:"mn-MN-BataaNeural",IsMale:!0},{voice:"mn-MN-YesuiNeural",IsMale:!1},{voice:"mr-IN-AarohiNeural",IsMale:!1},{voice:"mr-IN-ManoharNeural",IsMale:!0},{voice:"ms-MY-OsmanNeural",IsMale:!0},{voice:"ms-MY-YasminNeural",IsMale:!1},{voice:"mt-MT-GraceNeural",IsMale:!1},{voice:"mt-MT-JosephNeural",IsMale:!0},{voice:"my-MM-NilarNeural",IsMale:!1},{voice:"my-MM-ThihaNeural",IsMale:!0},{voice:"nb-NO-FinnNeural",IsMale:!0},{voice:"nb-NO-IselinNeural",IsMale:!1},{voice:"nb-NO-PernilleNeural",IsMale:!1},{voice:"ne-NP-HemkalaNeural",IsMale:!1},{voice:"ne-NP-SagarNeural",IsMale:!0},{voice:"nl-BE-ArnaudNeural",IsMale:!0},{voice:"nl-BE-DenaNeural",IsMale:!1},{voice:"nl-NL-ColetteNeural",IsMale:!1},{voice:"nl-NL-FennaNeural",IsMale:!1},{voice:"nl-NL-MaartenNeural",IsMale:!0},{voice:"pl-PL-AgnieszkaNeural",IsMale:!1},{voice:"pl-PL-MarekNeural",IsMale:!0},{voice:"pl-PL-ZofiaNeural",IsMale:!1},{voice:"ps-AF-GulNawazNeural",IsMale:!0},{voice:"ps-AF-LatifaNeural",IsMale:!1},{voice:"pt-BR-AntonioNeural",IsMale:!0},{voice:"pt-BR-BrendaNeural",IsMale:!1},{voice:"pt-BR-DonatoNeural",IsMale:!0},{voice:"pt-BR-ElzaNeural",IsMale:!1},{voice:"pt-BR-FabioNeural",IsMale:!0},{voice:"pt-BR-FranciscaNeural",IsMale:!1},{voice:"pt-BR-GiovannaNeural",IsMale:!1},{voice:"pt-BR-HumbertoNeural",IsMale:!0},{voice:"pt-BR-JulioNeural",IsMale:!0},{voice:"pt-BR-LeilaNeural",IsMale:!1},{voice:"pt-BR-LeticiaNeural",IsMale:!1},{voice:"pt-BR-ManuelaNeural",IsMale:!1},{voice:"pt-BR-NicolauNeural",IsMale:!0},{voice:"pt-BR-ValerioNeural",IsMale:!0},{voice:"pt-BR-YaraNeural",IsMale:!1},{voice:"pt-PT-DuarteNeural",IsMale:!0},{voice:"pt-PT-FernandaNeural",IsMale:!1},{voice:"pt-PT-RaquelNeural",IsMale:!1},{voice:"ro-RO-AlinaNeural",IsMale:!1},{voice:"ro-RO-EmilNeural",IsMale:!0},{voice:"ru-RU-DariyaNeural",IsMale:!1},{voice:"ru-RU-DmitryNeural",IsMale:!0},{voice:"ru-RU-SvetlanaNeural",IsMale:!1},{voice:"si-LK-SameeraNeural",IsMale:!0},{voice:"si-LK-ThiliniNeural",IsMale:!1},{voice:"sk-SK-LukasNeural",IsMale:!0},{voice:"sk-SK-ViktoriaNeural",IsMale:!1},{voice:"sl-SI-PetraNeural",IsMale:!1},{voice:"sl-SI-RokNeural",IsMale:!0},{voice:"so-SO-MuuseNeural",IsMale:!0},{voice:"so-SO-UbaxNeural",IsMale:!1},{voice:"sq-AL-AnilaNeural",IsMale:!1},{voice:"sq-AL-IlirNeural",IsMale:!0},{voice:"sr-RS-NicholasNeural",IsMale:!0},{voice:"sr-RS-SophieNeural",IsMale:!1},{voice:"su-ID-JajangNeural",IsMale:!0},{voice:"su-ID-TutiNeural",IsMale:!1},{voice:"sv-SE-HilleviNeural",IsMale:!1},{voice:"sv-SE-MattiasNeural",IsMale:!0},{voice:"sv-SE-SofieNeural",IsMale:!1},{voice:"sw-KE-RafikiNeural",IsMale:!0},{voice:"sw-KE-ZuriNeural",IsMale:!1},{voice:"sw-TZ-DaudiNeural",IsMale:!0},{voice:"sw-TZ-RehemaNeural",IsMale:!1},{voice:"ta-IN-PallaviNeural",IsMale:!1},{voice:"ta-IN-ValluvarNeural",IsMale:!0},{voice:"ta-LK-KumarNeural",IsMale:!0},{voice:"ta-LK-SaranyaNeural",IsMale:!1},{voice:"ta-MY-KaniNeural",IsMale:!1},{voice:"ta-MY-SuryaNeural",IsMale:!0},{voice:"ta-SG-AnbuNeural",IsMale:!0},{voice:"ta-SG-VenbaNeural",IsMale:!1},{voice:"te-IN-MohanNeural",IsMale:!0},{voice:"te-IN-ShrutiNeural",IsMale:!1},{voice:"th-TH-AcharaNeural",IsMale:!1},{voice:"th-TH-NiwatNeural",IsMale:!0},{voice:"th-TH-PremwadeeNeural",IsMale:!1},{voice:"tr-TR-AhmetNeural",IsMale:!0},{voice:"tr-TR-EmelNeural",IsMale:!1},{voice:"uk-UA-OstapNeural",IsMale:!0},{voice:"uk-UA-PolinaNeural",IsMale:!1},{voice:"ur-IN-GulNeural",IsMale:!1},{voice:"ur-IN-SalmanNeural",IsMale:!0},{voice:"ur-PK-AsadNeural",IsMale:!0},{voice:"ur-PK-UzmaNeural",IsMale:!1},{voice:"uz-UZ-MadinaNeural",IsMale:!1},{voice:"uz-UZ-SardorNeural",IsMale:!0},{voice:"vi-VN-HoaiMyNeural",IsMale:!1},{voice:"vi-VN-NamMinhNeural",IsMale:!0},{voice:"wuu-CN-XiaotongNeural",IsMale:!1},{voice:"wuu-CN-YunzheNeural",IsMale:!0},{voice:"yue-CN-XiaoMinNeural",IsMale:!1},{voice:"yue-CN-YunSongNeural",IsMale:!0},{voice:"zh-CN-XiaochenNeural",IsMale:!1},{voice:"zh-CN-XiaohanNeural",IsMale:!1},{voice:"zh-CN-XiaomengNeural",IsMale:!1},{voice:"zh-CN-XiaomoNeural",IsMale:!1},{voice:"zh-CN-XiaoqiuNeural",IsMale:!1},{voice:"zh-CN-XiaoruiNeural",IsMale:!1},{voice:"zh-CN-XiaoshuangNeural",IsMale:!1},{voice:"zh-CN-XiaoxiaoNeural",IsMale:!1},{voice:"zh-CN-XiaoxuanNeural",IsMale:!1},{voice:"zh-CN-XiaoyanNeural",IsMale:!1},{voice:"zh-CN-XiaoyiNeural",IsMale:!1},{voice:"zh-CN-XiaoyouNeural",IsMale:!1},{voice:"zh-CN-XiaozhenNeural",IsMale:!1},{voice:"zh-CN-YunfengNeural",IsMale:!0},{voice:"zh-CN-YunhaoNeural",IsMale:!0},{voice:"zh-CN-YunjianNeural",IsMale:!0},{voice:"zh-CN-YunxiaNeural",IsMale:!0},{voice:"zh-CN-YunxiNeural",IsMale:!0},{voice:"zh-CN-YunyangNeural",IsMale:!0},{voice:"zh-CN-YunyeNeural",IsMale:!0},{voice:"zh-CN-YunzeNeural",IsMale:!0},{voice:"zh-CN-henan-YundengNeural",IsMale:!0},{voice:"zh-CN-liaoning-XiaobeiNeural",IsMale:!1},{voice:"zh-CN-shaanxi-XiaoniNeural",IsMale:!1},{voice:"zh-CN-shandong-YunxiangNeural",IsMale:!0},{voice:"zh-CN-sichuan-YunxiNeural",IsMale:!0},{voice:"zh-HK-HiuGaaiNeural",IsMale:!1},{voice:"zh-HK-HiuMaanNeural",IsMale:!1},{voice:"zh-HK-WanLungNeural",IsMale:!0},{voice:"zh-TW-HsiaoChenNeural",IsMale:!1},{voice:"zh-TW-HsiaoYuNeural",IsMale:!1},{voice:"zh-TW-YunJheNeural",IsMale:!0},{voice:"zu-ZA-ThandoNeural",IsMale:!1},{voice:"zu-ZA-ThembaNeural",IsMale:!0}]},9556:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RenderTargetHeight=t.RenderTargetWidth=t.CubismLoggingLevel=t.DebugTouchLogEnable=t.DebugLogEnable=t.PriorityForce=t.PriorityNormal=t.PriorityIdle=t.PriorityNone=t.HitAreaNameBody=t.HitAreaNameHead=t.MotionGroupTapBody=t.MotionGroupIdle=t.ModelDirSize=t.ModelDir=t.PowerImageName=t.GearImageName=t.BackImageName=t.ResourcesPath=t.ViewLogicalMaxTop=t.ViewLogicalMaxBottom=t.ViewLogicalMaxRight=t.ViewLogicalMaxLeft=t.ViewLogicalTop=t.ViewLogicalBottom=t.ViewLogicalRight=t.ViewLogicalLeft=t.ViewMinScale=t.ViewMaxScale=t.ViewScale=t.CanvasSize=void 0;var r=i(1076);t.CanvasSize="auto",t.ViewScale=1,t.ViewMaxScale=2,t.ViewMinScale=.8,t.ViewLogicalLeft=-1,t.ViewLogicalRight=1,t.ViewLogicalBottom=-1,t.ViewLogicalTop=1,t.ViewLogicalMaxLeft=-2,t.ViewLogicalMaxRight=2,t.ViewLogicalMaxBottom=-2,t.ViewLogicalMaxTop=2,t.ResourcesPath="./Resources/",t.BackImageName="back_class_normal.png",t.GearImageName="icon_gear.png",t.PowerImageName="CloseNormal.png",t.ModelDir=["Haru","Hiyori","Mark","Natori","Rice","Mao"],t.ModelDirSize=t.ModelDir.length,t.MotionGroupIdle="Idle",t.MotionGroupTapBody="TapBody",t.HitAreaNameHead="Head",t.HitAreaNameBody="Body",t.PriorityNone=0,t.PriorityIdle=1,t.PriorityNormal=2,t.PriorityForce=3,t.DebugLogEnable=!0,t.DebugTouchLogEnable=!1,t.CubismLoggingLevel=r.LogLevel.LogLevel_Verbose,t.RenderTargetWidth=1900,t.RenderTargetHeight=1e3},7551:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppDelegate=t.frameBuffer=t.gl=t.s_instance=t.canvas=void 0;var n=i(1076),s=o(i(9556)),u=i(6424),l=i(1986),c=i(3938),h=i(4585);t.canvas=null,t.s_instance=null,t.gl=null,t.frameBuffer=null;var p=function(){function e(){this._captured=!1,this._mouseX=0,this._mouseY=0,this._isEnd=!1,this._cubismOption=new n.Option,this._view=new h.LAppView,this._textureManager=new c.LAppTextureManager}return e.getInstance=function(){return null==t.s_instance&&(t.s_instance=new e),t.s_instance},e.releaseInstance=function(){null!=t.s_instance&&t.s_instance.release(),t.s_instance=null},e.prototype.initialize=function(){return t.canvas=document.createElement("canvas"),"auto"===s.CanvasSize?this._resizeCanvas():(t.canvas.width=s.CanvasSize.width,t.canvas.height=s.CanvasSize.height),t.gl=t.canvas.getContext("webgl")||t.canvas.getContext("experimental-webgl"),t.gl?(document.getElementById("character").appendChild(t.canvas),t.frameBuffer||(t.frameBuffer=t.gl.getParameter(t.gl.FRAMEBUFFER_BINDING)),t.gl.enable(t.gl.BLEND),t.gl.blendFunc(t.gl.SRC_ALPHA,t.gl.ONE_MINUS_SRC_ALPHA),"ontouchend"in t.canvas?(t.canvas.ontouchstart=m,t.canvas.ontouchmove=f,t.canvas.ontouchend=y,t.canvas.ontouchcancel=v):(t.canvas.onmousedown=d,t.canvas.onmousemove=g,t.canvas.onmouseup=_),this._view.initialize(),this.initializeCubism(),!0):(alert("Cannot initialize WebGL. This browser does not support."),t.gl=null,document.body.innerHTML="This browser does not support the <code>&lt;canvas&gt;</code> element.",!1)},e.prototype.onResize=function(){this._resizeCanvas(),this._view.initialize(),this._view.initializeSprite();var e=[0,0,t.canvas.width,t.canvas.height];t.gl.viewport(e[0],e[1],e[2],e[3])},e.prototype.release=function(){this._textureManager.release(),this._textureManager=null,this._view.release(),this._view=null,u.LAppLive2DManager.releaseInstance(),n.CubismFramework.dispose()},e.prototype.run=function(){var e=this,i=function(){null!=t.s_instance&&(l.LAppPal.updateTime(),t.gl.clearColor(0,0,0,1),t.gl.enable(t.gl.DEPTH_TEST),t.gl.depthFunc(t.gl.LEQUAL),t.gl.clear(t.gl.COLOR_BUFFER_BIT|t.gl.DEPTH_BUFFER_BIT),t.gl.clearDepth(1),t.gl.enable(t.gl.BLEND),t.gl.blendFunc(t.gl.SRC_ALPHA,t.gl.ONE_MINUS_SRC_ALPHA),e._view.render(),requestAnimationFrame(i))};i()},e.prototype.createShader=function(){var e=t.gl.createShader(t.gl.VERTEX_SHADER);if(null==e)return l.LAppPal.printMessage("failed to create vertexShader"),null;t.gl.shaderSource(e,"precision mediump float;attribute vec3 position;attribute vec2 uv;varying vec2 vuv;void main(void){   gl_Position = vec4(position, 1.0);   vuv = uv;}"),t.gl.compileShader(e);var i=t.gl.createShader(t.gl.FRAGMENT_SHADER);if(null==i)return l.LAppPal.printMessage("failed to create fragmentShader"),null;t.gl.shaderSource(i,"precision mediump float;varying vec2 vuv;uniform sampler2D texture;void main(void){   gl_FragColor = texture2D(texture, vuv);}"),t.gl.compileShader(i);var r=t.gl.createProgram();return t.gl.attachShader(r,e),t.gl.attachShader(r,i),t.gl.deleteShader(e),t.gl.deleteShader(i),t.gl.linkProgram(r),t.gl.useProgram(r),r},e.prototype.getView=function(){return this._view},e.prototype.getTextureManager=function(){return this._textureManager},e.prototype.startVoiceConversation=function(e,t){u.LAppLive2DManager.getInstance().startVoiceConversation(e,t)},e.prototype.startTextConversation=function(e,t){u.LAppLive2DManager.getInstance().startTextConversation(e,t)},e.prototype.initializeCubism=function(){this._cubismOption.logFunction=l.LAppPal.printMessage,this._cubismOption.loggingLevel=s.CubismLoggingLevel,n.CubismFramework.startUp(this._cubismOption),n.CubismFramework.initialize(),u.LAppLive2DManager.getInstance(),l.LAppPal.updateTime(),this._view.initializeSprite()},e.prototype._resizeCanvas=function(){t.canvas.width=window.innerWidth/2,t.canvas.height=window.innerHeight},e}();function d(e){if(p.getInstance()._view){p.getInstance()._captured=!0;var t=e.pageX,i=e.pageY;p.getInstance()._view.onTouchesBegan(t,i)}else l.LAppPal.printMessage("view notfound")}function g(e){if(p.getInstance()._captured)if(p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.clientX-t.left,r=e.clientY-t.top;p.getInstance()._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")}function _(e){if(p.getInstance()._captured=!1,p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.clientX-t.left,r=e.clientY-t.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function m(e){if(p.getInstance()._view){p.getInstance()._captured=!0;var t=e.changedTouches[0].pageX,i=e.changedTouches[0].pageY;p.getInstance()._view.onTouchesBegan(t,i)}else l.LAppPal.printMessage("view notfound")}function f(e){if(p.getInstance()._captured)if(p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.changedTouches[0].clientX-t.left,r=e.changedTouches[0].clientY-t.top;p.getInstance()._view.onTouchesMoved(i,r)}else l.LAppPal.printMessage("view notfound")}function y(e){if(p.getInstance()._captured=!1,p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.changedTouches[0].clientX-t.left,r=e.changedTouches[0].clientY-t.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}function v(e){if(p.getInstance()._captured=!1,p.getInstance()._view){var t=e.target.getBoundingClientRect(),i=e.changedTouches[0].clientX-t.left,r=e.changedTouches[0].clientY-t.top;p.getInstance()._view.onTouchesEnded(i,r)}else l.LAppPal.printMessage("view notfound")}t.LAppDelegate=p},6424:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppLive2DManager=t.s_instance=void 0;var n=i(7633),s=i(5001),u=i(8046),l=o(i(9556)),c=i(7551),h=i(398),p=i(1986);t.s_instance=null;var d=function(){function e(){this._finishedMotion=function(e){p.LAppPal.printMessage("Motion Finished:"),console.log(e)},this._viewMatrix=new n.CubismMatrix44,this._models=new s.csmVector,this._sceneIndex=0,this.changeScene(this._sceneIndex)}return e.getInstance=function(){return null==t.s_instance&&(t.s_instance=new e),t.s_instance},e.releaseInstance=function(){null!=t.s_instance&&(t.s_instance=void 0),t.s_instance=null},e.prototype.getModel=function(e){return e<this._models.getSize()?this._models.at(e):null},e.prototype.releaseAllModel=function(){for(var e=0;e<this._models.getSize();e++)this._models.at(e).release(),this._models.set(e,null);this._models.clear()},e.prototype.onDrag=function(e,t){for(var i=0;i<this._models.getSize();i++){var r=this.getModel(i);r&&r.setDragging(e,t)}},e.prototype.onTap=function(e,t){var i=this;l.DebugLogEnable&&p.LAppPal.printMessage("[APP]tap point: {x: ".concat(e.toFixed(2)," y: ").concat(t.toFixed(2),"}"));for(var r=function(r){if(a._models.at(r).hitTest(l.HitAreaNameHead,e,t))l.DebugLogEnable&&p.LAppPal.printMessage("[APP]hit area: [".concat(l.HitAreaNameHead,"]")),a._models.at(r).setRandomExpression();else if(a._models.at(r).hitTest(l.HitAreaNameBody,e,t)){l.DebugLogEnable&&p.LAppPal.printMessage("[APP]hit area: [".concat(l.HitAreaNameBody,"]"));var o=document.getElementById("prompt").value,n=document.getElementById("language").value,s=new u.AzureAi;s.getOpenAiAnswer(o).then((function(e){return s.getSpeechUrl(n,e)})).then((function(e){i._models.at(r)._wavFileHandler.loadWavFile(e),i._models.at(r).startRandomMotion(l.MotionGroupTapBody,l.PriorityNormal,i._finishedMotion)}))}},a=this,o=0;o<this._models.getSize();o++)r(o)},e.prototype.startTextConversation=function(e,t){for(var i=this,r=function(r){if(l.DebugLogEnable){p.LAppPal.printMessage("startConversation");var a=new u.AzureAi;a.getOpenAiAnswer(t).then((function(t){return a.getSpeechUrl(e,t)})).then((function(e){i._models.at(r)._wavFileHandler.loadWavFile(e),i._models.at(r).startRandomMotion(l.MotionGroupTapBody,l.PriorityNormal,i._finishedMotion)}))}},a=0;a<this._models.getSize();a++)r(a)},e.prototype.startVoiceConversation=function(e,t){for(var i=this,r=function(r){if(l.DebugLogEnable){p.LAppPal.printMessage("startConversation");var a=new u.AzureAi;a.getTextFromSpeech(e,t).then((function(e){return a.getOpenAiAnswer(e)})).then((function(t){return a.getSpeechUrl(e,t)})).then((function(e){i._models.at(r)._wavFileHandler.loadWavFile(e),i._models.at(r).startRandomMotion(l.MotionGroupTapBody,l.PriorityNormal,i._finishedMotion)}))}},a=0;a<this._models.getSize();a++)r(a)},e.prototype.onUpdate=function(){for(var e=c.canvas.width,t=c.canvas.height,i=this._models.getSize(),r=0;r<i;++r){var a=new n.CubismMatrix44,o=this.getModel(r);o.getModel()&&(o.getModel().getCanvasWidth()>1&&e<t?(o.getModelMatrix().setWidth(2),a.scale(1,e/t)):a.scale(t/e,1),null!=this._viewMatrix&&a.multiplyByMatrix(this._viewMatrix)),o.update(),o.draw(a)}},e.prototype.nextScene=function(){var e=(this._sceneIndex+1)%l.ModelDirSize;this.changeScene(e)},e.prototype.changeScene=function(e){this._sceneIndex=e,l.DebugLogEnable&&p.LAppPal.printMessage("[APP]model index: ".concat(this._sceneIndex));var t=l.ModelDir[e],i=l.ResourcesPath+t+"/",r=l.ModelDir[e];r+=".model3.json",this.releaseAllModel(),this._models.pushBack(new h.LAppModel),this._models.at(0).loadAssets(i,r)},e.prototype.setViewMatrix=function(e){for(var t=0;t<16;t++)this._viewMatrix.getArray()[t]=e.getArray()[t]},e}();t.LAppLive2DManager=d},398:function(e,t,i){"use strict";var r,a=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}),o=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),n=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&o(t,e,i);return n(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppModel=void 0,i(7147);var u,l=i(1343),c=i(9868),h=i(6332),p=i(4605),d=i(1076),g=i(4693),_=i(193),m=i(1267),f=i(4313),y=i(5001),v=i(8945),b=s(i(9556)),M=i(7551),C=i(1986),S=i(5364);!function(e){e[e.LoadAssets=0]="LoadAssets",e[e.LoadModel=1]="LoadModel",e[e.WaitLoadModel=2]="WaitLoadModel",e[e.LoadExpression=3]="LoadExpression",e[e.WaitLoadExpression=4]="WaitLoadExpression",e[e.LoadPhysics=5]="LoadPhysics",e[e.WaitLoadPhysics=6]="WaitLoadPhysics",e[e.LoadPose=7]="LoadPose",e[e.WaitLoadPose=8]="WaitLoadPose",e[e.SetupEyeBlink=9]="SetupEyeBlink",e[e.SetupBreath=10]="SetupBreath",e[e.LoadUserData=11]="LoadUserData",e[e.WaitLoadUserData=12]="WaitLoadUserData",e[e.SetupEyeBlinkIds=13]="SetupEyeBlinkIds",e[e.SetupLipSyncIds=14]="SetupLipSyncIds",e[e.SetupLayout=15]="SetupLayout",e[e.LoadMotion=16]="LoadMotion",e[e.WaitLoadMotion=17]="WaitLoadMotion",e[e.CompleteInitialize=18]="CompleteInitialize",e[e.CompleteSetupModel=19]="CompleteSetupModel",e[e.LoadTexture=20]="LoadTexture",e[e.WaitLoadTexture=21]="WaitLoadTexture",e[e.CompleteSetup=22]="CompleteSetup"}(u||(u={}));var P=function(e){function t(){var t=e.call(this)||this;return t._modelSetting=null,t._modelHomeDir=null,t._userTimeSeconds=0,t._eyeBlinkIds=new y.csmVector,t._lipSyncIds=new y.csmVector,t._motions=new f.csmMap,t._expressions=new f.csmMap,t._hitArea=new y.csmVector,t._userArea=new y.csmVector,t._idParamAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleX),t._idParamAngleY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleY),t._idParamAngleZ=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamAngleZ),t._idParamEyeBallX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallX),t._idParamEyeBallY=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamEyeBallY),t._idParamBodyAngleX=d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBodyAngleX),t._state=u.LoadAssets,t._expressionCount=0,t._textureCount=0,t._motionCount=0,t._allMotionCount=0,t._wavFileHandler=new S.LAppWavFileHandler,t}return a(t,e),t.prototype.loadAssets=function(e,t){var i=this;this._modelHomeDir=e,fetch("".concat(this._modelHomeDir).concat(t)).then((function(e){return e.arrayBuffer()})).then((function(e){var t=new c.CubismModelSettingJson(e,e.byteLength);i._state=u.LoadModel,i.setupModel(t)}))},t.prototype.setupModel=function(e){var t=this;if(this._updating=!0,this._initialized=!1,this._modelSetting=e,""!=this._modelSetting.getModelFileName()){var i=this._modelSetting.getModelFileName();fetch("".concat(this._modelHomeDir).concat(i)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadModel(e),t._state=u.LoadExpression,r()})),this._state=u.WaitLoadModel}else C.LAppPal.printMessage("Model data does not exist.");var r=function(){if(t._modelSetting.getExpressionCount()>0){for(var e=t._modelSetting.getExpressionCount(),i=function(i){var r=t._modelSetting.getExpressionName(i),o=t._modelSetting.getExpressionFileName(i);fetch("".concat(t._modelHomeDir).concat(o)).then((function(e){return e.arrayBuffer()})).then((function(i){var o=t.loadExpression(i,i.byteLength,r);null!=t._expressions.getValue(r)&&(_.ACubismMotion.delete(t._expressions.getValue(r)),t._expressions.setValue(r,null)),t._expressions.setValue(r,o),t._expressionCount++,t._expressionCount>=e&&(t._state=u.LoadPhysics,a())}))},r=0;r<e;r++)i(r);t._state=u.WaitLoadExpression}else t._state=u.LoadPhysics,a()},a=function(){if(""!=t._modelSetting.getPhysicsFileName()){var e=t._modelSetting.getPhysicsFileName();fetch("".concat(t._modelHomeDir).concat(e)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadPhysics(e,e.byteLength),t._state=u.LoadPose,o()})),t._state=u.WaitLoadPhysics}else t._state=u.LoadPose,o()},o=function(){if(""!=t._modelSetting.getPoseFileName()){var e=t._modelSetting.getPoseFileName();fetch("".concat(t._modelHomeDir).concat(e)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadPose(e,e.byteLength),t._state=u.SetupEyeBlink,n()})),t._state=u.WaitLoadPose}else t._state=u.SetupEyeBlink,n()},n=function(){t._modelSetting.getEyeBlinkParameterCount()>0&&(t._eyeBlink=p.CubismEyeBlink.create(t._modelSetting),t._state=u.SetupBreath),s()},s=function(){t._breath=h.CubismBreath.create();var e=new y.csmVector;e.pushBack(new h.BreathParameterData(t._idParamAngleX,0,15,6.5345,.5)),e.pushBack(new h.BreathParameterData(t._idParamAngleY,0,8,3.5345,.5)),e.pushBack(new h.BreathParameterData(t._idParamAngleZ,0,10,5.5345,.5)),e.pushBack(new h.BreathParameterData(t._idParamBodyAngleX,0,4,15.5345,.5)),e.pushBack(new h.BreathParameterData(d.CubismFramework.getIdManager().getId(l.CubismDefaultParameterId.ParamBreath),.5,.5,3.2345,1)),t._breath.setParameters(e),t._state=u.LoadUserData,c()},c=function(){if(""!=t._modelSetting.getUserDataFile()){var e=t._modelSetting.getUserDataFile();fetch("".concat(t._modelHomeDir).concat(e)).then((function(e){return e.arrayBuffer()})).then((function(e){t.loadUserData(e,e.byteLength),t._state=u.SetupEyeBlinkIds,g()})),t._state=u.WaitLoadUserData}else t._state=u.SetupEyeBlinkIds,g()},g=function(){for(var e=t._modelSetting.getEyeBlinkParameterCount(),i=0;i<e;++i)t._eyeBlinkIds.pushBack(t._modelSetting.getEyeBlinkParameterId(i));t._state=u.SetupLipSyncIds,m()},m=function(){for(var e=t._modelSetting.getLipSyncParameterCount(),i=0;i<e;++i)t._lipSyncIds.pushBack(t._modelSetting.getLipSyncParameterId(i));t._state=u.SetupLayout,b()},b=function(){var e=new f.csmMap;null!=t._modelSetting&&null!=t._modelMatrix?(t._modelSetting.getLayoutMap(e),t._modelMatrix.setupFromLayout(e),t._state=u.LoadMotion,S()):(0,v.CubismLogError)("Failed to setupLayout().")},S=function(){t._state=u.WaitLoadMotion,t._model.saveParameters(),t._allMotionCount=0,t._motionCount=0;for(var e=[],i=t._modelSetting.getMotionGroupCount(),r=0;r<i;r++)e[r]=t._modelSetting.getMotionGroupName(r),t._allMotionCount+=t._modelSetting.getMotionCount(e[r]);for(r=0;r<i;r++)t.preLoadMotionGroup(e[r]);0==i&&(t._state=u.LoadTexture,t._motionManager.stopAllMotions(),t._updating=!1,t._initialized=!0,t.createRenderer(),t.setupTextures(),t.getRenderer().startUp(M.gl))}},t.prototype.setupTextures=function(){var e=this;if(this._state==u.LoadTexture){for(var t=this._modelSetting.getTextureCount(),i=function(i){if(""==r._modelSetting.getTextureFileName(i))return console.log("getTextureFileName null"),"continue";var a=r._modelSetting.getTextureFileName(i);a=r._modelHomeDir+a,M.LAppDelegate.getInstance().getTextureManager().createTextureFromPngFile(a,!0,(function(r){e.getRenderer().bindTexture(i,r.id),e._textureCount++,e._textureCount>=t&&(e._state=u.CompleteSetup)})),r.getRenderer().setIsPremultipliedAlpha(!0)},r=this,a=0;a<t;a++)i(a);this._state=u.WaitLoadTexture}},t.prototype.reloadRenderer=function(){this.deleteRenderer(),this.createRenderer(),this.setupTextures()},t.prototype.update=function(){if(this._state==u.CompleteSetup){var e=C.LAppPal.getDeltaTime();this._userTimeSeconds+=e,this._dragManager.update(e),this._dragX=this._dragManager.getX(),this._dragY=this._dragManager.getY();var t=!1;if(this._model.loadParameters(),this._motionManager.isFinished()?this.startRandomMotion(b.MotionGroupIdle,b.PriorityIdle):t=this._motionManager.updateMotion(this._model,e),this._model.saveParameters(),t||null!=this._eyeBlink&&this._eyeBlink.updateParameters(this._model,e),null!=this._expressionManager&&this._expressionManager.updateMotion(this._model,e),this._model.addParameterValueById(this._idParamAngleX,30*this._dragX),this._model.addParameterValueById(this._idParamAngleY,30*this._dragY),this._model.addParameterValueById(this._idParamAngleZ,this._dragX*this._dragY*-30),this._model.addParameterValueById(this._idParamBodyAngleX,10*this._dragX),this._model.addParameterValueById(this._idParamEyeBallX,this._dragX),this._model.addParameterValueById(this._idParamEyeBallY,this._dragY),null!=this._breath&&this._breath.updateParameters(this._model,e),null!=this._physics&&this._physics.evaluate(this._model,e),this._lipsync){var i;this._wavFileHandler.update(e),i=this._wavFileHandler.getRms();for(var r=0;r<this._lipSyncIds.getSize();++r)this._model.addParameterValueById(this._lipSyncIds.at(r),i,.8)}null!=this._pose&&this._pose.updateParameters(this._model,e);var a=document.getElementById("voice");a.src!==this._audioSrc&&(this._audioSrc=a.src,a.play()),this._model.update()}},t.prototype.startMotion=function(e,t,i,r){var a=this;if(i==b.PriorityForce)this._motionManager.setReservePriority(i);else if(!this._motionManager.reserveMotion(i))return this._debugMode&&C.LAppPal.printMessage("[APP]can't start motion."),m.InvalidMotionQueueEntryHandleValue;var o=this._modelSetting.getMotionFileName(e,t),n="".concat(e,"_").concat(t),s=this._motions.getValue(n),u=!1;null==s?fetch("".concat(this._modelHomeDir).concat(o)).then((function(e){return e.arrayBuffer()})).then((function(i){s=a.loadMotion(i,i.byteLength,null,r);var o=a._modelSetting.getMotionFadeInTimeValue(e,t);o>=0&&s.setFadeInTime(o),(o=a._modelSetting.getMotionFadeOutTimeValue(e,t))>=0&&s.setFadeOutTime(o),s.setEffectIds(a._eyeBlinkIds,a._lipSyncIds),u=!0})):s.setFinishedMotionHandler(r);var l=this._modelSetting.getMotionSoundFileName(e,t);if(0!=l.localeCompare("")){var c=l;c=this._modelHomeDir+c,this._wavFileHandler.start(c)}return this._debugMode&&C.LAppPal.printMessage("[APP]start motion: [".concat(e,"_").concat(t)),this._motionManager.startMotionPriority(s,u,i)},t.prototype.startRandomMotion=function(e,t,i){if(0==this._modelSetting.getMotionCount(e))return m.InvalidMotionQueueEntryHandleValue;var r=Math.floor(Math.random()*this._modelSetting.getMotionCount(e));return this.startMotion(e,r,t,i)},t.prototype.setExpression=function(e){var t=this._expressions.getValue(e);this._debugMode&&C.LAppPal.printMessage("[APP]expression: [".concat(e,"]")),null!=t?this._expressionManager.startMotionPriority(t,!1,b.PriorityForce):this._debugMode&&C.LAppPal.printMessage("[APP]expression[".concat(e,"] is null"))},t.prototype.setRandomExpression=function(){if(0!=this._expressions.getSize())for(var e=Math.floor(Math.random()*this._expressions.getSize()),t=0;t<this._expressions.getSize();t++)if(t==e){var i=this._expressions._keyValues[t].first;return void this.setExpression(i)}},t.prototype.motionEventFired=function(e){(0,v.CubismLogInfo)("{0} is fired on LAppModel!!",e.s)},t.prototype.hitTest=function(e,t,i){if(this._opacity<1)return!1;for(var r=this._modelSetting.getHitAreasCount(),a=0;a<r;a++)if(this._modelSetting.getHitAreaName(a)==e){var o=this._modelSetting.getHitAreaId(a);return this.isHit(o,t,i)}return!1},t.prototype.preLoadMotionGroup=function(e){for(var t=this,i=function(i){var a=r._modelSetting.getMotionFileName(e,i),o="".concat(e,"_").concat(i);r._debugMode&&C.LAppPal.printMessage("[APP]load motion: ".concat(a," => [").concat(o,"]")),fetch("".concat(r._modelHomeDir).concat(a)).then((function(e){return e.arrayBuffer()})).then((function(r){var a=t.loadMotion(r,r.byteLength,o),n=t._modelSetting.getMotionFadeInTimeValue(e,i);n>=0&&a.setFadeInTime(n),(n=t._modelSetting.getMotionFadeOutTimeValue(e,i))>=0&&a.setFadeOutTime(n),a.setEffectIds(t._eyeBlinkIds,t._lipSyncIds),null!=t._motions.getValue(o)&&_.ACubismMotion.delete(t._motions.getValue(o)),t._motions.setValue(o,a),t._motionCount++,t._motionCount>=t._allMotionCount&&(t._state=u.LoadTexture,t._motionManager.stopAllMotions(),t._updating=!1,t._initialized=!0,t.createRenderer(),t.setupTextures(),t.getRenderer().startUp(M.gl))}))},r=this,a=0;a<this._modelSetting.getMotionCount(e);a++)i(a)},t.prototype.releaseMotions=function(){this._motions.clear()},t.prototype.releaseExpressions=function(){this._expressions.clear()},t.prototype.doDraw=function(){if(null!=this._model){var e=[0,0,M.canvas.width,M.canvas.height];this.getRenderer().setRenderState(M.frameBuffer,e),this.getRenderer().drawModel()}},t.prototype.draw=function(e){null!=this._model&&this._state==u.CompleteSetup&&(e.multiplyByMatrix(this._modelMatrix),this.getRenderer().setMvpMatrix(e),this.doDraw())},t}(g.CubismUserModel);t.LAppModel=P},1986:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LAppPal=void 0;var i=function(){function e(){}return e.loadFileAsBytes=function(e,t){fetch(e).then((function(e){return e.arrayBuffer()})).then((function(e){return t(e,e.byteLength)}))},e.getDeltaTime=function(){return this.s_deltaTime},e.updateTime=function(){this.s_currentFrame=Date.now(),this.s_deltaTime=(this.s_currentFrame-this.s_lastFrame)/1e3,this.s_lastFrame=this.s_currentFrame},e.printMessage=function(e){console.log(e)},e.lastUpdate=Date.now(),e.s_currentFrame=0,e.s_lastFrame=0,e.s_deltaTime=0,e}();t.LAppPal=i},5279:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rect=t.LAppSprite=void 0;var r=i(7551),a=function(){function e(e,t,i,r,a){this._rect=new o,this._rect.left=e-.5*i,this._rect.right=e+.5*i,this._rect.up=t+.5*r,this._rect.down=t-.5*r,this._texture=a,this._vertexBuffer=null,this._uvBuffer=null,this._indexBuffer=null,this._positionLocation=null,this._uvLocation=null,this._textureLocation=null,this._positionArray=null,this._uvArray=null,this._indexArray=null,this._firstDraw=!0}return e.prototype.release=function(){this._rect=null,r.gl.deleteTexture(this._texture),this._texture=null,r.gl.deleteBuffer(this._uvBuffer),this._uvBuffer=null,r.gl.deleteBuffer(this._vertexBuffer),this._vertexBuffer=null,r.gl.deleteBuffer(this._indexBuffer),this._indexBuffer=null},e.prototype.getTexture=function(){return this._texture},e.prototype.render=function(e){if(null!=this._texture){if(this._firstDraw){this._positionLocation=r.gl.getAttribLocation(e,"position"),r.gl.enableVertexAttribArray(this._positionLocation),this._uvLocation=r.gl.getAttribLocation(e,"uv"),r.gl.enableVertexAttribArray(this._uvLocation),this._textureLocation=r.gl.getUniformLocation(e,"texture"),r.gl.uniform1i(this._textureLocation,0),this._uvArray=new Float32Array([1,0,0,0,0,1,1,1]),this._uvBuffer=r.gl.createBuffer();var t=r.canvas.width,i=r.canvas.height;this._positionArray=new Float32Array([(this._rect.right-.5*t)/(.5*t),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*t)/(.5*t),(this._rect.up-.5*i)/(.5*i),(this._rect.left-.5*t)/(.5*t),(this._rect.down-.5*i)/(.5*i),(this._rect.right-.5*t)/(.5*t),(this._rect.down-.5*i)/(.5*i)]),this._vertexBuffer=r.gl.createBuffer(),this._indexArray=new Uint16Array([0,1,2,3,2,0]),this._indexBuffer=r.gl.createBuffer(),this._firstDraw=!1}r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._uvBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._uvArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._uvLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ARRAY_BUFFER,this._vertexBuffer),r.gl.bufferData(r.gl.ARRAY_BUFFER,this._positionArray,r.gl.STATIC_DRAW),r.gl.vertexAttribPointer(this._positionLocation,2,r.gl.FLOAT,!1,0,0),r.gl.bindBuffer(r.gl.ELEMENT_ARRAY_BUFFER,this._indexBuffer),r.gl.bufferData(r.gl.ELEMENT_ARRAY_BUFFER,this._indexArray,r.gl.DYNAMIC_DRAW),r.gl.bindTexture(r.gl.TEXTURE_2D,this._texture),r.gl.drawElements(r.gl.TRIANGLES,this._indexArray.length,r.gl.UNSIGNED_SHORT,0)}},e.prototype.isHit=function(e,t){var i=r.canvas.height-t;return e>=this._rect.left&&e<=this._rect.right&&i<=this._rect.up&&i>=this._rect.down},e}();t.LAppSprite=a;var o=function(){};t.Rect=o},3938:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TextureInfo=t.LAppTextureManager=void 0;var r=i(5001),a=i(7551),o=function(){function e(){this._textures=new r.csmVector}return e.prototype.release=function(){for(var e=this._textures.begin();e.notEqual(this._textures.end());e.preIncrement())a.gl.deleteTexture(e.ptr().id);this._textures=null},e.prototype.createTextureFromPngFile=function(e,t,i){for(var r=this,o=function(r){if(r.ptr().fileName==e&&r.ptr().usePremultply==t)return r.ptr().img=new Image,r.ptr().img.onload=function(){return i(r.ptr())},r.ptr().img.src=e,{value:void 0}},s=this._textures.begin();s.notEqual(this._textures.end());s.preIncrement()){var u=o(s);if("object"==typeof u)return u.value}var l=new Image;l.onload=function(){var o=a.gl.createTexture();a.gl.bindTexture(a.gl.TEXTURE_2D,o),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_MIN_FILTER,a.gl.LINEAR_MIPMAP_LINEAR),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_MAG_FILTER,a.gl.LINEAR),t&&a.gl.pixelStorei(a.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),a.gl.texImage2D(a.gl.TEXTURE_2D,0,a.gl.RGBA,a.gl.RGBA,a.gl.UNSIGNED_BYTE,l),a.gl.generateMipmap(a.gl.TEXTURE_2D),a.gl.bindTexture(a.gl.TEXTURE_2D,null);var s=new n;null!=s&&(s.fileName=e,s.width=l.width,s.height=l.height,s.id=o,s.img=l,s.usePremultply=t,r._textures.pushBack(s)),i(s)},l.src=e},e.prototype.releaseTextures=function(){for(var e=0;e<this._textures.getSize();e++)this._textures.set(e,null);this._textures.clear()},e.prototype.releaseTextureByTexture=function(e){for(var t=0;t<this._textures.getSize();t++)if(this._textures.at(t).id==e){this._textures.set(t,null),this._textures.remove(t);break}},e.prototype.releaseTextureByFilePath=function(e){for(var t=0;t<this._textures.getSize();t++)if(this._textures.at(t).fileName==e){this._textures.set(t,null),this._textures.remove(t);break}},e}();t.LAppTextureManager=o;var n=function(){this.id=null,this.width=0,this.height=0};t.TextureInfo=n},4585:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.LAppView=void 0;var n=i(7633),s=i(3391),u=o(i(9556)),l=i(7551),c=i(6424),h=i(1986),p=i(5279),d=i(9307),g=function(){function e(){this._programId=null,this._back=null,this._gear=null,this._touchManager=new d.TouchManager,this._deviceToScreen=new n.CubismMatrix44,this._viewMatrix=new s.CubismViewMatrix}return e.prototype.initialize=function(){var e=l.canvas.width,t=l.canvas.height,i=e/t,r=-i,a=i,o=u.ViewLogicalLeft,n=u.ViewLogicalRight;if(this._viewMatrix.setScreenRect(r,a,o,n),this._viewMatrix.scale(u.ViewScale,u.ViewScale),this._deviceToScreen.loadIdentity(),e>t){var s=Math.abs(a-r);this._deviceToScreen.scaleRelative(s/e,-s/e)}else{var c=Math.abs(n-o);this._deviceToScreen.scaleRelative(c/t,-c/t)}this._deviceToScreen.translateRelative(.5*-e,.5*-t),this._viewMatrix.setMaxScale(u.ViewMaxScale),this._viewMatrix.setMinScale(u.ViewMinScale),this._viewMatrix.setMaxScreenRect(u.ViewLogicalMaxLeft,u.ViewLogicalMaxRight,u.ViewLogicalMaxBottom,u.ViewLogicalMaxTop)},e.prototype.release=function(){this._viewMatrix=null,this._touchManager=null,this._deviceToScreen=null,this._gear.release(),this._gear=null,this._back.release(),this._back=null,l.gl.deleteProgram(this._programId),this._programId=null},e.prototype.render=function(){l.gl.useProgram(this._programId),this._back&&this._back.render(this._programId),this._gear&&this._gear.render(this._programId),l.gl.flush();var e=c.LAppLive2DManager.getInstance();e.setViewMatrix(this._viewMatrix),e.onUpdate()},e.prototype.initializeSprite=function(){var e=this,t=l.canvas.width,i=l.canvas.height,r=l.LAppDelegate.getInstance().getTextureManager(),a=u.ResourcesPath,o="";o=u.BackImageName,r.createTextureFromPngFile(a+o,!1,(function(r){var a=.5*t,o=.5*i,n=2*r.width,s=.95*i;e._back=new p.LAppSprite(a,o,n,s,r.id)})),o=u.GearImageName,r.createTextureFromPngFile(a+o,!1,(function(r){var a=t-.5*r.width,o=i-.5*r.height,n=r.width,s=r.height;e._gear=new p.LAppSprite(a,o,n,s,r.id)})),null==this._programId&&(this._programId=l.LAppDelegate.getInstance().createShader())},e.prototype.onTouchesBegan=function(e,t){this._touchManager.touchesBegan(e,t)},e.prototype.onTouchesMoved=function(e,t){var i=this.transformViewX(this._touchManager.getX()),r=this.transformViewY(this._touchManager.getY());this._touchManager.touchesMoved(e,t),c.LAppLive2DManager.getInstance().onDrag(i,r)},e.prototype.onTouchesEnded=function(e,t){var i=c.LAppLive2DManager.getInstance();i.onDrag(0,0);var r=this._deviceToScreen.transformX(this._touchManager.getX()),a=this._deviceToScreen.transformY(this._touchManager.getY());u.DebugTouchLogEnable&&h.LAppPal.printMessage("[APP]touchesEnded x: ".concat(r," y: ").concat(a)),i.onTap(r,a)},e.prototype.transformViewX=function(e){var t=this._deviceToScreen.transformX(e);return this._viewMatrix.invertTransformX(t)},e.prototype.transformViewY=function(e){var t=this._deviceToScreen.transformY(e);return this._viewMatrix.invertTransformY(t)},e.prototype.transformScreenX=function(e){return this._deviceToScreen.transformX(e)},e.prototype.transformScreenY=function(e){return this._deviceToScreen.transformY(e)},e}();t.LAppView=g},5364:function(e,t){"use strict";var i=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))((function(a,o){function n(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(n,s)}u((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var i,r,a,o,n={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(u){return function(s){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(n=0)),n;)try{if(i=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return n.label++,{value:s[1],done:!1};case 5:n.label++,r=s[1],s=[0];continue;case 7:s=n.ops.pop(),n.trys.pop();continue;default:if(!((a=(a=n.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){n=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){n.label=s[1];break}if(6===s[0]&&n.label<a[1]){n.label=a[1],a=s;break}if(a&&n.label<a[2]){n.label=a[2],n.ops.push(s);break}a[2]&&n.ops.pop(),n.trys.pop();continue}s=t.call(e,n)}catch(e){s=[6,e],r=0}finally{i=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,u])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ByteReader=t.WavFileInfo=t.LAppWavFileHandler=t.s_instance=void 0,t.s_instance=null;var a=function(){function e(){var e=this;this._loadFiletoBytes=function(t,i){e._byteReader._fileByte=t,e._byteReader._fileDataView=new DataView(e._byteReader._fileByte),e._byteReader._fileSize=i},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new o,this._byteReader=new n}return e.getInstance=function(){return null==t.s_instance&&(t.s_instance=new e),t.s_instance},e.releaseInstance=function(){null!=t.s_instance&&(t.s_instance=void 0),t.s_instance=null},e.prototype.update=function(e){var t,i;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=e,(t=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate))>this._wavFileInfo._samplesPerChannel&&(t=this._wavFileInfo._samplesPerChannel),i=0;for(var r=0;r<this._wavFileInfo._numberOfChannels;r++)for(var a=this._sampleOffset;a<t;a++){var o=this._pcmData[r][a];i+=o*o}return i=Math.sqrt(i/(this._wavFileInfo._numberOfChannels*(t-this._sampleOffset))),this._lastRms=i,this._sampleOffset=t,!0},e.prototype.start=function(e){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0},e.prototype.getRms=function(){return this._lastRms},e.prototype.loadWavFile=function(e){var t=this,a=!1;return null!=this._pcmData&&this.releasePcmData(),i(t,void 0,void 0,(function(){var o,n,s,u,l;return r(this,(function(c){switch(c.label){case 0:return o=this._byteReader,[4,i(t,void 0,void 0,(function(){return r(this,(function(t){return[2,fetch(e).then((function(e){return e.arrayBuffer()}))]}))}))];case 1:if(o._fileByte=c.sent(),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)return[2,!1];this._wavFileInfo._fileName=e;try{if(!this._byteReader.getCheckSignature("RIFF"))throw a=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw a=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw a=!1,new Error('Cannot find Signeture "fmt".');if(n=this._byteReader.get32LittleEndian(),1!=this._byteReader.get16LittleEndian())throw a=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),n>16&&(this._byteReader._readOffset+=n-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw a=!1,new Error('Cannot find "data" Chunk.');for(s=this._byteReader.get32LittleEndian(),this._wavFileInfo._samplesPerChannel=8*s/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels),this._pcmData=new Array(this._wavFileInfo._numberOfChannels),l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(u=0;u<this._wavFileInfo._samplesPerChannel;u++)for(l=0;l<this._wavFileInfo._numberOfChannels;l++)this._pcmData[l][u]=this.getPcmSample();a=!0}catch(e){console.log(e)}return[2]}}))})),a},e.prototype.getPcmSample=function(){var e;switch(this._wavFileInfo._bitsPerSample){case 8:e=this._byteReader.get8()-128,e<<=24;break;case 16:e=this._byteReader.get16LittleEndian()<<16;break;case 24:e=this._byteReader.get24LittleEndian()<<8;break;default:e=0}return e/2147483647},e.prototype.releasePcmData=function(){for(var e=0;e<this._wavFileInfo._numberOfChannels;e++)delete this._pcmData[e];delete this._pcmData,this._pcmData=null},e}();t.LAppWavFileHandler=a;var o=function(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0};t.WavFileInfo=o;var n=function(){function e(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}return e.prototype.get8=function(){var e=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,e},e.prototype.get16LittleEndian=function(){var e=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,e},e.prototype.get24LittleEndian=function(){var e=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,e},e.prototype.get32LittleEndian=function(){var e=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,e},e.prototype.getCheckSignature=function(e){var t=new Uint8Array(4),i=(new TextEncoder).encode(e);if(4!=e.length)return!1;for(var r=0;r<4;r++)t[r]=this.get8();return t[0]==i[0]&&t[1]==i[1]&&t[2]==i[2]&&t[3]==i[3]},e}();t.ByteReader=n},8519:function(e,t,i){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,i,r){void 0===r&&(r=i);var a=Object.getOwnPropertyDescriptor(t,i);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,r,a)}:function(e,t,i,r){void 0===r&&(r=i),e[r]=t[i]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&r(t,e,i);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var n=i(7551),s=o(i(9556));window.onload=function(){0!=n.LAppDelegate.getInstance().initialize()&&n.LAppDelegate.getInstance().run()},window.onbeforeunload=function(){return n.LAppDelegate.releaseInstance()},window.onresize=function(){"auto"===s.CanvasSize&&n.LAppDelegate.getInstance().onResize()},window.startVoiceConversation=function(e,t){n.LAppDelegate.getInstance().startVoiceConversation(e,t)},window.startTextConversation=function(e,t){n.LAppDelegate.getInstance().startTextConversation(e,t)}},9307:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TouchManager=void 0;var i=function(){function e(){this._startX=0,this._startY=0,this._lastX=0,this._lastY=0,this._lastX1=0,this._lastY1=0,this._lastX2=0,this._lastY2=0,this._lastTouchDistance=0,this._deltaX=0,this._deltaY=0,this._scale=1,this._touchSingle=!1,this._flipAvailable=!1}return e.prototype.getCenterX=function(){return this._lastX},e.prototype.getCenterY=function(){return this._lastY},e.prototype.getDeltaX=function(){return this._deltaX},e.prototype.getDeltaY=function(){return this._deltaY},e.prototype.getStartX=function(){return this._startX},e.prototype.getStartY=function(){return this._startY},e.prototype.getScale=function(){return this._scale},e.prototype.getX=function(){return this._lastX},e.prototype.getY=function(){return this._lastY},e.prototype.getX1=function(){return this._lastX1},e.prototype.getY1=function(){return this._lastY1},e.prototype.getX2=function(){return this._lastX2},e.prototype.getY2=function(){return this._lastY2},e.prototype.isSingleTouch=function(){return this._touchSingle},e.prototype.isFlickAvailable=function(){return this._flipAvailable},e.prototype.disableFlick=function(){this._flipAvailable=!1},e.prototype.touchesBegan=function(e,t){this._lastX=e,this._lastY=t,this._startX=e,this._startY=t,this._lastTouchDistance=-1,this._flipAvailable=!0,this._touchSingle=!0},e.prototype.touchesMoved=function(e,t){this._lastX=e,this._lastY=t,this._lastTouchDistance=-1,this._touchSingle=!0},e.prototype.getFlickDistance=function(){return this.calculateDistance(this._startX,this._startY,this._lastX,this._lastY)},e.prototype.calculateDistance=function(e,t,i,r){return Math.sqrt((e-i)*(e-i)+(t-r)*(t-r))},e.prototype.calculateMovingAmount=function(e,t){if(e>0!=t>0)return 0;var i=e>0?1:-1,r=Math.abs(e),a=Math.abs(t);return i*(r<a?r:a)},e}();t.TouchManager=i},8966:function(e,t,i){const r=i(1760),a=i(4171);e.exports=class{mediaRecorder;stream;__data;async start(e={audio:!0,video:!1}){if("recording"===this.mediaRecorder?.state)return!0;const t=e||{audio:!0,video:!1};try{this.stream=await navigator.mediaDevices.getUserMedia(t),this.mediaRecorder=new MediaRecorder(this.stream),this.mediaRecorder.ondataavailable=e=>this.__data=e.data}catch(e){return console.error(e),!1}return this.mediaRecorder?.start(),!0}stop(){if("recording"!==this.mediaRecorder?.state)return!0;this.mediaRecorder.stop(),this.mediaRecorder.onstop=()=>{this.stream.getTracks().forEach((e=>e.stop())),this.mediaRecorder=void 0,this.stream=void 0}}async download(e=null,t=!1,i){if(this.__data)return await a(this.__data,t,e,i)}async getBlob(e=!1,t){if(this.__data)return await r(this.__data,e,t)}}},4171:function(e,t,i){const r=i(1760);e.exports=async function(e,t,i=null,a){const o=await r(e,t,a),n=document.createElement("a");n.href=window.URL.createObjectURL(o),n.download=i||`recording('${t?"32bit":"16bit"}).wav`,n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}},4952:function(e,t,i){e.exports.WavRecorder=i(8966),e.exports.getWaveBlob=i(1760),e.exports.downloadWav=i(4171)},1760:function(e){function t(e,t,i){for(let r=0;r<e.length;++r)t[i+r]=e.charCodeAt(r)}function i(e,t,i){e=Math.floor(e),t[i+0]=255&e,t[i+1]=e>>8&255}function r(e,t,i){e=Math.floor(e),t[i+0]=255&e,t[i+1]=e>>8&255,t[i+2]=e>>16&255,t[i+3]=e>>24&255}function a(e){const t=new ArrayBuffer(4);return new Float32Array(t)[0]=e,0|new Uint32Array(t)[0]}e.exports=async function(e,o,n){const s=await async function(e,t){let i=e;i instanceof Blob||(i=new Blob([e]));const r=URL.createObjectURL(i),a=await fetch(r),o=await a.arrayBuffer(),n=new AudioContext(t);return await n.decodeAudioData(o)}(e,n),u=s.length,l=s.numberOfChannels,c=s.sampleRate,h=o?32:16,p=c*l*h/8,d=l*h/8,g=u*l*(h/8),_=new Uint8Array(44+g),m=g,f=28+(8+m);return t("RIFF",_,0),r(f,_,4),t("WAVE",_,8),t("fmt ",_,12),r(16,_,16),i(o?3:1,_,20),i(l,_,22),r(c,_,24),r(p,_,28),i(d,_,32),r(h,_,34),t("data",_,36),r(m,_,40),function(e,t,o,n){let s=0,u=0;const l=e.length,c=e.numberOfChannels;let h,p;for(s=0;s<l;++s)for(u=0;u<c;++u)if(h=e.getChannelData(u),16===n)p=32768*h[s],p<-32768?p=-32768:p>32767&&(p=32767),i(p,t,o),o+=2;else{if(32!==n)return void console.log("Invalid bit depth for PCM encoding.");p=a(h[s]),r(p,t,o),o+=4}}(s,_,44,h),new Blob([_],{type:"audio/wave"})}},7147:function(e,t,i){"use strict";i.r(t),i.d(t,{DOMException:function(){return I},Headers:function(){return g},Request:function(){return M},Response:function(){return S},fetch:function(){return x}});var r="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==r&&r,a="URLSearchParams"in r,o="Symbol"in r&&"iterator"in Symbol,n="FileReader"in r&&"Blob"in r&&function(){try{return new Blob,!0}catch(e){return!1}}(),s="FormData"in r,u="ArrayBuffer"in r;if(u)var l=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&l.indexOf(Object.prototype.toString.call(e))>-1};function h(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError('Invalid character in header field name: "'+e+'"');return e.toLowerCase()}function p(e){return"string"!=typeof e&&(e=String(e)),e}function d(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return o&&(t[Symbol.iterator]=function(){return t}),t}function g(e){this.map={},e instanceof g?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function _(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function m(e){return new Promise((function(t,i){e.onload=function(){t(e.result)},e.onerror=function(){i(e.error)}}))}function f(e){var t=new FileReader,i=m(t);return t.readAsArrayBuffer(e),i}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function v(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:n&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:s&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:a&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&n&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):a&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n&&(this.blob=function(){var e=_(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?_(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(f)}),this.text=function(){var e,t,i,r=_(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,i=m(t=new FileReader),t.readAsText(e),i;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),i=new Array(t.length),r=0;r<t.length;r++)i[r]=String.fromCharCode(t[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(C)}),this.json=function(){return this.text().then(JSON.parse)},this}g.prototype.append=function(e,t){e=h(e),t=p(t);var i=this.map[e];this.map[e]=i?i+", "+t:t},g.prototype.delete=function(e){delete this.map[h(e)]},g.prototype.get=function(e){return e=h(e),this.has(e)?this.map[e]:null},g.prototype.has=function(e){return this.map.hasOwnProperty(h(e))},g.prototype.set=function(e,t){this.map[h(e)]=p(t)},g.prototype.forEach=function(e,t){for(var i in this.map)this.map.hasOwnProperty(i)&&e.call(t,this.map[i],i,this)},g.prototype.keys=function(){var e=[];return this.forEach((function(t,i){e.push(i)})),d(e)},g.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),d(e)},g.prototype.entries=function(){var e=[];return this.forEach((function(t,i){e.push([i,t])})),d(e)},o&&(g.prototype[Symbol.iterator]=g.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function M(e,t){if(!(this instanceof M))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');var i,r,a=(t=t||{}).body;if(e instanceof M){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new g(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,a||null==e._bodyInit||(a=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new g(t.headers)),this.method=(r=(i=t.method||this.method||"GET").toUpperCase(),b.indexOf(r)>-1?r:i),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&a)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(a),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==t.cache&&"no-cache"!==t.cache)){var o=/([?&])_=[^&]*/;o.test(this.url)?this.url=this.url.replace(o,"$1_="+(new Date).getTime()):this.url+=(/\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function C(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var i=e.split("="),r=i.shift().replace(/\+/g," "),a=i.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(a))}})),t}function S(e,t){if(!(this instanceof S))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===t.statusText?"":""+t.statusText,this.headers=new g(t.headers),this.url=t.url||"",this._initBody(e)}M.prototype.clone=function(){return new M(this,{body:this._bodyInit})},v.call(M.prototype),v.call(S.prototype),S.prototype.clone=function(){return new S(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new g(this.headers),url:this.url})},S.error=function(){var e=new S(null,{status:0,statusText:""});return e.type="error",e};var P=[301,302,303,307,308];S.redirect=function(e,t){if(-1===P.indexOf(t))throw new RangeError("Invalid status code");return new S(null,{status:t,headers:{location:e}})};var I=r.DOMException;try{new I}catch(e){(I=function(e,t){this.message=e,this.name=t;var i=Error(e);this.stack=i.stack}).prototype=Object.create(Error.prototype),I.prototype.constructor=I}function x(e,t){return new Promise((function(i,a){var o=new M(e,t);if(o.signal&&o.signal.aborted)return a(new I("Aborted","AbortError"));var s=new XMLHttpRequest;function l(){s.abort()}s.onload=function(){var e,t,r={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new g,e.replace(/\r?\n[\t ]+/g," ").split("\r").map((function(e){return 0===e.indexOf("\n")?e.substr(1,e.length):e})).forEach((function(e){var i=e.split(":"),r=i.shift().trim();if(r){var a=i.join(":").trim();t.append(r,a)}})),t)};r.url="responseURL"in s?s.responseURL:r.headers.get("X-Request-URL");var a="response"in s?s.response:s.responseText;setTimeout((function(){i(new S(a,r))}),0)},s.onerror=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){a(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){a(new I("Aborted","AbortError"))}),0)},s.open(o.method,function(e){try{return""===e&&r.location.href?r.location.href:e}catch(t){return e}}(o.url),!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&(n?s.responseType="blob":u&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof g?o.headers.forEach((function(e,t){s.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){s.setRequestHeader(e,p(t.headers[e]))})),o.signal&&(o.signal.addEventListener("abort",l),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",l)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}x.polyfill=!0,r.fetch||(r.fetch=x,r.Headers=g,r.Request=M,r.Response=S)}},t={};function i(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,i),o.exports}i.d=function(e,t){for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(8519)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,